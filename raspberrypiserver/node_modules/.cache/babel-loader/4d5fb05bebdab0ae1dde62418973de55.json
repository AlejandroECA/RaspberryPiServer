{"ast":null,"code":"var _jsxFileName = \"/Users/alejandrocarrillo/Documents/Projects/RaspberryPi/server/raspberrypiserver/src/components/Rive-Components/RiveComponents.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Rive, { useRive, useStateMachineInput } from 'rive-react';\nimport switche from './850-1653-smiley-switch.riv';\nimport globe from './1242-2394-milkshake-bomb.riv';\nimport monster from './623-1217-happy-monster.riv';\nimport teddy from './828-1605-teddy-animation.riv';\nimport useMouse from '@react-hook/mouse-position';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Example() {\n  _s();\n\n  const STATE_MACHINE_NAME = 'Remember Start SM';\n  const INPUT_NAME = 'Toggle';\n  const {\n    rive,\n    RiveComponent\n  } = useRive({\n    src: switche,\n    stateMachines: STATE_MACHINE_NAME,\n    //   artboard: 'Artboard',\n    autoplay: true\n  }); // pressedInput in a trigger state machine input. To transition the state\n  // we need to call the `fire()` method on the input.\n\n  const onclickInput = useStateMachineInput(rive, STATE_MACHINE_NAME, INPUT_NAME); // console.log(rive);\n\n  return (\n    /*#__PURE__*/\n    // The animation will fit to the parent element, so we set a large height\n    // and width for this example.\n    _jsxDEV(\"div\", {\n      style: {\n        height: '500px',\n        width: '500px'\n      },\n      children: /*#__PURE__*/_jsxDEV(RiveComponent, {\n        onClick: () => onclickInput.fire()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Example, \"nZMgadefCDv5wl+Ydq9EIguo4hk=\", false, function () {\n  return [useRive, useStateMachineInput];\n});\n\n_c = Example;\nexport function Teddy() {\n  _s2();\n\n  // TODO: check this ref in parent component\n  const STATE_MACHINE_NAME = 'State Machine 1';\n  const INPUT_NAME_1 = 'Check';\n  const INPUT_NAME_2 = 'Look';\n  const INPUT_NAME_3 = 'success';\n  const INPUT_NAME_4 = 'fail';\n  const INPUT_NAME_5 = 'success';\n  const {\n    rive,\n    RiveComponent\n  } = useRive({\n    src: teddy,\n    stateMachines: STATE_MACHINE_NAME,\n    artboard: 'Artboard',\n    autoplay: true // layout: new Layout({ fit: Fit.Cover }), \n    // fit: rive.layout.alignment.\n    // onStateChange: (e) => {\n    //     console.log(e.data[0]);\n    // }\n\n  }); // pressedInput in a trigger state machine input. To transition the state\n  // we need to call the `fire()` method on the input.\n\n  const SuccessInput = useStateMachineInput(rive, STATE_MACHINE_NAME, INPUT_NAME_5);\n  const CheckInput = useStateMachineInput(rive, STATE_MACHINE_NAME, INPUT_NAME_1);\n  console.log(mouse);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(RiveComponent, {\n      ref: ref,\n      onClick: () => SuccessInput.fire(),\n      onHover: () => CheckInput.vslue = mouse.x\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Teddy, \"GWkGKFWSQarOVoGSzUHsmhNutCU=\", false, function () {\n  return [useRive, useStateMachineInput, useStateMachineInput];\n});\n\n_c2 = Teddy;\nexport const BackgroundAnimated = () => {\n  return /*#__PURE__*/_jsxDEV(Rive, {\n    src: globe,\n    cover: true,\n    fill: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_c3 = BackgroundAnimated;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Example\");\n$RefreshReg$(_c2, \"Teddy\");\n$RefreshReg$(_c3, \"BackgroundAnimated\");","map":{"version":3,"sources":["/Users/alejandrocarrillo/Documents/Projects/RaspberryPi/server/raspberrypiserver/src/components/Rive-Components/RiveComponents.js"],"names":["React","useState","useEffect","useRef","Rive","useRive","useStateMachineInput","switche","globe","monster","teddy","useMouse","Example","STATE_MACHINE_NAME","INPUT_NAME","rive","RiveComponent","src","stateMachines","autoplay","onclickInput","height","width","fire","Teddy","INPUT_NAME_1","INPUT_NAME_2","INPUT_NAME_3","INPUT_NAME_4","INPUT_NAME_5","artboard","SuccessInput","CheckInput","console","log","mouse","ref","vslue","x","BackgroundAnimated"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\nimport Rive,{ useRive,useStateMachineInput } from 'rive-react';\nimport switche from './850-1653-smiley-switch.riv'\nimport globe from './1242-2394-milkshake-bomb.riv'\nimport monster from './623-1217-happy-monster.riv'\nimport teddy from './828-1605-teddy-animation.riv'\nimport useMouse from '@react-hook/mouse-position'\n\nexport function Example() {\n    const STATE_MACHINE_NAME = 'Remember Start SM';\n    const INPUT_NAME = 'Toggle'\n    \n    const { rive, RiveComponent } = useRive({\n        src: switche,\n        stateMachines:STATE_MACHINE_NAME,\n    //   artboard: 'Artboard',\n        autoplay: true, \n    });\n    \n    // pressedInput in a trigger state machine input. To transition the state\n    // we need to call the `fire()` method on the input.\n    const onclickInput = useStateMachineInput(\n        rive,\n        STATE_MACHINE_NAME,\n        INPUT_NAME\n    );\n\n    // console.log(rive);\n    \n    return (\n        // The animation will fit to the parent element, so we set a large height\n        // and width for this example.\n        <div style={{ height: '500px', width: '500px' }}>\n        <RiveComponent\n            onClick={() => onclickInput.fire()} \n        />\n        </div>\n    );\n}\n\nexport function Teddy() {\n\n    // TODO: check this ref in parent component\n\n    \n\n\n    const STATE_MACHINE_NAME = 'State Machine 1'\n    const INPUT_NAME_1 = 'Check'\n    const INPUT_NAME_2 = 'Look'\n    const INPUT_NAME_3 = 'success'\n    const INPUT_NAME_4 = 'fail'\n    const INPUT_NAME_5 = 'success'\n    \n    const { rive, RiveComponent } = useRive({\n        src: teddy,\n        stateMachines:STATE_MACHINE_NAME,\n        artboard: 'Artboard',\n        autoplay: true,\n        // layout: new Layout({ fit: Fit.Cover }), \n        // fit: rive.layout.alignment.\n        // onStateChange: (e) => {\n        //     console.log(e.data[0]);\n        // }\n    });\n    \n    // pressedInput in a trigger state machine input. To transition the state\n    // we need to call the `fire()` method on the input.\n    const SuccessInput = useStateMachineInput(\n        rive,\n        STATE_MACHINE_NAME,\n        INPUT_NAME_5\n    );\n\n    const CheckInput = useStateMachineInput(\n        rive,\n        STATE_MACHINE_NAME,\n        INPUT_NAME_1\n    );\n\n\n    console.log(mouse);\n\n    return (\n\n        <div ref={ref} >\n        <RiveComponent\n            ref={ref}\n            onClick={() => SuccessInput.fire()}\n            onHover={() => CheckInput.vslue=mouse.x}\n        />\n        </div>\n    );\n}\n\nexport const BackgroundAnimated = () => { \n    return (\n        <Rive \n            src={globe}\n            cover\n            fill\n        />\n    )\n}"]},"metadata":{},"sourceType":"module"}