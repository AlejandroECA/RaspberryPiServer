{"ast":null,"code":"var _jsxFileName = \"/Users/alejandrocarrillo/Documents/Projects/RaspberryPi/server/raspberrypiserver/src/components/Rive-Components/WaterBar.component.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport waterRive from './715-1406-water-bar-demo.riv';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WaterBar = ({\n  scroll\n}) => {\n  _s();\n\n  const STATE_MACHINE_NAME = 'State Machines';\n  const INPUT_NAME_1 = 'Level';\n  const {\n    rive,\n    RiveComponent\n  } = useRive({\n    src: waterRive,\n    stateMachines: STATE_MACHINE_NAME,\n    artboard: 'New Artboard',\n    autoplay: true // layout: new Layout({ fit: Fit.Cover }), \n    // fit: rive.layout.alignment.\n    // onStateChange: (e) => {\n    //     console.log(e.data[0]);\n    // }\n\n  }); // pressedInput in a trigger state machine input. To transition the state\n  // we need to call the `fire()` method on the input.\n\n  const ValueInput = useStateMachineInput(rive, STATE_MACHINE_NAME, INPUT_NAME_1);\n  return /*#__PURE__*/_jsxDEV(RiveComponent, {\n    onMouseEnter: () => ValueInput.fire(),\n    render: () => ValueInput.value = scroll\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WaterBar, \"oiykfWRbZdSXUznoObl0mtSPlN4=\", true);\n\n_c = WaterBar;\nexport default waterRive;\n\nvar _c;\n\n$RefreshReg$(_c, \"WaterBar\");","map":{"version":3,"sources":["/Users/alejandrocarrillo/Documents/Projects/RaspberryPi/server/raspberrypiserver/src/components/Rive-Components/WaterBar.component.js"],"names":["React","waterRive","WaterBar","scroll","STATE_MACHINE_NAME","INPUT_NAME_1","rive","RiveComponent","useRive","src","stateMachines","artboard","autoplay","ValueInput","useStateMachineInput","fire","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAc;AAAA;;AAG3B,QAAMC,kBAAkB,GAAG,gBAA3B;AACA,QAAMC,YAAY,GAAG,OAArB;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAA0BC,OAAO,CAAC;AACpCC,IAAAA,GAAG,EAAER,SAD+B;AAEpCS,IAAAA,aAAa,EAACN,kBAFsB;AAGpCO,IAAAA,QAAQ,EAAE,cAH0B;AAIpCC,IAAAA,QAAQ,EAAE,IAJ0B,CAKpC;AACA;AACA;AACA;AACA;;AAToC,GAAD,CAAvC,CAN2B,CAkB3B;AACA;;AACA,QAAMC,UAAU,GAAGC,oBAAoB,CACnCR,IADmC,EAEnCF,kBAFmC,EAGnCC,YAHmC,CAAvC;AAOA,sBAEI,QAAC,aAAD;AACI,IAAA,YAAY,EAAE,MAAMQ,UAAU,CAACE,IAAX,EADxB;AAEI,IAAA,MAAM,EAAE,MAAKF,UAAU,CAACG,KAAX,GAAmBb;AAFpC;AAAA;AAAA;AAAA;AAAA,UAFJ;AAQH,CAnCD;;GAAMD,Q;;KAAAA,Q;AAqCN,eAAeD,SAAf","sourcesContent":["import React from \"react\";\nimport waterRive from './715-1406-water-bar-demo.riv'\n\nconst WaterBar = ({scroll}) => {\n\n\n    const STATE_MACHINE_NAME = 'State Machines'\n    const INPUT_NAME_1 = 'Level'\n    \n    const { rive, RiveComponent } = useRive({\n        src: waterRive,\n        stateMachines:STATE_MACHINE_NAME,\n        artboard: 'New Artboard',\n        autoplay: true,\n        // layout: new Layout({ fit: Fit.Cover }), \n        // fit: rive.layout.alignment.\n        // onStateChange: (e) => {\n        //     console.log(e.data[0]);\n        // }\n    });\n    \n    // pressedInput in a trigger state machine input. To transition the state\n    // we need to call the `fire()` method on the input.\n    const ValueInput = useStateMachineInput(\n        rive,\n        STATE_MACHINE_NAME,\n        INPUT_NAME_1\n    );\n\n\n    return (\n\n        <RiveComponent\n            onMouseEnter={() => ValueInput.fire() }\n            render={()=> ValueInput.value = scroll}\n        />\n    );\n\n}\n\nexport default waterRive"]},"metadata":{},"sourceType":"module"}