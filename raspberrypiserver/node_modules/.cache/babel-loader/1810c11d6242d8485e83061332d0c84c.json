{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports[\"rive\"] = factory();else root[\"rive\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    (() => {\n      // webpackBootstrap\n\n      /******/\n      var __webpack_modules__ = [\n        /* 0 */\n      ,\n      /* 1 */\n\n      /***/\n      (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n        \"use strict\";\n\n        var __filename = \"/index.js\";\n        var __dirname = \"/\";\n\n        __webpack_require__.r(__webpack_exports__);\n        /* harmony export */\n\n\n        __webpack_require__.d(__webpack_exports__, {\n          /* harmony export */\n          \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n          /* harmony export */\n\n        });\n\n        var Rive = function () {\n          var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n\n          if (true) _scriptDir = _scriptDir || __filename;\n          return function (Rive) {\n            Rive = Rive || {};\n            null;\n            var Module = typeof Rive !== \"undefined\" ? Rive : {};\n            var readyPromiseResolve, readyPromiseReject;\n            Module[\"ready\"] = new Promise(function (resolve, reject) {\n              readyPromiseResolve = resolve;\n              readyPromiseReject = reject;\n            });\n\n            function makeMatrix(m2d) {\n              const m = new DOMMatrix();\n              m.a = m2d.xx;\n              m.b = m2d.xy;\n              m.c = m2d.yx;\n              m.d = m2d.yy;\n              m.e = m2d.tx;\n              m.f = m2d.ty;\n              return m;\n            }\n\n            Module.onRuntimeInitialized = function () {\n              const RenderPaintStyle = Module.RenderPaintStyle;\n              const FillRule = Module.FillRule;\n              const RenderPath = Module.RenderPath;\n              const RenderPaint = Module.RenderPaint;\n              const Renderer = Module.Renderer;\n              const StrokeCap = Module.StrokeCap;\n              const StrokeJoin = Module.StrokeJoin;\n              const BlendMode = Module.BlendMode;\n              const fill = RenderPaintStyle.fill;\n              const stroke = RenderPaintStyle.stroke;\n              const evenOdd = FillRule.evenOdd;\n              const nonZero = FillRule.nonZero;\n              var CanvasRenderPath = RenderPath.extend(\"CanvasRenderPath\", {\n                __construct: function () {\n                  this.__parent.__construct.call(this);\n\n                  this._path2D = new Path2D();\n                },\n                reset: function () {\n                  this._path2D = new Path2D();\n                },\n                addPath: function (path, m2d) {\n                  this._path2D.addPath(path._path2D, makeMatrix(m2d));\n                },\n                fillRule: function (fillRule) {\n                  this._fillRule = fillRule;\n                },\n                moveTo: function (x, y) {\n                  this._path2D.moveTo(x, y);\n                },\n                lineTo: function (x, y) {\n                  this._path2D.lineTo(x, y);\n                },\n                cubicTo: function (ox, oy, ix, iy, x, y) {\n                  this._path2D.bezierCurveTo(ox, oy, ix, iy, x, y);\n                },\n                close: function () {\n                  this._path2D.closePath();\n                }\n              });\n\n              function _colorStyle(value) {\n                return \"rgba(\" + ((16711680 & value) >>> 16) + \",\" + ((65280 & value) >>> 8) + \",\" + ((255 & value) >>> 0) + \",\" + ((4278190080 & value) >>> 24) / 255 + \")\";\n              }\n\n              var CanvasRenderPaint = RenderPaint.extend(\"CanvasRenderPaint\", {\n                color: function (value) {\n                  this._value = _colorStyle(value);\n                },\n                thickness: function (value) {\n                  this._thickness = value;\n                },\n                join: function (value) {\n                  switch (value) {\n                    case StrokeJoin.miter:\n                      this._join = \"miter\";\n                      break;\n\n                    case StrokeJoin.round:\n                      this._join = \"round\";\n                      break;\n\n                    case StrokeJoin.bevel:\n                      this._join = \"bevel\";\n                      break;\n                  }\n                },\n                cap: function (value) {\n                  switch (value) {\n                    case StrokeCap.butt:\n                      this._cap = \"butt\";\n                      break;\n\n                    case StrokeCap.round:\n                      this._cap = \"round\";\n                      break;\n\n                    case StrokeCap.square:\n                      this._cap = \"square\";\n                      break;\n                  }\n                },\n                style: function (value) {\n                  this._style = value;\n                },\n                blendMode: function (value) {\n                  switch (value) {\n                    case BlendMode.srcOver:\n                      this._blend = \"source-over\";\n                      break;\n\n                    case BlendMode.screen:\n                      this._blend = \"screen\";\n                      break;\n\n                    case BlendMode.overlay:\n                      this._blend = \"overlay\";\n                      break;\n\n                    case BlendMode.darken:\n                      this._blend = \"darken\";\n                      break;\n\n                    case BlendMode.lighten:\n                      this._blend = \"lighten\";\n                      break;\n\n                    case BlendMode.colorDodge:\n                      this._blend = \"color-dodge\";\n                      break;\n\n                    case BlendMode.colorBurn:\n                      this._blend = \"color-burn\";\n                      break;\n\n                    case BlendMode.hardLight:\n                      this._blend = \"hard-light\";\n                      break;\n\n                    case BlendMode.softLight:\n                      this._blend = \"soft-light\";\n                      break;\n\n                    case BlendMode.difference:\n                      this._blend = \"difference\";\n                      break;\n\n                    case BlendMode.exclusion:\n                      this._blend = \"exclusion\";\n                      break;\n\n                    case BlendMode.multiply:\n                      this._blend = \"multiply\";\n                      break;\n\n                    case BlendMode.hue:\n                      this._blend = \"hue\";\n                      break;\n\n                    case BlendMode.saturation:\n                      this._blend = \"saturation\";\n                      break;\n\n                    case BlendMode.color:\n                      this._blend = \"color\";\n                      break;\n\n                    case BlendMode.luminosity:\n                      this._blend = \"luminosity\";\n                      break;\n                  }\n                },\n                linearGradient: function (sx, sy, ex, ey) {\n                  this._gradient = {\n                    sx: sx,\n                    sy: sy,\n                    ex: ex,\n                    ey: ey,\n                    stops: []\n                  };\n                },\n                radialGradient: function (sx, sy, ex, ey) {\n                  this._gradient = {\n                    sx: sx,\n                    sy: sy,\n                    ex: ex,\n                    ey: ey,\n                    stops: [],\n                    isRadial: true\n                  };\n                },\n                addStop: function (color, stop) {\n                  this._gradient.stops.push({\n                    color: color,\n                    stop: stop\n                  });\n                },\n                completeGradient: function () {},\n                draw: function (ctx, path) {\n                  let _style = this._style;\n                  let _value = this._value;\n                  let _gradient = this._gradient;\n                  let _blend = this._blend;\n                  ctx.globalCompositeOperation = _blend;\n\n                  if (_gradient != null) {\n                    const sx = _gradient.sx;\n                    const sy = _gradient.sy;\n                    const ex = _gradient.ex;\n                    const ey = _gradient.ey;\n                    const stops = _gradient.stops;\n\n                    if (_gradient.isRadial) {\n                      var dx = ex - sx;\n                      var dy = ey - sy;\n                      var radius = Math.sqrt(dx * dx + dy * dy);\n                      _value = ctx.createRadialGradient(sx, sy, 0, sx, sy, radius);\n                    } else {\n                      _value = ctx.createLinearGradient(sx, sy, ex, ey);\n                    }\n\n                    for (let i = 0, l = stops.length; i < l; i++) {\n                      const value = stops[i];\n                      const stop = value.stop;\n                      const color = value.color;\n\n                      _value.addColorStop(stop, _colorStyle(color));\n                    }\n\n                    this._value = _value;\n                    this._gradient = null;\n                  }\n\n                  switch (_style) {\n                    case stroke:\n                      ctx.strokeStyle = _value;\n                      ctx.lineWidth = this._thickness;\n                      ctx.lineCap = this._cap;\n                      ctx.lineJoin = this._join;\n                      ctx.stroke(path._path2D);\n                      break;\n\n                    case fill:\n                      ctx.fillStyle = _value;\n                      ctx.fill(path._path2D, path._fillRule === evenOdd ? \"evenodd\" : \"nonzero\");\n                      break;\n                  }\n                }\n              });\n              Module.CanvasRenderer = Renderer.extend(\"Renderer\", {\n                __construct: function (ctx) {\n                  this.__parent.__construct.call(this);\n\n                  this._ctx = ctx;\n                },\n                save: function () {\n                  this._ctx.save();\n                },\n                restore: function () {\n                  this._ctx.restore();\n                },\n                transform: function (matrix) {\n                  this._ctx.transform(matrix.xx, matrix.xy, matrix.yx, matrix.yy, matrix.tx, matrix.ty);\n                },\n                drawPath: function (path, paint) {\n                  paint.draw(this._ctx, path);\n                },\n                clipPath: function (path) {\n                  this._ctx.clip(path._path2D, path._fillRule === evenOdd ? \"evenodd\" : \"nonzero\");\n                }\n              });\n              Module.renderFactory = {\n                makeRenderPaint: function () {\n                  return new CanvasRenderPaint();\n                },\n                makeRenderPath: function () {\n                  return new CanvasRenderPath();\n                }\n              };\n            };\n\n            var moduleOverrides = {};\n            var key;\n\n            for (key in Module) {\n              if (Module.hasOwnProperty(key)) {\n                moduleOverrides[key] = Module[key];\n              }\n            }\n\n            var arguments_ = [];\n            var thisProgram = \"./this.program\";\n\n            var quit_ = function (status, toThrow) {\n              throw toThrow;\n            };\n\n            var ENVIRONMENT_IS_WEB = false;\n            var ENVIRONMENT_IS_WORKER = false;\n            var ENVIRONMENT_IS_NODE = false;\n            var ENVIRONMENT_IS_SHELL = false;\n            ENVIRONMENT_IS_WEB = typeof window === \"object\";\n            ENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n            ENVIRONMENT_IS_NODE = typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node === \"string\";\n            ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n            var scriptDirectory = \"\";\n\n            function locateFile(path) {\n              if (Module[\"locateFile\"]) {\n                return Module[\"locateFile\"](path, scriptDirectory);\n              }\n\n              return scriptDirectory + path;\n            }\n\n            var read_, readAsync, readBinary, setWindowTitle;\n            var nodeFS;\n            var nodePath;\n\n            if (ENVIRONMENT_IS_NODE) {\n              if (ENVIRONMENT_IS_WORKER) {\n                scriptDirectory = __webpack_require__(2).dirname(scriptDirectory) + \"/\";\n              } else {\n                scriptDirectory = __dirname + \"/\";\n              }\n\n              read_ = function shell_read(filename, binary) {\n                var ret = tryParseAsDataURI(filename);\n\n                if (ret) {\n                  return binary ? ret : ret.toString();\n                }\n\n                if (!nodeFS) nodeFS = __webpack_require__(3);\n                if (!nodePath) nodePath = __webpack_require__(2);\n                filename = nodePath[\"normalize\"](filename);\n                return nodeFS[\"readFileSync\"](filename, binary ? null : \"utf8\");\n              };\n\n              readBinary = function readBinary(filename) {\n                var ret = read_(filename, true);\n\n                if (!ret.buffer) {\n                  ret = new Uint8Array(ret);\n                }\n\n                assert(ret.buffer);\n                return ret;\n              };\n\n              if (process[\"argv\"].length > 1) {\n                thisProgram = process[\"argv\"][1].replace(/\\\\/g, \"/\");\n              }\n\n              arguments_ = process[\"argv\"].slice(2);\n              process[\"on\"](\"uncaughtException\", function (ex) {\n                if (!(ex instanceof ExitStatus)) {\n                  throw ex;\n                }\n              });\n              process[\"on\"](\"unhandledRejection\", abort);\n\n              quit_ = function (status) {\n                process[\"exit\"](status);\n              };\n\n              Module[\"inspect\"] = function () {\n                return \"[Emscripten Module object]\";\n              };\n            } else if (ENVIRONMENT_IS_SHELL) {\n              if (typeof read != \"undefined\") {\n                read_ = function shell_read(f) {\n                  var data = tryParseAsDataURI(f);\n\n                  if (data) {\n                    return intArrayToString(data);\n                  }\n\n                  return read(f);\n                };\n              }\n\n              readBinary = function readBinary(f) {\n                var data;\n                data = tryParseAsDataURI(f);\n\n                if (data) {\n                  return data;\n                }\n\n                if (typeof readbuffer === \"function\") {\n                  return new Uint8Array(readbuffer(f));\n                }\n\n                data = read(f, \"binary\");\n                assert(typeof data === \"object\");\n                return data;\n              };\n\n              if (typeof scriptArgs != \"undefined\") {\n                arguments_ = scriptArgs;\n              } else if (typeof arguments != \"undefined\") {\n                arguments_ = arguments;\n              }\n\n              if (typeof quit === \"function\") {\n                quit_ = function (status) {\n                  quit(status);\n                };\n              }\n\n              if (typeof print !== \"undefined\") {\n                if (typeof console === \"undefined\") console = {};\n                console.log = print;\n                console.warn = console.error = typeof printErr !== \"undefined\" ? printErr : print;\n              }\n            } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n              if (ENVIRONMENT_IS_WORKER) {\n                scriptDirectory = self.location.href;\n              } else if (typeof document !== \"undefined\" && document.currentScript) {\n                scriptDirectory = document.currentScript.src;\n              }\n\n              if (_scriptDir) {\n                scriptDirectory = _scriptDir;\n              }\n\n              if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n                scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf(\"/\") + 1);\n              } else {\n                scriptDirectory = \"\";\n              }\n\n              {\n                read_ = function (url) {\n                  try {\n                    var xhr = new XMLHttpRequest();\n                    xhr.open(\"GET\", url, false);\n                    xhr.send(null);\n                    return xhr.responseText;\n                  } catch (err) {\n                    var data = tryParseAsDataURI(url);\n\n                    if (data) {\n                      return intArrayToString(data);\n                    }\n\n                    throw err;\n                  }\n                };\n\n                if (ENVIRONMENT_IS_WORKER) {\n                  readBinary = function (url) {\n                    try {\n                      var xhr = new XMLHttpRequest();\n                      xhr.open(\"GET\", url, false);\n                      xhr.responseType = \"arraybuffer\";\n                      xhr.send(null);\n                      return new Uint8Array(xhr.response);\n                    } catch (err) {\n                      var data = tryParseAsDataURI(url);\n\n                      if (data) {\n                        return data;\n                      }\n\n                      throw err;\n                    }\n                  };\n                }\n\n                readAsync = function (url, onload, onerror) {\n                  var xhr = new XMLHttpRequest();\n                  xhr.open(\"GET\", url, true);\n                  xhr.responseType = \"arraybuffer\";\n\n                  xhr.onload = function () {\n                    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n                      onload(xhr.response);\n                      return;\n                    }\n\n                    var data = tryParseAsDataURI(url);\n\n                    if (data) {\n                      onload(data.buffer);\n                      return;\n                    }\n\n                    onerror();\n                  };\n\n                  xhr.onerror = onerror;\n                  xhr.send(null);\n                };\n              }\n\n              setWindowTitle = function (title) {\n                document.title = title;\n              };\n            } else {}\n\n            var out = Module[\"print\"] || console.log.bind(console);\n            var err = Module[\"printErr\"] || console.warn.bind(console);\n\n            for (key in moduleOverrides) {\n              if (moduleOverrides.hasOwnProperty(key)) {\n                Module[key] = moduleOverrides[key];\n              }\n            }\n\n            moduleOverrides = null;\n            if (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n            if (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n            if (Module[\"quit\"]) quit_ = Module[\"quit\"];\n            var tempRet0 = 0;\n\n            var setTempRet0 = function (value) {\n              tempRet0 = value;\n            };\n\n            var wasmBinary;\n            if (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n            var noExitRuntime = Module[\"noExitRuntime\"] || true;\n\n            if (typeof WebAssembly !== \"object\") {\n              abort(\"no native wasm support detected\");\n            }\n\n            var wasmMemory;\n            var ABORT = false;\n            var EXITSTATUS;\n\n            function assert(condition, text) {\n              if (!condition) {\n                abort(\"Assertion failed: \" + text);\n              }\n            }\n\n            var UTF8Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n\n            function UTF8ArrayToString(heap, idx, maxBytesToRead) {\n              var endIdx = idx + maxBytesToRead;\n              var endPtr = idx;\n\n              while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n\n              if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {\n                return UTF8Decoder.decode(heap.subarray(idx, endPtr));\n              } else {\n                var str = \"\";\n\n                while (idx < endPtr) {\n                  var u0 = heap[idx++];\n\n                  if (!(u0 & 128)) {\n                    str += String.fromCharCode(u0);\n                    continue;\n                  }\n\n                  var u1 = heap[idx++] & 63;\n\n                  if ((u0 & 224) == 192) {\n                    str += String.fromCharCode((u0 & 31) << 6 | u1);\n                    continue;\n                  }\n\n                  var u2 = heap[idx++] & 63;\n\n                  if ((u0 & 240) == 224) {\n                    u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n                  } else {\n                    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;\n                  }\n\n                  if (u0 < 65536) {\n                    str += String.fromCharCode(u0);\n                  } else {\n                    var ch = u0 - 65536;\n                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n                  }\n                }\n              }\n\n              return str;\n            }\n\n            function UTF8ToString(ptr, maxBytesToRead) {\n              return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n            }\n\n            function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n              if (!(maxBytesToWrite > 0)) return 0;\n              var startIdx = outIdx;\n              var endIdx = outIdx + maxBytesToWrite - 1;\n\n              for (var i = 0; i < str.length; ++i) {\n                var u = str.charCodeAt(i);\n\n                if (u >= 55296 && u <= 57343) {\n                  var u1 = str.charCodeAt(++i);\n                  u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n                }\n\n                if (u <= 127) {\n                  if (outIdx >= endIdx) break;\n                  heap[outIdx++] = u;\n                } else if (u <= 2047) {\n                  if (outIdx + 1 >= endIdx) break;\n                  heap[outIdx++] = 192 | u >> 6;\n                  heap[outIdx++] = 128 | u & 63;\n                } else if (u <= 65535) {\n                  if (outIdx + 2 >= endIdx) break;\n                  heap[outIdx++] = 224 | u >> 12;\n                  heap[outIdx++] = 128 | u >> 6 & 63;\n                  heap[outIdx++] = 128 | u & 63;\n                } else {\n                  if (outIdx + 3 >= endIdx) break;\n                  heap[outIdx++] = 240 | u >> 18;\n                  heap[outIdx++] = 128 | u >> 12 & 63;\n                  heap[outIdx++] = 128 | u >> 6 & 63;\n                  heap[outIdx++] = 128 | u & 63;\n                }\n              }\n\n              heap[outIdx] = 0;\n              return outIdx - startIdx;\n            }\n\n            function stringToUTF8(str, outPtr, maxBytesToWrite) {\n              return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n            }\n\n            function lengthBytesUTF8(str) {\n              var len = 0;\n\n              for (var i = 0; i < str.length; ++i) {\n                var u = str.charCodeAt(i);\n                if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n                if (u <= 127) ++len;else if (u <= 2047) len += 2;else if (u <= 65535) len += 3;else len += 4;\n              }\n\n              return len;\n            }\n\n            var UTF16Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf-16le\") : undefined;\n\n            function UTF16ToString(ptr, maxBytesToRead) {\n              var endPtr = ptr;\n              var idx = endPtr >> 1;\n              var maxIdx = idx + maxBytesToRead / 2;\n\n              while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;\n\n              endPtr = idx << 1;\n\n              if (endPtr - ptr > 32 && UTF16Decoder) {\n                return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n              } else {\n                var str = \"\";\n\n                for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {\n                  var codeUnit = HEAP16[ptr + i * 2 >> 1];\n                  if (codeUnit == 0) break;\n                  str += String.fromCharCode(codeUnit);\n                }\n\n                return str;\n              }\n            }\n\n            function stringToUTF16(str, outPtr, maxBytesToWrite) {\n              if (maxBytesToWrite === undefined) {\n                maxBytesToWrite = 2147483647;\n              }\n\n              if (maxBytesToWrite < 2) return 0;\n              maxBytesToWrite -= 2;\n              var startPtr = outPtr;\n              var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;\n\n              for (var i = 0; i < numCharsToWrite; ++i) {\n                var codeUnit = str.charCodeAt(i);\n                HEAP16[outPtr >> 1] = codeUnit;\n                outPtr += 2;\n              }\n\n              HEAP16[outPtr >> 1] = 0;\n              return outPtr - startPtr;\n            }\n\n            function lengthBytesUTF16(str) {\n              return str.length * 2;\n            }\n\n            function UTF32ToString(ptr, maxBytesToRead) {\n              var i = 0;\n              var str = \"\";\n\n              while (!(i >= maxBytesToRead / 4)) {\n                var utf32 = HEAP32[ptr + i * 4 >> 2];\n                if (utf32 == 0) break;\n                ++i;\n\n                if (utf32 >= 65536) {\n                  var ch = utf32 - 65536;\n                  str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n                } else {\n                  str += String.fromCharCode(utf32);\n                }\n              }\n\n              return str;\n            }\n\n            function stringToUTF32(str, outPtr, maxBytesToWrite) {\n              if (maxBytesToWrite === undefined) {\n                maxBytesToWrite = 2147483647;\n              }\n\n              if (maxBytesToWrite < 4) return 0;\n              var startPtr = outPtr;\n              var endPtr = startPtr + maxBytesToWrite - 4;\n\n              for (var i = 0; i < str.length; ++i) {\n                var codeUnit = str.charCodeAt(i);\n\n                if (codeUnit >= 55296 && codeUnit <= 57343) {\n                  var trailSurrogate = str.charCodeAt(++i);\n                  codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;\n                }\n\n                HEAP32[outPtr >> 2] = codeUnit;\n                outPtr += 4;\n                if (outPtr + 4 > endPtr) break;\n              }\n\n              HEAP32[outPtr >> 2] = 0;\n              return outPtr - startPtr;\n            }\n\n            function lengthBytesUTF32(str) {\n              var len = 0;\n\n              for (var i = 0; i < str.length; ++i) {\n                var codeUnit = str.charCodeAt(i);\n                if (codeUnit >= 55296 && codeUnit <= 57343) ++i;\n                len += 4;\n              }\n\n              return len;\n            }\n\n            function alignUp(x, multiple) {\n              if (x % multiple > 0) {\n                x += multiple - x % multiple;\n              }\n\n              return x;\n            }\n\n            var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\n            function updateGlobalBufferAndViews(buf) {\n              buffer = buf;\n              Module[\"HEAP8\"] = HEAP8 = new Int8Array(buf);\n              Module[\"HEAP16\"] = HEAP16 = new Int16Array(buf);\n              Module[\"HEAP32\"] = HEAP32 = new Int32Array(buf);\n              Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buf);\n              Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buf);\n              Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buf);\n              Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buf);\n              Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buf);\n            }\n\n            var INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 16777216;\n            var wasmTable;\n            var __ATPRERUN__ = [];\n            var __ATINIT__ = [];\n            var __ATMAIN__ = [];\n            var __ATPOSTRUN__ = [];\n            var runtimeInitialized = false;\n\n            function preRun() {\n              if (Module[\"preRun\"]) {\n                if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [Module[\"preRun\"]];\n\n                while (Module[\"preRun\"].length) {\n                  addOnPreRun(Module[\"preRun\"].shift());\n                }\n              }\n\n              callRuntimeCallbacks(__ATPRERUN__);\n            }\n\n            function initRuntime() {\n              runtimeInitialized = true;\n              callRuntimeCallbacks(__ATINIT__);\n            }\n\n            function preMain() {\n              callRuntimeCallbacks(__ATMAIN__);\n            }\n\n            function postRun() {\n              if (Module[\"postRun\"]) {\n                if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [Module[\"postRun\"]];\n\n                while (Module[\"postRun\"].length) {\n                  addOnPostRun(Module[\"postRun\"].shift());\n                }\n              }\n\n              callRuntimeCallbacks(__ATPOSTRUN__);\n            }\n\n            function addOnPreRun(cb) {\n              __ATPRERUN__.unshift(cb);\n            }\n\n            function addOnInit(cb) {\n              __ATINIT__.unshift(cb);\n            }\n\n            function addOnPostRun(cb) {\n              __ATPOSTRUN__.unshift(cb);\n            }\n\n            var runDependencies = 0;\n            var runDependencyWatcher = null;\n            var dependenciesFulfilled = null;\n\n            function addRunDependency(id) {\n              runDependencies++;\n\n              if (Module[\"monitorRunDependencies\"]) {\n                Module[\"monitorRunDependencies\"](runDependencies);\n              }\n            }\n\n            function removeRunDependency(id) {\n              runDependencies--;\n\n              if (Module[\"monitorRunDependencies\"]) {\n                Module[\"monitorRunDependencies\"](runDependencies);\n              }\n\n              if (runDependencies == 0) {\n                if (runDependencyWatcher !== null) {\n                  clearInterval(runDependencyWatcher);\n                  runDependencyWatcher = null;\n                }\n\n                if (dependenciesFulfilled) {\n                  var callback = dependenciesFulfilled;\n                  dependenciesFulfilled = null;\n                  callback();\n                }\n              }\n            }\n\n            Module[\"preloadedImages\"] = {};\n            Module[\"preloadedAudios\"] = {};\n\n            function abort(what) {\n              if (Module[\"onAbort\"]) {\n                Module[\"onAbort\"](what);\n              }\n\n              what += \"\";\n              err(what);\n              ABORT = true;\n              EXITSTATUS = 1;\n              what = \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\";\n              var e = new WebAssembly.RuntimeError(what);\n              readyPromiseReject(e);\n              throw e;\n            }\n\n            function hasPrefix(str, prefix) {\n              return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;\n            }\n\n            var dataURIPrefix = \"data:application/octet-stream;base64,\";\n\n            function isDataURI(filename) {\n              return hasPrefix(filename, dataURIPrefix);\n            }\n\n            var fileURIPrefix = \"file://\";\n\n            function isFileURI(filename) {\n              return hasPrefix(filename, fileURIPrefix);\n            }\n\n            var wasmBinaryFile = \"data:application/octet-stream;base64,\";\n\n            if (!isDataURI(wasmBinaryFile)) {\n              wasmBinaryFile = locateFile(wasmBinaryFile);\n            }\n\n            function getBinary(file) {\n              try {\n                if (file == wasmBinaryFile && wasmBinary) {\n                  return new Uint8Array(wasmBinary);\n                }\n\n                var binary = tryParseAsDataURI(file);\n\n                if (binary) {\n                  return binary;\n                }\n\n                if (readBinary) {\n                  return readBinary(file);\n                } else {\n                  throw \"both async and sync fetching of the wasm failed\";\n                }\n              } catch (err) {\n                abort(err);\n              }\n            }\n\n            function getBinaryPromise() {\n              if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n                if (typeof fetch === \"function\" && !isFileURI(wasmBinaryFile)) {\n                  return fetch(wasmBinaryFile, {\n                    credentials: \"same-origin\"\n                  }).then(function (response) {\n                    if (!response[\"ok\"]) {\n                      throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n                    }\n\n                    return response[\"arrayBuffer\"]();\n                  }).catch(function () {\n                    return getBinary(wasmBinaryFile);\n                  });\n                } else {\n                  if (readAsync) {\n                    return new Promise(function (resolve, reject) {\n                      readAsync(wasmBinaryFile, function (response) {\n                        resolve(new Uint8Array(response));\n                      }, reject);\n                    });\n                  }\n                }\n              }\n\n              return Promise.resolve().then(function () {\n                return getBinary(wasmBinaryFile);\n              });\n            }\n\n            function createWasm() {\n              var info = {\n                \"a\": asmLibraryArg\n              };\n\n              function receiveInstance(instance, module) {\n                var exports = instance.exports;\n                Module[\"asm\"] = exports;\n                wasmMemory = Module[\"asm\"][\"M\"];\n                updateGlobalBufferAndViews(wasmMemory.buffer);\n                wasmTable = Module[\"asm\"][\"O\"];\n                addOnInit(Module[\"asm\"][\"N\"]);\n                removeRunDependency(\"wasm-instantiate\");\n              }\n\n              addRunDependency(\"wasm-instantiate\");\n\n              function receiveInstantiatedSource(output) {\n                receiveInstance(output[\"instance\"]);\n              }\n\n              function instantiateArrayBuffer(receiver) {\n                return getBinaryPromise().then(function (binary) {\n                  var result = WebAssembly.instantiate(binary, info);\n                  return result;\n                }).then(receiver, function (reason) {\n                  err(\"failed to asynchronously prepare wasm: \" + reason);\n                  abort(reason);\n                });\n              }\n\n              function instantiateAsync() {\n                if (!wasmBinary && typeof WebAssembly.instantiateStreaming === \"function\" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === \"function\") {\n                  return fetch(wasmBinaryFile, {\n                    credentials: \"same-origin\"\n                  }).then(function (response) {\n                    var result = WebAssembly.instantiateStreaming(response, info);\n                    return result.then(receiveInstantiatedSource, function (reason) {\n                      err(\"wasm streaming compile failed: \" + reason);\n                      err(\"falling back to ArrayBuffer instantiation\");\n                      return instantiateArrayBuffer(receiveInstantiatedSource);\n                    });\n                  });\n                } else {\n                  return instantiateArrayBuffer(receiveInstantiatedSource);\n                }\n              }\n\n              if (Module[\"instantiateWasm\"]) {\n                try {\n                  var exports = Module[\"instantiateWasm\"](info, receiveInstance);\n                  return exports;\n                } catch (e) {\n                  err(\"Module.instantiateWasm callback failed with error: \" + e);\n                  return false;\n                }\n              }\n\n              instantiateAsync().catch(readyPromiseReject);\n              return {};\n            }\n\n            function callRuntimeCallbacks(callbacks) {\n              while (callbacks.length > 0) {\n                var callback = callbacks.shift();\n\n                if (typeof callback == \"function\") {\n                  callback(Module);\n                  continue;\n                }\n\n                var func = callback.func;\n\n                if (typeof func === \"number\") {\n                  if (callback.arg === undefined) {\n                    wasmTable.get(func)();\n                  } else {\n                    wasmTable.get(func)(callback.arg);\n                  }\n                } else {\n                  func(callback.arg === undefined ? null : callback.arg);\n                }\n              }\n            }\n\n            var char_0 = 48;\n            var char_9 = 57;\n\n            function makeLegalFunctionName(name) {\n              if (undefined === name) {\n                return \"_unknown\";\n              }\n\n              name = name.replace(/[^a-zA-Z0-9_]/g, \"$\");\n              var f = name.charCodeAt(0);\n\n              if (f >= char_0 && f <= char_9) {\n                return \"_\" + name;\n              } else {\n                return name;\n              }\n            }\n\n            function createNamedFunction(name, body) {\n              name = makeLegalFunctionName(name);\n              return new Function(\"body\", \"return function \" + name + \"() {\\n\" + '    \"use strict\";' + \"    return body.apply(this, arguments);\\n\" + \"};\\n\")(body);\n            }\n\n            var emval_free_list = [];\n            var emval_handle_array = [{}, {\n              value: undefined\n            }, {\n              value: null\n            }, {\n              value: true\n            }, {\n              value: false\n            }];\n\n            function count_emval_handles() {\n              var count = 0;\n\n              for (var i = 5; i < emval_handle_array.length; ++i) {\n                if (emval_handle_array[i] !== undefined) {\n                  ++count;\n                }\n              }\n\n              return count;\n            }\n\n            function get_first_emval() {\n              for (var i = 5; i < emval_handle_array.length; ++i) {\n                if (emval_handle_array[i] !== undefined) {\n                  return emval_handle_array[i];\n                }\n              }\n\n              return null;\n            }\n\n            function init_emval() {\n              Module[\"count_emval_handles\"] = count_emval_handles;\n              Module[\"get_first_emval\"] = get_first_emval;\n            }\n\n            function __emval_register(value) {\n              switch (value) {\n                case undefined:\n                  {\n                    return 1;\n                  }\n\n                case null:\n                  {\n                    return 2;\n                  }\n\n                case true:\n                  {\n                    return 3;\n                  }\n\n                case false:\n                  {\n                    return 4;\n                  }\n\n                default:\n                  {\n                    var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;\n                    emval_handle_array[handle] = {\n                      refcount: 1,\n                      value: value\n                    };\n                    return handle;\n                  }\n              }\n            }\n\n            function extendError(baseErrorType, errorName) {\n              var errorClass = createNamedFunction(errorName, function (message) {\n                this.name = errorName;\n                this.message = message;\n                var stack = new Error(message).stack;\n\n                if (stack !== undefined) {\n                  this.stack = this.toString() + \"\\n\" + stack.replace(/^Error(:[^\\n]*)?\\n/, \"\");\n                }\n              });\n              errorClass.prototype = Object.create(baseErrorType.prototype);\n              errorClass.prototype.constructor = errorClass;\n\n              errorClass.prototype.toString = function () {\n                if (this.message === undefined) {\n                  return this.name;\n                } else {\n                  return this.name + \": \" + this.message;\n                }\n              };\n\n              return errorClass;\n            }\n\n            var PureVirtualError = undefined;\n\n            function embind_init_charCodes() {\n              var codes = new Array(256);\n\n              for (var i = 0; i < 256; ++i) {\n                codes[i] = String.fromCharCode(i);\n              }\n\n              embind_charCodes = codes;\n            }\n\n            var embind_charCodes = undefined;\n\n            function readLatin1String(ptr) {\n              var ret = \"\";\n              var c = ptr;\n\n              while (HEAPU8[c]) {\n                ret += embind_charCodes[HEAPU8[c++]];\n              }\n\n              return ret;\n            }\n\n            function getInheritedInstanceCount() {\n              return Object.keys(registeredInstances).length;\n            }\n\n            function getLiveInheritedInstances() {\n              var rv = [];\n\n              for (var k in registeredInstances) {\n                if (registeredInstances.hasOwnProperty(k)) {\n                  rv.push(registeredInstances[k]);\n                }\n              }\n\n              return rv;\n            }\n\n            var deletionQueue = [];\n\n            function flushPendingDeletes() {\n              while (deletionQueue.length) {\n                var obj = deletionQueue.pop();\n                obj.$$.deleteScheduled = false;\n                obj[\"delete\"]();\n              }\n            }\n\n            var delayFunction = undefined;\n\n            function setDelayFunction(fn) {\n              delayFunction = fn;\n\n              if (deletionQueue.length && delayFunction) {\n                delayFunction(flushPendingDeletes);\n              }\n            }\n\n            function init_embind() {\n              Module[\"getInheritedInstanceCount\"] = getInheritedInstanceCount;\n              Module[\"getLiveInheritedInstances\"] = getLiveInheritedInstances;\n              Module[\"flushPendingDeletes\"] = flushPendingDeletes;\n              Module[\"setDelayFunction\"] = setDelayFunction;\n            }\n\n            var registeredInstances = {};\n            var BindingError = undefined;\n\n            function throwBindingError(message) {\n              throw new BindingError(message);\n            }\n\n            function getBasestPointer(class_, ptr) {\n              if (ptr === undefined) {\n                throwBindingError(\"ptr should not be undefined\");\n              }\n\n              while (class_.baseClass) {\n                ptr = class_.upcast(ptr);\n                class_ = class_.baseClass;\n              }\n\n              return ptr;\n            }\n\n            function registerInheritedInstance(class_, ptr, instance) {\n              ptr = getBasestPointer(class_, ptr);\n\n              if (registeredInstances.hasOwnProperty(ptr)) {\n                throwBindingError(\"Tried to register registered instance: \" + ptr);\n              } else {\n                registeredInstances[ptr] = instance;\n              }\n            }\n\n            function requireHandle(handle) {\n              if (!handle) {\n                throwBindingError(\"Cannot use deleted val. handle = \" + handle);\n              }\n\n              return emval_handle_array[handle].value;\n            }\n\n            var registeredTypes = {};\n\n            function getTypeName(type) {\n              var ptr = ___getTypeName(type);\n\n              var rv = readLatin1String(ptr);\n\n              _free(ptr);\n\n              return rv;\n            }\n\n            function requireRegisteredType(rawType, humanName) {\n              var impl = registeredTypes[rawType];\n\n              if (undefined === impl) {\n                throwBindingError(humanName + \" has unknown type \" + getTypeName(rawType));\n              }\n\n              return impl;\n            }\n\n            function unregisterInheritedInstance(class_, ptr) {\n              ptr = getBasestPointer(class_, ptr);\n\n              if (registeredInstances.hasOwnProperty(ptr)) {\n                delete registeredInstances[ptr];\n              } else {\n                throwBindingError(\"Tried to unregister unregistered instance: \" + ptr);\n              }\n            }\n\n            function detachFinalizer(handle) {}\n\n            var finalizationGroup = false;\n\n            function runDestructor($$) {\n              if ($$.smartPtr) {\n                $$.smartPtrType.rawDestructor($$.smartPtr);\n              } else {\n                $$.ptrType.registeredClass.rawDestructor($$.ptr);\n              }\n            }\n\n            function releaseClassHandle($$) {\n              $$.count.value -= 1;\n              var toDelete = 0 === $$.count.value;\n\n              if (toDelete) {\n                runDestructor($$);\n              }\n            }\n\n            function attachFinalizer(handle) {\n              if (\"undefined\" === typeof FinalizationGroup) {\n                attachFinalizer = function (handle) {\n                  return handle;\n                };\n\n                return handle;\n              }\n\n              finalizationGroup = new FinalizationGroup(function (iter) {\n                for (var result = iter.next(); !result.done; result = iter.next()) {\n                  var $$ = result.value;\n\n                  if (!$$.ptr) {\n                    console.warn(\"object already deleted: \" + $$.ptr);\n                  } else {\n                    releaseClassHandle($$);\n                  }\n                }\n              });\n\n              attachFinalizer = function (handle) {\n                finalizationGroup.register(handle, handle.$$, handle.$$);\n                return handle;\n              };\n\n              detachFinalizer = function (handle) {\n                finalizationGroup.unregister(handle.$$);\n              };\n\n              return attachFinalizer(handle);\n            }\n\n            function __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {\n              constructorName = readLatin1String(constructorName);\n              wrapperType = requireRegisteredType(wrapperType, \"wrapper\");\n              properties = requireHandle(properties);\n              var arraySlice = [].slice;\n              var registeredClass = wrapperType.registeredClass;\n              var wrapperPrototype = registeredClass.instancePrototype;\n              var baseClass = registeredClass.baseClass;\n              var baseClassPrototype = baseClass.instancePrototype;\n              var baseConstructor = registeredClass.baseClass.constructor;\n              var ctor = createNamedFunction(constructorName, function () {\n                registeredClass.baseClass.pureVirtualFunctions.forEach(function (name) {\n                  if (this[name] === baseClassPrototype[name]) {\n                    throw new PureVirtualError(\"Pure virtual function \" + name + \" must be implemented in JavaScript\");\n                  }\n                }.bind(this));\n                Object.defineProperty(this, \"__parent\", {\n                  value: wrapperPrototype\n                });\n                this[\"__construct\"].apply(this, arraySlice.call(arguments));\n              });\n\n              wrapperPrototype[\"__construct\"] = function __construct() {\n                if (this === wrapperPrototype) {\n                  throwBindingError(\"Pass correct 'this' to __construct\");\n                }\n\n                var inner = baseConstructor[\"implement\"].apply(undefined, [this].concat(arraySlice.call(arguments)));\n                detachFinalizer(inner);\n                var $$ = inner.$$;\n                inner[\"notifyOnDestruction\"]();\n                $$.preservePointerOnDelete = true;\n                Object.defineProperties(this, {\n                  $$: {\n                    value: $$\n                  }\n                });\n                attachFinalizer(this);\n                registerInheritedInstance(registeredClass, $$.ptr, this);\n              };\n\n              wrapperPrototype[\"__destruct\"] = function __destruct() {\n                if (this === wrapperPrototype) {\n                  throwBindingError(\"Pass correct 'this' to __destruct\");\n                }\n\n                detachFinalizer(this);\n                unregisterInheritedInstance(registeredClass, this.$$.ptr);\n              };\n\n              ctor.prototype = Object.create(wrapperPrototype);\n\n              for (var p in properties) {\n                ctor.prototype[p] = properties[p];\n              }\n\n              return __emval_register(ctor);\n            }\n\n            var structRegistrations = {};\n\n            function runDestructors(destructors) {\n              while (destructors.length) {\n                var ptr = destructors.pop();\n                var del = destructors.pop();\n                del(ptr);\n              }\n            }\n\n            function simpleReadValueFromPointer(pointer) {\n              return this[\"fromWireType\"](HEAPU32[pointer >> 2]);\n            }\n\n            var awaitingDependencies = {};\n            var typeDependencies = {};\n            var InternalError = undefined;\n\n            function throwInternalError(message) {\n              throw new InternalError(message);\n            }\n\n            function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {\n              myTypes.forEach(function (type) {\n                typeDependencies[type] = dependentTypes;\n              });\n\n              function onComplete(typeConverters) {\n                var myTypeConverters = getTypeConverters(typeConverters);\n\n                if (myTypeConverters.length !== myTypes.length) {\n                  throwInternalError(\"Mismatched type converter count\");\n                }\n\n                for (var i = 0; i < myTypes.length; ++i) {\n                  registerType(myTypes[i], myTypeConverters[i]);\n                }\n              }\n\n              var typeConverters = new Array(dependentTypes.length);\n              var unregisteredTypes = [];\n              var registered = 0;\n              dependentTypes.forEach(function (dt, i) {\n                if (registeredTypes.hasOwnProperty(dt)) {\n                  typeConverters[i] = registeredTypes[dt];\n                } else {\n                  unregisteredTypes.push(dt);\n\n                  if (!awaitingDependencies.hasOwnProperty(dt)) {\n                    awaitingDependencies[dt] = [];\n                  }\n\n                  awaitingDependencies[dt].push(function () {\n                    typeConverters[i] = registeredTypes[dt];\n                    ++registered;\n\n                    if (registered === unregisteredTypes.length) {\n                      onComplete(typeConverters);\n                    }\n                  });\n                }\n              });\n\n              if (0 === unregisteredTypes.length) {\n                onComplete(typeConverters);\n              }\n            }\n\n            function __embind_finalize_value_object(structType) {\n              var reg = structRegistrations[structType];\n              delete structRegistrations[structType];\n              var rawConstructor = reg.rawConstructor;\n              var rawDestructor = reg.rawDestructor;\n              var fieldRecords = reg.fields;\n              var fieldTypes = fieldRecords.map(function (field) {\n                return field.getterReturnType;\n              }).concat(fieldRecords.map(function (field) {\n                return field.setterArgumentType;\n              }));\n              whenDependentTypesAreResolved([structType], fieldTypes, function (fieldTypes) {\n                var fields = {};\n                fieldRecords.forEach(function (field, i) {\n                  var fieldName = field.fieldName;\n                  var getterReturnType = fieldTypes[i];\n                  var getter = field.getter;\n                  var getterContext = field.getterContext;\n                  var setterArgumentType = fieldTypes[i + fieldRecords.length];\n                  var setter = field.setter;\n                  var setterContext = field.setterContext;\n                  fields[fieldName] = {\n                    read: function (ptr) {\n                      return getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n                    },\n                    write: function (ptr, o) {\n                      var destructors = [];\n                      setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, o));\n                      runDestructors(destructors);\n                    }\n                  };\n                });\n                return [{\n                  name: reg.name,\n                  \"fromWireType\": function (ptr) {\n                    var rv = {};\n\n                    for (var i in fields) {\n                      rv[i] = fields[i].read(ptr);\n                    }\n\n                    rawDestructor(ptr);\n                    return rv;\n                  },\n                  \"toWireType\": function (destructors, o) {\n                    for (var fieldName in fields) {\n                      if (!(fieldName in o)) {\n                        throw new TypeError('Missing field:  \"' + fieldName + '\"');\n                      }\n                    }\n\n                    var ptr = rawConstructor();\n\n                    for (fieldName in fields) {\n                      fields[fieldName].write(ptr, o[fieldName]);\n                    }\n\n                    if (destructors !== null) {\n                      destructors.push(rawDestructor, ptr);\n                    }\n\n                    return ptr;\n                  },\n                  \"argPackAdvance\": 8,\n                  \"readValueFromPointer\": simpleReadValueFromPointer,\n                  destructorFunction: rawDestructor\n                }];\n              });\n            }\n\n            function getShiftFromSize(size) {\n              switch (size) {\n                case 1:\n                  return 0;\n\n                case 2:\n                  return 1;\n\n                case 4:\n                  return 2;\n\n                case 8:\n                  return 3;\n\n                default:\n                  throw new TypeError(\"Unknown type size: \" + size);\n              }\n            }\n\n            function registerType(rawType, registeredInstance, options) {\n              options = options || {};\n\n              if (!(\"argPackAdvance\" in registeredInstance)) {\n                throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n              }\n\n              var name = registeredInstance.name;\n\n              if (!rawType) {\n                throwBindingError('type \"' + name + '\" must have a positive integer typeid pointer');\n              }\n\n              if (registeredTypes.hasOwnProperty(rawType)) {\n                if (options.ignoreDuplicateRegistrations) {\n                  return;\n                } else {\n                  throwBindingError(\"Cannot register type '\" + name + \"' twice\");\n                }\n              }\n\n              registeredTypes[rawType] = registeredInstance;\n              delete typeDependencies[rawType];\n\n              if (awaitingDependencies.hasOwnProperty(rawType)) {\n                var callbacks = awaitingDependencies[rawType];\n                delete awaitingDependencies[rawType];\n                callbacks.forEach(function (cb) {\n                  cb();\n                });\n              }\n            }\n\n            function __embind_register_bool(rawType, name, size, trueValue, falseValue) {\n              var shift = getShiftFromSize(size);\n              name = readLatin1String(name);\n              registerType(rawType, {\n                name: name,\n                \"fromWireType\": function (wt) {\n                  return !!wt;\n                },\n                \"toWireType\": function (destructors, o) {\n                  return o ? trueValue : falseValue;\n                },\n                \"argPackAdvance\": 8,\n                \"readValueFromPointer\": function (pointer) {\n                  var heap;\n\n                  if (size === 1) {\n                    heap = HEAP8;\n                  } else if (size === 2) {\n                    heap = HEAP16;\n                  } else if (size === 4) {\n                    heap = HEAP32;\n                  } else {\n                    throw new TypeError(\"Unknown boolean type size: \" + name);\n                  }\n\n                  return this[\"fromWireType\"](heap[pointer >> shift]);\n                },\n                destructorFunction: null\n              });\n            }\n\n            function ClassHandle_isAliasOf(other) {\n              if (!(this instanceof ClassHandle)) {\n                return false;\n              }\n\n              if (!(other instanceof ClassHandle)) {\n                return false;\n              }\n\n              var leftClass = this.$$.ptrType.registeredClass;\n              var left = this.$$.ptr;\n              var rightClass = other.$$.ptrType.registeredClass;\n              var right = other.$$.ptr;\n\n              while (leftClass.baseClass) {\n                left = leftClass.upcast(left);\n                leftClass = leftClass.baseClass;\n              }\n\n              while (rightClass.baseClass) {\n                right = rightClass.upcast(right);\n                rightClass = rightClass.baseClass;\n              }\n\n              return leftClass === rightClass && left === right;\n            }\n\n            function shallowCopyInternalPointer(o) {\n              return {\n                count: o.count,\n                deleteScheduled: o.deleteScheduled,\n                preservePointerOnDelete: o.preservePointerOnDelete,\n                ptr: o.ptr,\n                ptrType: o.ptrType,\n                smartPtr: o.smartPtr,\n                smartPtrType: o.smartPtrType\n              };\n            }\n\n            function throwInstanceAlreadyDeleted(obj) {\n              function getInstanceTypeName(handle) {\n                return handle.$$.ptrType.registeredClass.name;\n              }\n\n              throwBindingError(getInstanceTypeName(obj) + \" instance already deleted\");\n            }\n\n            function ClassHandle_clone() {\n              if (!this.$$.ptr) {\n                throwInstanceAlreadyDeleted(this);\n              }\n\n              if (this.$$.preservePointerOnDelete) {\n                this.$$.count.value += 1;\n                return this;\n              } else {\n                var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {\n                  $$: {\n                    value: shallowCopyInternalPointer(this.$$)\n                  }\n                }));\n                clone.$$.count.value += 1;\n                clone.$$.deleteScheduled = false;\n                return clone;\n              }\n            }\n\n            function ClassHandle_delete() {\n              if (!this.$$.ptr) {\n                throwInstanceAlreadyDeleted(this);\n              }\n\n              if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n                throwBindingError(\"Object already scheduled for deletion\");\n              }\n\n              detachFinalizer(this);\n              releaseClassHandle(this.$$);\n\n              if (!this.$$.preservePointerOnDelete) {\n                this.$$.smartPtr = undefined;\n                this.$$.ptr = undefined;\n              }\n            }\n\n            function ClassHandle_isDeleted() {\n              return !this.$$.ptr;\n            }\n\n            function ClassHandle_deleteLater() {\n              if (!this.$$.ptr) {\n                throwInstanceAlreadyDeleted(this);\n              }\n\n              if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n                throwBindingError(\"Object already scheduled for deletion\");\n              }\n\n              deletionQueue.push(this);\n\n              if (deletionQueue.length === 1 && delayFunction) {\n                delayFunction(flushPendingDeletes);\n              }\n\n              this.$$.deleteScheduled = true;\n              return this;\n            }\n\n            function init_ClassHandle() {\n              ClassHandle.prototype[\"isAliasOf\"] = ClassHandle_isAliasOf;\n              ClassHandle.prototype[\"clone\"] = ClassHandle_clone;\n              ClassHandle.prototype[\"delete\"] = ClassHandle_delete;\n              ClassHandle.prototype[\"isDeleted\"] = ClassHandle_isDeleted;\n              ClassHandle.prototype[\"deleteLater\"] = ClassHandle_deleteLater;\n            }\n\n            function ClassHandle() {}\n\n            var registeredPointers = {};\n\n            function ensureOverloadTable(proto, methodName, humanName) {\n              if (undefined === proto[methodName].overloadTable) {\n                var prevFunc = proto[methodName];\n\n                proto[methodName] = function () {\n                  if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {\n                    throwBindingError(\"Function '\" + humanName + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + proto[methodName].overloadTable + \")!\");\n                  }\n\n                  return proto[methodName].overloadTable[arguments.length].apply(this, arguments);\n                };\n\n                proto[methodName].overloadTable = [];\n                proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;\n              }\n            }\n\n            function exposePublicSymbol(name, value, numArguments) {\n              if (Module.hasOwnProperty(name)) {\n                if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {\n                  throwBindingError(\"Cannot register public name '\" + name + \"' twice\");\n                }\n\n                ensureOverloadTable(Module, name, name);\n\n                if (Module.hasOwnProperty(numArguments)) {\n                  throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\" + numArguments + \")!\");\n                }\n\n                Module[name].overloadTable[numArguments] = value;\n              } else {\n                Module[name] = value;\n\n                if (undefined !== numArguments) {\n                  Module[name].numArguments = numArguments;\n                }\n              }\n            }\n\n            function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {\n              this.name = name;\n              this.constructor = constructor;\n              this.instancePrototype = instancePrototype;\n              this.rawDestructor = rawDestructor;\n              this.baseClass = baseClass;\n              this.getActualType = getActualType;\n              this.upcast = upcast;\n              this.downcast = downcast;\n              this.pureVirtualFunctions = [];\n            }\n\n            function upcastPointer(ptr, ptrClass, desiredClass) {\n              while (ptrClass !== desiredClass) {\n                if (!ptrClass.upcast) {\n                  throwBindingError(\"Expected null or instance of \" + desiredClass.name + \", got an instance of \" + ptrClass.name);\n                }\n\n                ptr = ptrClass.upcast(ptr);\n                ptrClass = ptrClass.baseClass;\n              }\n\n              return ptr;\n            }\n\n            function constNoSmartPtrRawPointerToWireType(destructors, handle) {\n              if (handle === null) {\n                if (this.isReference) {\n                  throwBindingError(\"null is not a valid \" + this.name);\n                }\n\n                return 0;\n              }\n\n              if (!handle.$$) {\n                throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n              }\n\n              if (!handle.$$.ptr) {\n                throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n              }\n\n              var handleClass = handle.$$.ptrType.registeredClass;\n              var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n              return ptr;\n            }\n\n            function genericPointerToWireType(destructors, handle) {\n              var ptr;\n\n              if (handle === null) {\n                if (this.isReference) {\n                  throwBindingError(\"null is not a valid \" + this.name);\n                }\n\n                if (this.isSmartPointer) {\n                  ptr = this.rawConstructor();\n\n                  if (destructors !== null) {\n                    destructors.push(this.rawDestructor, ptr);\n                  }\n\n                  return ptr;\n                } else {\n                  return 0;\n                }\n              }\n\n              if (!handle.$$) {\n                throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n              }\n\n              if (!handle.$$.ptr) {\n                throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n              }\n\n              if (!this.isConst && handle.$$.ptrType.isConst) {\n                throwBindingError(\"Cannot convert argument of type \" + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + \" to parameter type \" + this.name);\n              }\n\n              var handleClass = handle.$$.ptrType.registeredClass;\n              ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n\n              if (this.isSmartPointer) {\n                if (undefined === handle.$$.smartPtr) {\n                  throwBindingError(\"Passing raw pointer to smart pointer is illegal\");\n                }\n\n                switch (this.sharingPolicy) {\n                  case 0:\n                    if (handle.$$.smartPtrType === this) {\n                      ptr = handle.$$.smartPtr;\n                    } else {\n                      throwBindingError(\"Cannot convert argument of type \" + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + \" to parameter type \" + this.name);\n                    }\n\n                    break;\n\n                  case 1:\n                    ptr = handle.$$.smartPtr;\n                    break;\n\n                  case 2:\n                    if (handle.$$.smartPtrType === this) {\n                      ptr = handle.$$.smartPtr;\n                    } else {\n                      var clonedHandle = handle[\"clone\"]();\n                      ptr = this.rawShare(ptr, __emval_register(function () {\n                        clonedHandle[\"delete\"]();\n                      }));\n\n                      if (destructors !== null) {\n                        destructors.push(this.rawDestructor, ptr);\n                      }\n                    }\n\n                    break;\n\n                  default:\n                    throwBindingError(\"Unsupporting sharing policy\");\n                }\n              }\n\n              return ptr;\n            }\n\n            function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {\n              if (handle === null) {\n                if (this.isReference) {\n                  throwBindingError(\"null is not a valid \" + this.name);\n                }\n\n                return 0;\n              }\n\n              if (!handle.$$) {\n                throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n              }\n\n              if (!handle.$$.ptr) {\n                throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n              }\n\n              if (handle.$$.ptrType.isConst) {\n                throwBindingError(\"Cannot convert argument of type \" + handle.$$.ptrType.name + \" to parameter type \" + this.name);\n              }\n\n              var handleClass = handle.$$.ptrType.registeredClass;\n              var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n              return ptr;\n            }\n\n            function RegisteredPointer_getPointee(ptr) {\n              if (this.rawGetPointee) {\n                ptr = this.rawGetPointee(ptr);\n              }\n\n              return ptr;\n            }\n\n            function RegisteredPointer_destructor(ptr) {\n              if (this.rawDestructor) {\n                this.rawDestructor(ptr);\n              }\n            }\n\n            function RegisteredPointer_deleteObject(handle) {\n              if (handle !== null) {\n                handle[\"delete\"]();\n              }\n            }\n\n            function downcastPointer(ptr, ptrClass, desiredClass) {\n              if (ptrClass === desiredClass) {\n                return ptr;\n              }\n\n              if (undefined === desiredClass.baseClass) {\n                return null;\n              }\n\n              var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);\n\n              if (rv === null) {\n                return null;\n              }\n\n              return desiredClass.downcast(rv);\n            }\n\n            function getInheritedInstance(class_, ptr) {\n              ptr = getBasestPointer(class_, ptr);\n              return registeredInstances[ptr];\n            }\n\n            function makeClassHandle(prototype, record) {\n              if (!record.ptrType || !record.ptr) {\n                throwInternalError(\"makeClassHandle requires ptr and ptrType\");\n              }\n\n              var hasSmartPtrType = !!record.smartPtrType;\n              var hasSmartPtr = !!record.smartPtr;\n\n              if (hasSmartPtrType !== hasSmartPtr) {\n                throwInternalError(\"Both smartPtrType and smartPtr must be specified\");\n              }\n\n              record.count = {\n                value: 1\n              };\n              return attachFinalizer(Object.create(prototype, {\n                $$: {\n                  value: record\n                }\n              }));\n            }\n\n            function RegisteredPointer_fromWireType(ptr) {\n              var rawPointer = this.getPointee(ptr);\n\n              if (!rawPointer) {\n                this.destructor(ptr);\n                return null;\n              }\n\n              var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);\n\n              if (undefined !== registeredInstance) {\n                if (0 === registeredInstance.$$.count.value) {\n                  registeredInstance.$$.ptr = rawPointer;\n                  registeredInstance.$$.smartPtr = ptr;\n                  return registeredInstance[\"clone\"]();\n                } else {\n                  var rv = registeredInstance[\"clone\"]();\n                  this.destructor(ptr);\n                  return rv;\n                }\n              }\n\n              function makeDefaultHandle() {\n                if (this.isSmartPointer) {\n                  return makeClassHandle(this.registeredClass.instancePrototype, {\n                    ptrType: this.pointeeType,\n                    ptr: rawPointer,\n                    smartPtrType: this,\n                    smartPtr: ptr\n                  });\n                } else {\n                  return makeClassHandle(this.registeredClass.instancePrototype, {\n                    ptrType: this,\n                    ptr: ptr\n                  });\n                }\n              }\n\n              var actualType = this.registeredClass.getActualType(rawPointer);\n              var registeredPointerRecord = registeredPointers[actualType];\n\n              if (!registeredPointerRecord) {\n                return makeDefaultHandle.call(this);\n              }\n\n              var toType;\n\n              if (this.isConst) {\n                toType = registeredPointerRecord.constPointerType;\n              } else {\n                toType = registeredPointerRecord.pointerType;\n              }\n\n              var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);\n\n              if (dp === null) {\n                return makeDefaultHandle.call(this);\n              }\n\n              if (this.isSmartPointer) {\n                return makeClassHandle(toType.registeredClass.instancePrototype, {\n                  ptrType: toType,\n                  ptr: dp,\n                  smartPtrType: this,\n                  smartPtr: ptr\n                });\n              } else {\n                return makeClassHandle(toType.registeredClass.instancePrototype, {\n                  ptrType: toType,\n                  ptr: dp\n                });\n              }\n            }\n\n            function init_RegisteredPointer() {\n              RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;\n              RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;\n              RegisteredPointer.prototype[\"argPackAdvance\"] = 8;\n              RegisteredPointer.prototype[\"readValueFromPointer\"] = simpleReadValueFromPointer;\n              RegisteredPointer.prototype[\"deleteObject\"] = RegisteredPointer_deleteObject;\n              RegisteredPointer.prototype[\"fromWireType\"] = RegisteredPointer_fromWireType;\n            }\n\n            function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {\n              this.name = name;\n              this.registeredClass = registeredClass;\n              this.isReference = isReference;\n              this.isConst = isConst;\n              this.isSmartPointer = isSmartPointer;\n              this.pointeeType = pointeeType;\n              this.sharingPolicy = sharingPolicy;\n              this.rawGetPointee = rawGetPointee;\n              this.rawConstructor = rawConstructor;\n              this.rawShare = rawShare;\n              this.rawDestructor = rawDestructor;\n\n              if (!isSmartPointer && registeredClass.baseClass === undefined) {\n                if (isConst) {\n                  this[\"toWireType\"] = constNoSmartPtrRawPointerToWireType;\n                  this.destructorFunction = null;\n                } else {\n                  this[\"toWireType\"] = nonConstNoSmartPtrRawPointerToWireType;\n                  this.destructorFunction = null;\n                }\n              } else {\n                this[\"toWireType\"] = genericPointerToWireType;\n              }\n            }\n\n            function replacePublicSymbol(name, value, numArguments) {\n              if (!Module.hasOwnProperty(name)) {\n                throwInternalError(\"Replacing nonexistant public symbol\");\n              }\n\n              if (undefined !== Module[name].overloadTable && undefined !== numArguments) {\n                Module[name].overloadTable[numArguments] = value;\n              } else {\n                Module[name] = value;\n                Module[name].argCount = numArguments;\n              }\n            }\n\n            function dynCallLegacy(sig, ptr, args) {\n              var f = Module[\"dynCall_\" + sig];\n              return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);\n            }\n\n            function dynCall(sig, ptr, args) {\n              if (sig.indexOf(\"j\") != -1) {\n                return dynCallLegacy(sig, ptr, args);\n              }\n\n              return wasmTable.get(ptr).apply(null, args);\n            }\n\n            function getDynCaller(sig, ptr) {\n              var argCache = [];\n              return function () {\n                argCache.length = arguments.length;\n\n                for (var i = 0; i < arguments.length; i++) {\n                  argCache[i] = arguments[i];\n                }\n\n                return dynCall(sig, ptr, argCache);\n              };\n            }\n\n            function embind__requireFunction(signature, rawFunction) {\n              signature = readLatin1String(signature);\n\n              function makeDynCaller() {\n                if (signature.indexOf(\"j\") != -1) {\n                  return getDynCaller(signature, rawFunction);\n                }\n\n                return wasmTable.get(rawFunction);\n              }\n\n              var fp = makeDynCaller();\n\n              if (typeof fp !== \"function\") {\n                throwBindingError(\"unknown function pointer with signature \" + signature + \": \" + rawFunction);\n              }\n\n              return fp;\n            }\n\n            var UnboundTypeError = undefined;\n\n            function throwUnboundTypeError(message, types) {\n              var unboundTypes = [];\n              var seen = {};\n\n              function visit(type) {\n                if (seen[type]) {\n                  return;\n                }\n\n                if (registeredTypes[type]) {\n                  return;\n                }\n\n                if (typeDependencies[type]) {\n                  typeDependencies[type].forEach(visit);\n                  return;\n                }\n\n                unboundTypes.push(type);\n                seen[type] = true;\n              }\n\n              types.forEach(visit);\n              throw new UnboundTypeError(message + \": \" + unboundTypes.map(getTypeName).join([\", \"]));\n            }\n\n            function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {\n              name = readLatin1String(name);\n              getActualType = embind__requireFunction(getActualTypeSignature, getActualType);\n\n              if (upcast) {\n                upcast = embind__requireFunction(upcastSignature, upcast);\n              }\n\n              if (downcast) {\n                downcast = embind__requireFunction(downcastSignature, downcast);\n              }\n\n              rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);\n              var legalFunctionName = makeLegalFunctionName(name);\n              exposePublicSymbol(legalFunctionName, function () {\n                throwUnboundTypeError(\"Cannot construct \" + name + \" due to unbound types\", [baseClassRawType]);\n              });\n              whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function (base) {\n                base = base[0];\n                var baseClass;\n                var basePrototype;\n\n                if (baseClassRawType) {\n                  baseClass = base.registeredClass;\n                  basePrototype = baseClass.instancePrototype;\n                } else {\n                  basePrototype = ClassHandle.prototype;\n                }\n\n                var constructor = createNamedFunction(legalFunctionName, function () {\n                  if (Object.getPrototypeOf(this) !== instancePrototype) {\n                    throw new BindingError(\"Use 'new' to construct \" + name);\n                  }\n\n                  if (undefined === registeredClass.constructor_body) {\n                    throw new BindingError(name + \" has no accessible constructor\");\n                  }\n\n                  var body = registeredClass.constructor_body[arguments.length];\n\n                  if (undefined === body) {\n                    throw new BindingError(\"Tried to invoke ctor of \" + name + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(registeredClass.constructor_body).toString() + \") parameters instead!\");\n                  }\n\n                  return body.apply(this, arguments);\n                });\n                var instancePrototype = Object.create(basePrototype, {\n                  constructor: {\n                    value: constructor\n                  }\n                });\n                constructor.prototype = instancePrototype;\n                var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);\n                var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);\n                var pointerConverter = new RegisteredPointer(name + \"*\", registeredClass, false, false, false);\n                var constPointerConverter = new RegisteredPointer(name + \" const*\", registeredClass, false, true, false);\n                registeredPointers[rawType] = {\n                  pointerType: pointerConverter,\n                  constPointerType: constPointerConverter\n                };\n                replacePublicSymbol(legalFunctionName, constructor);\n                return [referenceConverter, pointerConverter, constPointerConverter];\n              });\n            }\n\n            function new_(constructor, argumentList) {\n              if (!(constructor instanceof Function)) {\n                throw new TypeError(\"new_ called with constructor type \" + typeof constructor + \" which is not a function\");\n              }\n\n              var dummy = createNamedFunction(constructor.name || \"unknownFunctionName\", function () {});\n              dummy.prototype = constructor.prototype;\n              var obj = new dummy();\n              var r = constructor.apply(obj, argumentList);\n              return r instanceof Object ? r : obj;\n            }\n\n            function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {\n              var argCount = argTypes.length;\n\n              if (argCount < 2) {\n                throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n              }\n\n              var isClassMethodFunc = argTypes[1] !== null && classType !== null;\n              var needsDestructorStack = false;\n\n              for (var i = 1; i < argTypes.length; ++i) {\n                if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {\n                  needsDestructorStack = true;\n                  break;\n                }\n              }\n\n              var returns = argTypes[0].name !== \"void\";\n              var argsList = \"\";\n              var argsListWired = \"\";\n\n              for (var i = 0; i < argCount - 2; ++i) {\n                argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n                argsListWired += (i !== 0 ? \", \" : \"\") + \"arg\" + i + \"Wired\";\n              }\n\n              var invokerFnBody = \"return function \" + makeLegalFunctionName(humanName) + \"(\" + argsList + \") {\\n\" + \"if (arguments.length !== \" + (argCount - 2) + \") {\\n\" + \"throwBindingError('function \" + humanName + \" called with ' + arguments.length + ' arguments, expected \" + (argCount - 2) + \" args!');\\n\" + \"}\\n\";\n\n              if (needsDestructorStack) {\n                invokerFnBody += \"var destructors = [];\\n\";\n              }\n\n              var dtorStack = needsDestructorStack ? \"destructors\" : \"null\";\n              var args1 = [\"throwBindingError\", \"invoker\", \"fn\", \"runDestructors\", \"retType\", \"classParam\"];\n              var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];\n\n              if (isClassMethodFunc) {\n                invokerFnBody += \"var thisWired = classParam.toWireType(\" + dtorStack + \", this);\\n\";\n              }\n\n              for (var i = 0; i < argCount - 2; ++i) {\n                invokerFnBody += \"var arg\" + i + \"Wired = argType\" + i + \".toWireType(\" + dtorStack + \", arg\" + i + \"); // \" + argTypes[i + 2].name + \"\\n\";\n                args1.push(\"argType\" + i);\n                args2.push(argTypes[i + 2]);\n              }\n\n              if (isClassMethodFunc) {\n                argsListWired = \"thisWired\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired;\n              }\n\n              invokerFnBody += (returns ? \"var rv = \" : \"\") + \"invoker(fn\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired + \");\\n\";\n\n              if (needsDestructorStack) {\n                invokerFnBody += \"runDestructors(destructors);\\n\";\n              } else {\n                for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {\n                  var paramName = i === 1 ? \"thisWired\" : \"arg\" + (i - 2) + \"Wired\";\n\n                  if (argTypes[i].destructorFunction !== null) {\n                    invokerFnBody += paramName + \"_dtor(\" + paramName + \"); // \" + argTypes[i].name + \"\\n\";\n                    args1.push(paramName + \"_dtor\");\n                    args2.push(argTypes[i].destructorFunction);\n                  }\n                }\n              }\n\n              if (returns) {\n                invokerFnBody += \"var ret = retType.fromWireType(rv);\\n\" + \"return ret;\\n\";\n              } else {}\n\n              invokerFnBody += \"}\\n\";\n              args1.push(invokerFnBody);\n              var invokerFunction = new_(Function, args1).apply(null, args2);\n              return invokerFunction;\n            }\n\n            function heap32VectorToArray(count, firstElement) {\n              var array = [];\n\n              for (var i = 0; i < count; i++) {\n                array.push(HEAP32[(firstElement >> 2) + i]);\n              }\n\n              return array;\n            }\n\n            function __embind_register_class_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, fn) {\n              var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n              methodName = readLatin1String(methodName);\n              rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n              whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n                classType = classType[0];\n                var humanName = classType.name + \".\" + methodName;\n\n                function unboundTypesHandler() {\n                  throwUnboundTypeError(\"Cannot call \" + humanName + \" due to unbound types\", rawArgTypes);\n                }\n\n                var proto = classType.registeredClass.constructor;\n\n                if (undefined === proto[methodName]) {\n                  unboundTypesHandler.argCount = argCount - 1;\n                  proto[methodName] = unboundTypesHandler;\n                } else {\n                  ensureOverloadTable(proto, methodName, humanName);\n                  proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;\n                }\n\n                whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {\n                  var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1));\n                  var func = craftInvokerFunction(humanName, invokerArgsArray, null, rawInvoker, fn);\n\n                  if (undefined === proto[methodName].overloadTable) {\n                    func.argCount = argCount - 1;\n                    proto[methodName] = func;\n                  } else {\n                    proto[methodName].overloadTable[argCount - 1] = func;\n                  }\n\n                  return [];\n                });\n                return [];\n              });\n            }\n\n            function validateThis(this_, classType, humanName) {\n              if (!(this_ instanceof Object)) {\n                throwBindingError(humanName + ' with invalid \"this\": ' + this_);\n              }\n\n              if (!(this_ instanceof classType.registeredClass.constructor)) {\n                throwBindingError(humanName + ' incompatible with \"this\" of type ' + this_.constructor.name);\n              }\n\n              if (!this_.$$.ptr) {\n                throwBindingError(\"cannot call emscripten binding method \" + humanName + \" on deleted object\");\n              }\n\n              return upcastPointer(this_.$$.ptr, this_.$$.ptrType.registeredClass, classType.registeredClass);\n            }\n\n            function __embind_register_class_class_property(rawClassType, fieldName, rawFieldType, rawFieldPtr, getterSignature, getter, setterSignature, setter) {\n              fieldName = readLatin1String(fieldName);\n              getter = embind__requireFunction(getterSignature, getter);\n              whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n                classType = classType[0];\n                var humanName = classType.name + \".\" + fieldName;\n                var desc = {\n                  get: function () {\n                    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [rawFieldType]);\n                  },\n                  enumerable: true,\n                  configurable: true\n                };\n\n                if (setter) {\n                  desc.set = function () {\n                    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [rawFieldType]);\n                  };\n                } else {\n                  desc.set = function (v) {\n                    throwBindingError(humanName + \" is a read-only property\");\n                  };\n                }\n\n                Object.defineProperty(classType.registeredClass.constructor, fieldName, desc);\n                whenDependentTypesAreResolved([], [rawFieldType], function (fieldType) {\n                  fieldType = fieldType[0];\n                  var desc = {\n                    get: function () {\n                      return fieldType[\"fromWireType\"](getter(rawFieldPtr));\n                    },\n                    enumerable: true\n                  };\n\n                  if (setter) {\n                    setter = embind__requireFunction(setterSignature, setter);\n\n                    desc.set = function (v) {\n                      var destructors = [];\n                      setter(rawFieldPtr, fieldType[\"toWireType\"](destructors, v));\n                      runDestructors(destructors);\n                    };\n                  }\n\n                  Object.defineProperty(classType.registeredClass.constructor, fieldName, desc);\n                  return [];\n                });\n                return [];\n              });\n            }\n\n            function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {\n              assert(argCount > 0);\n              var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n              invoker = embind__requireFunction(invokerSignature, invoker);\n              var args = [rawConstructor];\n              var destructors = [];\n              whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n                classType = classType[0];\n                var humanName = \"constructor \" + classType.name;\n\n                if (undefined === classType.registeredClass.constructor_body) {\n                  classType.registeredClass.constructor_body = [];\n                }\n\n                if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {\n                  throw new BindingError(\"Cannot register multiple constructors with identical number of parameters (\" + (argCount - 1) + \") for class '\" + classType.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n                }\n\n                classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {\n                  throwUnboundTypeError(\"Cannot construct \" + classType.name + \" due to unbound types\", rawArgTypes);\n                };\n\n                whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {\n                  classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {\n                    if (arguments.length !== argCount - 1) {\n                      throwBindingError(humanName + \" called with \" + arguments.length + \" arguments, expected \" + (argCount - 1));\n                    }\n\n                    destructors.length = 0;\n                    args.length = argCount;\n\n                    for (var i = 1; i < argCount; ++i) {\n                      args[i] = argTypes[i][\"toWireType\"](destructors, arguments[i - 1]);\n                    }\n\n                    var ptr = invoker.apply(null, args);\n                    runDestructors(destructors);\n                    return argTypes[0][\"fromWireType\"](ptr);\n                  };\n\n                  return [];\n                });\n                return [];\n              });\n            }\n\n            function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {\n              var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n              methodName = readLatin1String(methodName);\n              rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n              whenDependentTypesAreResolved([], [rawClassType], function (classType) {\n                classType = classType[0];\n                var humanName = classType.name + \".\" + methodName;\n\n                if (isPureVirtual) {\n                  classType.registeredClass.pureVirtualFunctions.push(methodName);\n                }\n\n                function unboundTypesHandler() {\n                  throwUnboundTypeError(\"Cannot call \" + humanName + \" due to unbound types\", rawArgTypes);\n                }\n\n                var proto = classType.registeredClass.instancePrototype;\n                var method = proto[methodName];\n\n                if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {\n                  unboundTypesHandler.argCount = argCount - 2;\n                  unboundTypesHandler.className = classType.name;\n                  proto[methodName] = unboundTypesHandler;\n                } else {\n                  ensureOverloadTable(proto, methodName, humanName);\n                  proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;\n                }\n\n                whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {\n                  var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);\n\n                  if (undefined === proto[methodName].overloadTable) {\n                    memberFunction.argCount = argCount - 2;\n                    proto[methodName] = memberFunction;\n                  } else {\n                    proto[methodName].overloadTable[argCount - 2] = memberFunction;\n                  }\n\n                  return [];\n                });\n                return [];\n              });\n            }\n\n            function __embind_register_class_property(classType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {\n              fieldName = readLatin1String(fieldName);\n              getter = embind__requireFunction(getterSignature, getter);\n              whenDependentTypesAreResolved([], [classType], function (classType) {\n                classType = classType[0];\n                var humanName = classType.name + \".\" + fieldName;\n                var desc = {\n                  get: function () {\n                    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [getterReturnType, setterArgumentType]);\n                  },\n                  enumerable: true,\n                  configurable: true\n                };\n\n                if (setter) {\n                  desc.set = function () {\n                    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [getterReturnType, setterArgumentType]);\n                  };\n                } else {\n                  desc.set = function (v) {\n                    throwBindingError(humanName + \" is a read-only property\");\n                  };\n                }\n\n                Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n                whenDependentTypesAreResolved([], setter ? [getterReturnType, setterArgumentType] : [getterReturnType], function (types) {\n                  var getterReturnType = types[0];\n                  var desc = {\n                    get: function () {\n                      var ptr = validateThis(this, classType, humanName + \" getter\");\n                      return getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n                    },\n                    enumerable: true\n                  };\n\n                  if (setter) {\n                    setter = embind__requireFunction(setterSignature, setter);\n                    var setterArgumentType = types[1];\n\n                    desc.set = function (v) {\n                      var ptr = validateThis(this, classType, humanName + \" setter\");\n                      var destructors = [];\n                      setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, v));\n                      runDestructors(destructors);\n                    };\n                  }\n\n                  Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n                  return [];\n                });\n                return [];\n              });\n            }\n\n            function __emval_decref(handle) {\n              if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {\n                emval_handle_array[handle] = undefined;\n                emval_free_list.push(handle);\n              }\n            }\n\n            function __embind_register_emval(rawType, name) {\n              name = readLatin1String(name);\n              registerType(rawType, {\n                name: name,\n                \"fromWireType\": function (handle) {\n                  var rv = emval_handle_array[handle].value;\n\n                  __emval_decref(handle);\n\n                  return rv;\n                },\n                \"toWireType\": function (destructors, value) {\n                  return __emval_register(value);\n                },\n                \"argPackAdvance\": 8,\n                \"readValueFromPointer\": simpleReadValueFromPointer,\n                destructorFunction: null\n              });\n            }\n\n            function enumReadValueFromPointer(name, shift, signed) {\n              switch (shift) {\n                case 0:\n                  return function (pointer) {\n                    var heap = signed ? HEAP8 : HEAPU8;\n                    return this[\"fromWireType\"](heap[pointer]);\n                  };\n\n                case 1:\n                  return function (pointer) {\n                    var heap = signed ? HEAP16 : HEAPU16;\n                    return this[\"fromWireType\"](heap[pointer >> 1]);\n                  };\n\n                case 2:\n                  return function (pointer) {\n                    var heap = signed ? HEAP32 : HEAPU32;\n                    return this[\"fromWireType\"](heap[pointer >> 2]);\n                  };\n\n                default:\n                  throw new TypeError(\"Unknown integer type: \" + name);\n              }\n            }\n\n            function __embind_register_enum(rawType, name, size, isSigned) {\n              var shift = getShiftFromSize(size);\n              name = readLatin1String(name);\n\n              function ctor() {}\n\n              ctor.values = {};\n              registerType(rawType, {\n                name: name,\n                constructor: ctor,\n                \"fromWireType\": function (c) {\n                  return this.constructor.values[c];\n                },\n                \"toWireType\": function (destructors, c) {\n                  return c.value;\n                },\n                \"argPackAdvance\": 8,\n                \"readValueFromPointer\": enumReadValueFromPointer(name, shift, isSigned),\n                destructorFunction: null\n              });\n              exposePublicSymbol(name, ctor);\n            }\n\n            function __embind_register_enum_value(rawEnumType, name, enumValue) {\n              var enumType = requireRegisteredType(rawEnumType, \"enum\");\n              name = readLatin1String(name);\n              var Enum = enumType.constructor;\n              var Value = Object.create(enumType.constructor.prototype, {\n                value: {\n                  value: enumValue\n                },\n                constructor: {\n                  value: createNamedFunction(enumType.name + \"_\" + name, function () {})\n                }\n              });\n              Enum.values[enumValue] = Value;\n              Enum[name] = Value;\n            }\n\n            function _embind_repr(v) {\n              if (v === null) {\n                return \"null\";\n              }\n\n              var t = typeof v;\n\n              if (t === \"object\" || t === \"array\" || t === \"function\") {\n                return v.toString();\n              } else {\n                return \"\" + v;\n              }\n            }\n\n            function floatReadValueFromPointer(name, shift) {\n              switch (shift) {\n                case 2:\n                  return function (pointer) {\n                    return this[\"fromWireType\"](HEAPF32[pointer >> 2]);\n                  };\n\n                case 3:\n                  return function (pointer) {\n                    return this[\"fromWireType\"](HEAPF64[pointer >> 3]);\n                  };\n\n                default:\n                  throw new TypeError(\"Unknown float type: \" + name);\n              }\n            }\n\n            function __embind_register_float(rawType, name, size) {\n              var shift = getShiftFromSize(size);\n              name = readLatin1String(name);\n              registerType(rawType, {\n                name: name,\n                \"fromWireType\": function (value) {\n                  return value;\n                },\n                \"toWireType\": function (destructors, value) {\n                  if (typeof value !== \"number\" && typeof value !== \"boolean\") {\n                    throw new TypeError('Cannot convert \"' + _embind_repr(value) + '\" to ' + this.name);\n                  }\n\n                  return value;\n                },\n                \"argPackAdvance\": 8,\n                \"readValueFromPointer\": floatReadValueFromPointer(name, shift),\n                destructorFunction: null\n              });\n            }\n\n            function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {\n              var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n              name = readLatin1String(name);\n              rawInvoker = embind__requireFunction(signature, rawInvoker);\n              exposePublicSymbol(name, function () {\n                throwUnboundTypeError(\"Cannot call \" + name + \" due to unbound types\", argTypes);\n              }, argCount - 1);\n              whenDependentTypesAreResolved([], argTypes, function (argTypes) {\n                var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1));\n                replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);\n                return [];\n              });\n            }\n\n            function integerReadValueFromPointer(name, shift, signed) {\n              switch (shift) {\n                case 0:\n                  return signed ? function readS8FromPointer(pointer) {\n                    return HEAP8[pointer];\n                  } : function readU8FromPointer(pointer) {\n                    return HEAPU8[pointer];\n                  };\n\n                case 1:\n                  return signed ? function readS16FromPointer(pointer) {\n                    return HEAP16[pointer >> 1];\n                  } : function readU16FromPointer(pointer) {\n                    return HEAPU16[pointer >> 1];\n                  };\n\n                case 2:\n                  return signed ? function readS32FromPointer(pointer) {\n                    return HEAP32[pointer >> 2];\n                  } : function readU32FromPointer(pointer) {\n                    return HEAPU32[pointer >> 2];\n                  };\n\n                default:\n                  throw new TypeError(\"Unknown integer type: \" + name);\n              }\n            }\n\n            function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {\n              name = readLatin1String(name);\n\n              if (maxRange === -1) {\n                maxRange = 4294967295;\n              }\n\n              var shift = getShiftFromSize(size);\n\n              var fromWireType = function (value) {\n                return value;\n              };\n\n              if (minRange === 0) {\n                var bitshift = 32 - 8 * size;\n\n                fromWireType = function (value) {\n                  return value << bitshift >>> bitshift;\n                };\n              }\n\n              var isUnsignedType = name.indexOf(\"unsigned\") != -1;\n              registerType(primitiveType, {\n                name: name,\n                \"fromWireType\": fromWireType,\n                \"toWireType\": function (destructors, value) {\n                  if (typeof value !== \"number\" && typeof value !== \"boolean\") {\n                    throw new TypeError('Cannot convert \"' + _embind_repr(value) + '\" to ' + this.name);\n                  }\n\n                  if (value < minRange || value > maxRange) {\n                    throw new TypeError('Passing a number \"' + _embind_repr(value) + '\" from JS side to C/C++ side to an argument of type \"' + name + '\", which is outside the valid range [' + minRange + \", \" + maxRange + \"]!\");\n                  }\n\n                  return isUnsignedType ? value >>> 0 : value | 0;\n                },\n                \"argPackAdvance\": 8,\n                \"readValueFromPointer\": integerReadValueFromPointer(name, shift, minRange !== 0),\n                destructorFunction: null\n              });\n            }\n\n            function __embind_register_memory_view(rawType, dataTypeIndex, name) {\n              var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];\n              var TA = typeMapping[dataTypeIndex];\n\n              function decodeMemoryView(handle) {\n                handle = handle >> 2;\n                var heap = HEAPU32;\n                var size = heap[handle];\n                var data = heap[handle + 1];\n                return new TA(buffer, data, size);\n              }\n\n              name = readLatin1String(name);\n              registerType(rawType, {\n                name: name,\n                \"fromWireType\": decodeMemoryView,\n                \"argPackAdvance\": 8,\n                \"readValueFromPointer\": decodeMemoryView\n              }, {\n                ignoreDuplicateRegistrations: true\n              });\n            }\n\n            function __embind_register_std_string(rawType, name) {\n              name = readLatin1String(name);\n              var stdStringIsUTF8 = name === \"std::string\";\n              registerType(rawType, {\n                name: name,\n                \"fromWireType\": function (value) {\n                  var length = HEAPU32[value >> 2];\n                  var str;\n\n                  if (stdStringIsUTF8) {\n                    var decodeStartPtr = value + 4;\n\n                    for (var i = 0; i <= length; ++i) {\n                      var currentBytePtr = value + 4 + i;\n\n                      if (i == length || HEAPU8[currentBytePtr] == 0) {\n                        var maxRead = currentBytePtr - decodeStartPtr;\n                        var stringSegment = UTF8ToString(decodeStartPtr, maxRead);\n\n                        if (str === undefined) {\n                          str = stringSegment;\n                        } else {\n                          str += String.fromCharCode(0);\n                          str += stringSegment;\n                        }\n\n                        decodeStartPtr = currentBytePtr + 1;\n                      }\n                    }\n                  } else {\n                    var a = new Array(length);\n\n                    for (var i = 0; i < length; ++i) {\n                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);\n                    }\n\n                    str = a.join(\"\");\n                  }\n\n                  _free(value);\n\n                  return str;\n                },\n                \"toWireType\": function (destructors, value) {\n                  if (value instanceof ArrayBuffer) {\n                    value = new Uint8Array(value);\n                  }\n\n                  var getLength;\n                  var valueIsOfTypeString = typeof value === \"string\";\n\n                  if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {\n                    throwBindingError(\"Cannot pass non-string to std::string\");\n                  }\n\n                  if (stdStringIsUTF8 && valueIsOfTypeString) {\n                    getLength = function () {\n                      return lengthBytesUTF8(value);\n                    };\n                  } else {\n                    getLength = function () {\n                      return value.length;\n                    };\n                  }\n\n                  var length = getLength();\n\n                  var ptr = _malloc(4 + length + 1);\n\n                  HEAPU32[ptr >> 2] = length;\n\n                  if (stdStringIsUTF8 && valueIsOfTypeString) {\n                    stringToUTF8(value, ptr + 4, length + 1);\n                  } else {\n                    if (valueIsOfTypeString) {\n                      for (var i = 0; i < length; ++i) {\n                        var charCode = value.charCodeAt(i);\n\n                        if (charCode > 255) {\n                          _free(ptr);\n\n                          throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\");\n                        }\n\n                        HEAPU8[ptr + 4 + i] = charCode;\n                      }\n                    } else {\n                      for (var i = 0; i < length; ++i) {\n                        HEAPU8[ptr + 4 + i] = value[i];\n                      }\n                    }\n                  }\n\n                  if (destructors !== null) {\n                    destructors.push(_free, ptr);\n                  }\n\n                  return ptr;\n                },\n                \"argPackAdvance\": 8,\n                \"readValueFromPointer\": simpleReadValueFromPointer,\n                destructorFunction: function (ptr) {\n                  _free(ptr);\n                }\n              });\n            }\n\n            function __embind_register_std_wstring(rawType, charSize, name) {\n              name = readLatin1String(name);\n              var decodeString, encodeString, getHeap, lengthBytesUTF, shift;\n\n              if (charSize === 2) {\n                decodeString = UTF16ToString;\n                encodeString = stringToUTF16;\n                lengthBytesUTF = lengthBytesUTF16;\n\n                getHeap = function () {\n                  return HEAPU16;\n                };\n\n                shift = 1;\n              } else if (charSize === 4) {\n                decodeString = UTF32ToString;\n                encodeString = stringToUTF32;\n                lengthBytesUTF = lengthBytesUTF32;\n\n                getHeap = function () {\n                  return HEAPU32;\n                };\n\n                shift = 2;\n              }\n\n              registerType(rawType, {\n                name: name,\n                \"fromWireType\": function (value) {\n                  var length = HEAPU32[value >> 2];\n                  var HEAP = getHeap();\n                  var str;\n                  var decodeStartPtr = value + 4;\n\n                  for (var i = 0; i <= length; ++i) {\n                    var currentBytePtr = value + 4 + i * charSize;\n\n                    if (i == length || HEAP[currentBytePtr >> shift] == 0) {\n                      var maxReadBytes = currentBytePtr - decodeStartPtr;\n                      var stringSegment = decodeString(decodeStartPtr, maxReadBytes);\n\n                      if (str === undefined) {\n                        str = stringSegment;\n                      } else {\n                        str += String.fromCharCode(0);\n                        str += stringSegment;\n                      }\n\n                      decodeStartPtr = currentBytePtr + charSize;\n                    }\n                  }\n\n                  _free(value);\n\n                  return str;\n                },\n                \"toWireType\": function (destructors, value) {\n                  if (!(typeof value === \"string\")) {\n                    throwBindingError(\"Cannot pass non-string to C++ string type \" + name);\n                  }\n\n                  var length = lengthBytesUTF(value);\n\n                  var ptr = _malloc(4 + length + charSize);\n\n                  HEAPU32[ptr >> 2] = length >> shift;\n                  encodeString(value, ptr + 4, length + charSize);\n\n                  if (destructors !== null) {\n                    destructors.push(_free, ptr);\n                  }\n\n                  return ptr;\n                },\n                \"argPackAdvance\": 8,\n                \"readValueFromPointer\": simpleReadValueFromPointer,\n                destructorFunction: function (ptr) {\n                  _free(ptr);\n                }\n              });\n            }\n\n            function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {\n              structRegistrations[rawType] = {\n                name: readLatin1String(name),\n                rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),\n                rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),\n                fields: []\n              };\n            }\n\n            function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {\n              structRegistrations[structType].fields.push({\n                fieldName: readLatin1String(fieldName),\n                getterReturnType: getterReturnType,\n                getter: embind__requireFunction(getterSignature, getter),\n                getterContext: getterContext,\n                setterArgumentType: setterArgumentType,\n                setter: embind__requireFunction(setterSignature, setter),\n                setterContext: setterContext\n              });\n            }\n\n            function __embind_register_void(rawType, name) {\n              name = readLatin1String(name);\n              registerType(rawType, {\n                isVoid: true,\n                name: name,\n                \"argPackAdvance\": 0,\n                \"fromWireType\": function () {\n                  return undefined;\n                },\n                \"toWireType\": function (destructors, o) {\n                  return undefined;\n                }\n              });\n            }\n\n            function __emval_as(handle, returnType, destructorsRef) {\n              handle = requireHandle(handle);\n              returnType = requireRegisteredType(returnType, \"emval::as\");\n              var destructors = [];\n\n              var rd = __emval_register(destructors);\n\n              HEAP32[destructorsRef >> 2] = rd;\n              return returnType[\"toWireType\"](destructors, handle);\n            }\n\n            function __emval_allocateDestructors(destructorsRef) {\n              var destructors = [];\n              HEAP32[destructorsRef >> 2] = __emval_register(destructors);\n              return destructors;\n            }\n\n            var emval_symbols = {};\n\n            function getStringOrSymbol(address) {\n              var symbol = emval_symbols[address];\n\n              if (symbol === undefined) {\n                return readLatin1String(address);\n              } else {\n                return symbol;\n              }\n            }\n\n            var emval_methodCallers = [];\n\n            function __emval_call_method(caller, handle, methodName, destructorsRef, args) {\n              caller = emval_methodCallers[caller];\n              handle = requireHandle(handle);\n              methodName = getStringOrSymbol(methodName);\n              return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);\n            }\n\n            function __emval_call_void_method(caller, handle, methodName, args) {\n              caller = emval_methodCallers[caller];\n              handle = requireHandle(handle);\n              methodName = getStringOrSymbol(methodName);\n              caller(handle, methodName, null, args);\n            }\n\n            function __emval_addMethodCaller(caller) {\n              var id = emval_methodCallers.length;\n              emval_methodCallers.push(caller);\n              return id;\n            }\n\n            function __emval_lookupTypes(argCount, argTypes) {\n              var a = new Array(argCount);\n\n              for (var i = 0; i < argCount; ++i) {\n                a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], \"parameter \" + i);\n              }\n\n              return a;\n            }\n\n            function __emval_get_method_caller(argCount, argTypes) {\n              var types = __emval_lookupTypes(argCount, argTypes);\n\n              var retType = types[0];\n              var signatureName = retType.name + \"_$\" + types.slice(1).map(function (t) {\n                return t.name;\n              }).join(\"_\") + \"$\";\n              var params = [\"retType\"];\n              var args = [retType];\n              var argsList = \"\";\n\n              for (var i = 0; i < argCount - 1; ++i) {\n                argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n                params.push(\"argType\" + i);\n                args.push(types[1 + i]);\n              }\n\n              var functionName = makeLegalFunctionName(\"methodCaller_\" + signatureName);\n              var functionBody = \"return function \" + functionName + \"(handle, name, destructors, args) {\\n\";\n              var offset = 0;\n\n              for (var i = 0; i < argCount - 1; ++i) {\n                functionBody += \"    var arg\" + i + \" = argType\" + i + \".readValueFromPointer(args\" + (offset ? \"+\" + offset : \"\") + \");\\n\";\n                offset += types[i + 1][\"argPackAdvance\"];\n              }\n\n              functionBody += \"    var rv = handle[name](\" + argsList + \");\\n\";\n\n              for (var i = 0; i < argCount - 1; ++i) {\n                if (types[i + 1][\"deleteObject\"]) {\n                  functionBody += \"    argType\" + i + \".deleteObject(arg\" + i + \");\\n\";\n                }\n              }\n\n              if (!retType.isVoid) {\n                functionBody += \"    return retType.toWireType(destructors, rv);\\n\";\n              }\n\n              functionBody += \"};\\n\";\n              params.push(functionBody);\n              var invokerFunction = new_(Function, params).apply(null, args);\n              return __emval_addMethodCaller(invokerFunction);\n            }\n\n            function __emval_get_module_property(name) {\n              name = getStringOrSymbol(name);\n              return __emval_register(Module[name]);\n            }\n\n            function __emval_get_property(handle, key) {\n              handle = requireHandle(handle);\n              key = requireHandle(key);\n              return __emval_register(handle[key]);\n            }\n\n            function __emval_incref(handle) {\n              if (handle > 4) {\n                emval_handle_array[handle].refcount += 1;\n              }\n            }\n\n            function __emval_new_cstring(v) {\n              return __emval_register(getStringOrSymbol(v));\n            }\n\n            function __emval_run_destructors(handle) {\n              var destructors = emval_handle_array[handle].value;\n              runDestructors(destructors);\n\n              __emval_decref(handle);\n            }\n\n            function __emval_take_value(type, argv) {\n              type = requireRegisteredType(type, \"_emval_take_value\");\n              var v = type[\"readValueFromPointer\"](argv);\n              return __emval_register(v);\n            }\n\n            function _abort() {\n              abort();\n            }\n\n            function emscripten_realloc_buffer(size) {\n              try {\n                wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);\n                updateGlobalBufferAndViews(wasmMemory.buffer);\n                return 1;\n              } catch (e) {}\n            }\n\n            function _emscripten_resize_heap(requestedSize) {\n              var oldSize = HEAPU8.length;\n              requestedSize = requestedSize >>> 0;\n              var maxHeapSize = 2147483648;\n\n              if (requestedSize > maxHeapSize) {\n                return false;\n              }\n\n              for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n                var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n                overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n                var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n                var replacement = emscripten_realloc_buffer(newSize);\n\n                if (replacement) {\n                  return true;\n                }\n              }\n\n              return false;\n            }\n\n            var SYSCALLS = {\n              mappings: {},\n              buffers: [null, [], []],\n              printChar: function (stream, curr) {\n                var buffer = SYSCALLS.buffers[stream];\n\n                if (curr === 0 || curr === 10) {\n                  (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n                  buffer.length = 0;\n                } else {\n                  buffer.push(curr);\n                }\n              },\n              varargs: undefined,\n              get: function () {\n                SYSCALLS.varargs += 4;\n                var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];\n                return ret;\n              },\n              getStr: function (ptr) {\n                var ret = UTF8ToString(ptr);\n                return ret;\n              },\n              get64: function (low, high) {\n                return low;\n              }\n            };\n\n            function _fd_close(fd) {\n              return 0;\n            }\n\n            function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {}\n\n            function _fd_write(fd, iov, iovcnt, pnum) {\n              var num = 0;\n\n              for (var i = 0; i < iovcnt; i++) {\n                var ptr = HEAP32[iov + i * 8 >> 2];\n                var len = HEAP32[iov + (i * 8 + 4) >> 2];\n\n                for (var j = 0; j < len; j++) {\n                  SYSCALLS.printChar(fd, HEAPU8[ptr + j]);\n                }\n\n                num += len;\n              }\n\n              HEAP32[pnum >> 2] = num;\n              return 0;\n            }\n\n            function _setTempRet0($i) {\n              setTempRet0($i | 0);\n            }\n\n            init_emval();\n            PureVirtualError = Module[\"PureVirtualError\"] = extendError(Error, \"PureVirtualError\");\n            embind_init_charCodes();\n            init_embind();\n            BindingError = Module[\"BindingError\"] = extendError(Error, \"BindingError\");\n            InternalError = Module[\"InternalError\"] = extendError(Error, \"InternalError\");\n            init_ClassHandle();\n            init_RegisteredPointer();\n            UnboundTypeError = Module[\"UnboundTypeError\"] = extendError(Error, \"UnboundTypeError\");\n            var ASSERTIONS = false;\n\n            function intArrayToString(array) {\n              var ret = [];\n\n              for (var i = 0; i < array.length; i++) {\n                var chr = array[i];\n\n                if (chr > 255) {\n                  if (ASSERTIONS) {\n                    assert(false, \"Character code \" + chr + \" (\" + String.fromCharCode(chr) + \")  at offset \" + i + \" not in 0x00-0xFF.\");\n                  }\n\n                  chr &= 255;\n                }\n\n                ret.push(String.fromCharCode(chr));\n              }\n\n              return ret.join(\"\");\n            }\n\n            var decodeBase64 = typeof atob === \"function\" ? atob : function (input) {\n              var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n              var output = \"\";\n              var chr1, chr2, chr3;\n              var enc1, enc2, enc3, enc4;\n              var i = 0;\n              input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n              do {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n                chr1 = enc1 << 2 | enc2 >> 4;\n                chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n                chr3 = (enc3 & 3) << 6 | enc4;\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                  output = output + String.fromCharCode(chr2);\n                }\n\n                if (enc4 !== 64) {\n                  output = output + String.fromCharCode(chr3);\n                }\n              } while (i < input.length);\n\n              return output;\n            };\n\n            function intArrayFromBase64(s) {\n              if (typeof ENVIRONMENT_IS_NODE === \"boolean\" && ENVIRONMENT_IS_NODE) {\n                var buf;\n\n                try {\n                  buf = Buffer.from(s, \"base64\");\n                } catch (_) {\n                  buf = new Buffer(s, \"base64\");\n                }\n\n                return new Uint8Array(buf[\"buffer\"], buf[\"byteOffset\"], buf[\"byteLength\"]);\n              }\n\n              try {\n                var decoded = decodeBase64(s);\n                var bytes = new Uint8Array(decoded.length);\n\n                for (var i = 0; i < decoded.length; ++i) {\n                  bytes[i] = decoded.charCodeAt(i);\n                }\n\n                return bytes;\n              } catch (_) {\n                throw new Error(\"Converting base64 string to bytes failed.\");\n              }\n            }\n\n            function tryParseAsDataURI(filename) {\n              if (!isDataURI(filename)) {\n                return;\n              }\n\n              return intArrayFromBase64(filename.slice(dataURIPrefix.length));\n            }\n\n            var asmLibraryArg = {\n              \"o\": __embind_create_inheriting_constructor,\n              \"H\": __embind_finalize_value_object,\n              \"A\": __embind_register_bool,\n              \"c\": __embind_register_class,\n              \"i\": __embind_register_class_class_function,\n              \"f\": __embind_register_class_class_property,\n              \"n\": __embind_register_class_constructor,\n              \"a\": __embind_register_class_function,\n              \"b\": __embind_register_class_property,\n              \"z\": __embind_register_emval,\n              \"k\": __embind_register_enum,\n              \"j\": __embind_register_enum_value,\n              \"q\": __embind_register_float,\n              \"K\": __embind_register_function,\n              \"h\": __embind_register_integer,\n              \"g\": __embind_register_memory_view,\n              \"r\": __embind_register_std_string,\n              \"m\": __embind_register_std_wstring,\n              \"J\": __embind_register_value_object,\n              \"I\": __embind_register_value_object_field,\n              \"B\": __embind_register_void,\n              \"l\": __emval_as,\n              \"G\": __emval_call_method,\n              \"e\": __emval_call_void_method,\n              \"D\": __emval_decref,\n              \"d\": __emval_get_method_caller,\n              \"L\": __emval_get_module_property,\n              \"u\": __emval_get_property,\n              \"C\": __emval_incref,\n              \"E\": __emval_new_cstring,\n              \"F\": __emval_run_destructors,\n              \"t\": __emval_take_value,\n              \"s\": _abort,\n              \"x\": _emscripten_resize_heap,\n              \"y\": _fd_close,\n              \"v\": _fd_seek,\n              \"p\": _fd_write,\n              \"w\": _setTempRet0\n            };\n            var asm = createWasm();\n\n            var ___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = function () {\n              return (___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = Module[\"asm\"][\"N\"]).apply(null, arguments);\n            };\n\n            var _malloc = Module[\"_malloc\"] = function () {\n              return (_malloc = Module[\"_malloc\"] = Module[\"asm\"][\"P\"]).apply(null, arguments);\n            };\n\n            var ___getTypeName = Module[\"___getTypeName\"] = function () {\n              return (___getTypeName = Module[\"___getTypeName\"] = Module[\"asm\"][\"Q\"]).apply(null, arguments);\n            };\n\n            var ___embind_register_native_and_builtin_types = Module[\"___embind_register_native_and_builtin_types\"] = function () {\n              return (___embind_register_native_and_builtin_types = Module[\"___embind_register_native_and_builtin_types\"] = Module[\"asm\"][\"R\"]).apply(null, arguments);\n            };\n\n            var _free = Module[\"_free\"] = function () {\n              return (_free = Module[\"_free\"] = Module[\"asm\"][\"S\"]).apply(null, arguments);\n            };\n\n            var dynCall_jiji = Module[\"dynCall_jiji\"] = function () {\n              return (dynCall_jiji = Module[\"dynCall_jiji\"] = Module[\"asm\"][\"T\"]).apply(null, arguments);\n            };\n\n            var calledRun;\n\n            function ExitStatus(status) {\n              this.name = \"ExitStatus\";\n              this.message = \"Program terminated with exit(\" + status + \")\";\n              this.status = status;\n            }\n\n            dependenciesFulfilled = function runCaller() {\n              if (!calledRun) run();\n              if (!calledRun) dependenciesFulfilled = runCaller;\n            };\n\n            function run(args) {\n              args = args || arguments_;\n\n              if (runDependencies > 0) {\n                return;\n              }\n\n              preRun();\n\n              if (runDependencies > 0) {\n                return;\n              }\n\n              function doRun() {\n                if (calledRun) return;\n                calledRun = true;\n                Module[\"calledRun\"] = true;\n                if (ABORT) return;\n                initRuntime();\n                preMain();\n                readyPromiseResolve(Module);\n                if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n                postRun();\n              }\n\n              if (Module[\"setStatus\"]) {\n                Module[\"setStatus\"](\"Running...\");\n                setTimeout(function () {\n                  setTimeout(function () {\n                    Module[\"setStatus\"](\"\");\n                  }, 1);\n                  doRun();\n                }, 1);\n              } else {\n                doRun();\n              }\n            }\n\n            Module[\"run\"] = run;\n\n            if (Module[\"preInit\"]) {\n              if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [Module[\"preInit\"]];\n\n              while (Module[\"preInit\"].length > 0) {\n                Module[\"preInit\"].pop()();\n              }\n            }\n\n            run();\n            return Rive.ready;\n          };\n        }();\n        /* harmony default export */\n\n\n        const __WEBPACK_DEFAULT_EXPORT__ = Rive;\n        /***/\n      },\n      /* 2 */\n\n      /***/\n      () => {\n        /* (ignored) */\n\n        /***/\n      },\n      /* 3 */\n\n      /***/\n      () => {\n        /* (ignored) */\n\n        /***/\n      }\n      /******/\n      ];\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n      /******/\n\n      /* webpack/runtime/define property getters */\n\n      /******/\n\n\n      (() => {\n        /******/\n        // define getter functions for harmony exports\n\n        /******/\n        __webpack_require__.d = (exports, definition) => {\n          /******/\n          for (var key in definition) {\n            /******/\n            if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n              /******/\n              Object.defineProperty(exports, key, {\n                enumerable: true,\n                get: definition[key]\n              });\n              /******/\n            }\n            /******/\n\n          }\n          /******/\n\n        };\n        /******/\n\n      })();\n      /******/\n\n      /******/\n\n      /* webpack/runtime/hasOwnProperty shorthand */\n\n      /******/\n\n\n      (() => {\n        /******/\n        __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n        /******/\n\n      })();\n      /******/\n\n      /******/\n\n      /* webpack/runtime/make namespace object */\n\n      /******/\n\n\n      (() => {\n        /******/\n        // define __esModule on exports\n\n        /******/\n        __webpack_require__.r = exports => {\n          /******/\n          if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n            /******/\n            Object.defineProperty(exports, Symbol.toStringTag, {\n              value: 'Module'\n            });\n            /******/\n          }\n          /******/\n\n\n          Object.defineProperty(exports, '__esModule', {\n            value: true\n          });\n          /******/\n        };\n        /******/\n\n      })();\n      /******/\n\n      /************************************************************************/\n\n\n      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be in strict mode.\n\n      (() => {\n        \"use strict\";\n\n        __webpack_require__.r(__webpack_exports__);\n        /* harmony export */\n\n\n        __webpack_require__.d(__webpack_exports__, {\n          /* harmony export */\n          \"Fit\": () =>\n          /* binding */\n          Fit,\n\n          /* harmony export */\n          \"Alignment\": () =>\n          /* binding */\n          Alignment,\n\n          /* harmony export */\n          \"Layout\": () =>\n          /* binding */\n          Layout,\n\n          /* harmony export */\n          \"RuntimeLoader\": () =>\n          /* binding */\n          RuntimeLoader,\n\n          /* harmony export */\n          \"StateMachineInputType\": () =>\n          /* binding */\n          StateMachineInputType,\n\n          /* harmony export */\n          \"StateMachineInput\": () =>\n          /* binding */\n          StateMachineInput,\n\n          /* harmony export */\n          \"EventType\": () =>\n          /* binding */\n          EventType,\n\n          /* harmony export */\n          \"LoopType\": () =>\n          /* binding */\n          LoopType,\n\n          /* harmony export */\n          \"Rive\": () =>\n          /* binding */\n          Rive,\n\n          /* harmony export */\n          \"Testing\": () =>\n          /* binding */\n          Testing\n          /* harmony export */\n\n        });\n        /* harmony import */\n\n\n        var _rive_canvas_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);\n\n        var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n\n        var __generator = undefined && undefined.__generator || function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function () {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          },\n              f,\n              y,\n              t,\n              g;\n          return g = {\n            next: verb(0),\n            \"throw\": verb(1),\n            \"return\": verb(2)\n          }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g;\n\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n\n            while (_) try {\n              if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n              if (y = 0, t) op = [op[0] & 2, t.value];\n\n              switch (op[0]) {\n                case 0:\n                case 1:\n                  t = op;\n                  break;\n\n                case 4:\n                  _.label++;\n                  return {\n                    value: op[1],\n                    done: false\n                  };\n\n                case 5:\n                  _.label++;\n                  y = op[1];\n                  op = [0];\n                  continue;\n\n                case 7:\n                  op = _.ops.pop();\n\n                  _.trys.pop();\n\n                  continue;\n\n                default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                    _ = 0;\n                    continue;\n                  }\n\n                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                    _.label = op[1];\n                    break;\n                  }\n\n                  if (op[0] === 6 && _.label < t[1]) {\n                    _.label = t[1];\n                    t = op;\n                    break;\n                  }\n\n                  if (t && _.label < t[2]) {\n                    _.label = t[2];\n\n                    _.ops.push(op);\n\n                    break;\n                  }\n\n                  if (t[2]) _.ops.pop();\n\n                  _.trys.pop();\n\n                  continue;\n              }\n\n              op = body.call(thisArg, _);\n            } catch (e) {\n              op = [6, e];\n              y = 0;\n            } finally {\n              f = t = 0;\n            }\n\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        }; // Tracks playback states; numbers map to the runtime's numerical values\n        // i.e. play: 0, pause: 1, stop: 2\n\n\n        var PlaybackState;\n\n        (function (PlaybackState) {\n          PlaybackState[PlaybackState[\"Play\"] = 0] = \"Play\";\n          PlaybackState[PlaybackState[\"Pause\"] = 1] = \"Pause\";\n          PlaybackState[PlaybackState[\"Stop\"] = 2] = \"Stop\";\n        })(PlaybackState || (PlaybackState = {})); // #region layout\n        // Fit options for the canvas\n\n\n        var Fit;\n\n        (function (Fit) {\n          Fit[\"Cover\"] = \"cover\";\n          Fit[\"Contain\"] = \"contain\";\n          Fit[\"Fill\"] = \"fill\";\n          Fit[\"FitWidth\"] = \"fitWidth\";\n          Fit[\"FitHeight\"] = \"fitHeight\";\n          Fit[\"None\"] = \"none\";\n          Fit[\"ScaleDown\"] = \"scaleDown\";\n        })(Fit || (Fit = {})); // Alignment options for the canvas\n\n\n        var Alignment;\n\n        (function (Alignment) {\n          Alignment[\"Center\"] = \"center\";\n          Alignment[\"TopLeft\"] = \"topLeft\";\n          Alignment[\"TopCenter\"] = \"topCenter\";\n          Alignment[\"TopRight\"] = \"topRight\";\n          Alignment[\"CenterLeft\"] = \"centerLeft\";\n          Alignment[\"CenterRight\"] = \"centerRight\";\n          Alignment[\"BottomLeft\"] = \"bottomLeft\";\n          Alignment[\"BottomCenter\"] = \"bottomCenter\";\n          Alignment[\"BottomRight\"] = \"bottomRight\";\n        })(Alignment || (Alignment = {})); // Alignment options for Rive animations in a HTML canvas\n\n\n        var Layout =\n        /** @class */\n        function () {\n          function Layout(params) {\n            var _a, _b, _c, _d, _e, _f;\n\n            this.fit = (_a = params === null || params === void 0 ? void 0 : params.fit) !== null && _a !== void 0 ? _a : Fit.Contain;\n            this.alignment = (_b = params === null || params === void 0 ? void 0 : params.alignment) !== null && _b !== void 0 ? _b : Alignment.Center;\n            this.minX = (_c = params === null || params === void 0 ? void 0 : params.minX) !== null && _c !== void 0 ? _c : 0;\n            this.minY = (_d = params === null || params === void 0 ? void 0 : params.minY) !== null && _d !== void 0 ? _d : 0;\n            this.maxX = (_e = params === null || params === void 0 ? void 0 : params.maxX) !== null && _e !== void 0 ? _e : 0;\n            this.maxY = (_f = params === null || params === void 0 ? void 0 : params.maxY) !== null && _f !== void 0 ? _f : 0;\n          } // Alternative constructor to build a Layout from an interface/object\n\n\n          Layout.new = function (_a) {\n            var fit = _a.fit,\n                alignment = _a.alignment,\n                minX = _a.minX,\n                minY = _a.minY,\n                maxX = _a.maxX,\n                maxY = _a.maxY;\n            console.warn('This function is deprecated: please use `new Layout({})` instead');\n            return new Layout({\n              fit: fit,\n              alignment: alignment,\n              minX: minX,\n              minY: minY,\n              maxX: maxX,\n              maxY: maxY\n            });\n          };\n          /**\n           * Makes a copy of the layout, replacing any specified parameters\n           */\n\n\n          Layout.prototype.copyWith = function (_a) {\n            var fit = _a.fit,\n                alignment = _a.alignment,\n                minX = _a.minX,\n                minY = _a.minY,\n                maxX = _a.maxX,\n                maxY = _a.maxY;\n            return new Layout({\n              fit: fit !== null && fit !== void 0 ? fit : this.fit,\n              alignment: alignment !== null && alignment !== void 0 ? alignment : this.alignment,\n              minX: minX !== null && minX !== void 0 ? minX : this.minX,\n              minY: minY !== null && minY !== void 0 ? minY : this.minY,\n              maxX: maxX !== null && maxX !== void 0 ? maxX : this.maxX,\n              maxY: maxY !== null && maxY !== void 0 ? maxY : this.maxY\n            });\n          }; // Returns fit for the Wasm runtime format\n\n\n          Layout.prototype.runtimeFit = function (rive) {\n            if (this.cachedRuntimeFit) return this.cachedRuntimeFit;\n            var fit;\n            if (this.fit === Fit.Cover) fit = rive.Fit.cover;else if (this.fit === Fit.Contain) fit = rive.Fit.contain;else if (this.fit === Fit.Fill) fit = rive.Fit.fill;else if (this.fit === Fit.FitWidth) fit = rive.Fit.fitWidth;else if (this.fit === Fit.FitHeight) fit = rive.Fit.fitHeight;else if (this.fit === Fit.ScaleDown) fit = rive.Fit.scaleDown;else fit = rive.Fit.none;\n            this.cachedRuntimeFit = fit;\n            return fit;\n          }; // Returns alignment for the Wasm runtime format\n\n\n          Layout.prototype.runtimeAlignment = function (rive) {\n            if (this.cachedRuntimeAlignment) return this.cachedRuntimeAlignment;\n            var alignment;\n            if (this.alignment === Alignment.TopLeft) alignment = rive.Alignment.topLeft;else if (this.alignment === Alignment.TopCenter) alignment = rive.Alignment.topCenter;else if (this.alignment === Alignment.TopRight) alignment = rive.Alignment.topRight;else if (this.alignment === Alignment.CenterLeft) alignment = rive.Alignment.centerLeft;else if (this.alignment === Alignment.CenterRight) alignment = rive.Alignment.centerRight;else if (this.alignment === Alignment.BottomLeft) alignment = rive.Alignment.bottomLeft;else if (this.alignment === Alignment.BottomCenter) alignment = rive.Alignment.bottomCenter;else if (this.alignment === Alignment.BottomRight) alignment = rive.Alignment.bottomRight;else alignment = rive.Alignment.center;\n            this.cachedRuntimeAlignment = alignment;\n            return alignment;\n          };\n\n          return Layout;\n        }(); // Runtime singleton; use getInstance to provide a callback that returns the\n        // Rive runtime\n\n\n        var RuntimeLoader =\n        /** @class */\n        function () {\n          // Class is never instantiated\n          function RuntimeLoader() {} // Loads the runtime\n\n\n          RuntimeLoader.loadRuntime = function () {\n            _rive_canvas_js__WEBPACK_IMPORTED_MODULE_0__.default({\n              // Loads Wasm bundle\n              locateFile: function (_) {\n                return RuntimeLoader.wasmURL;\n              }\n            }).then(function (rive) {\n              var _a;\n\n              RuntimeLoader.runtime = rive; // Fire all the callbacks\n\n              while (RuntimeLoader.callBackQueue.length > 0) {\n                (_a = RuntimeLoader.callBackQueue.shift()) === null || _a === void 0 ? void 0 : _a(RuntimeLoader.runtime);\n              }\n            });\n          }; // Provides a runtime instance via a callback\n\n\n          RuntimeLoader.getInstance = function (callback) {\n            // If it's not loading, start loading runtime\n            if (!RuntimeLoader.isLoading) {\n              RuntimeLoader.isLoading = true;\n              RuntimeLoader.loadRuntime();\n            }\n\n            if (!RuntimeLoader.runtime) {\n              RuntimeLoader.callBackQueue.push(callback);\n            } else {\n              callback(RuntimeLoader.runtime);\n            }\n          }; // Provides a runtime instance via a promise\n\n\n          RuntimeLoader.awaitInstance = function () {\n            return new Promise(function (resolve, reject) {\n              return RuntimeLoader.getInstance(function (rive) {\n                return resolve(rive);\n              });\n            });\n          }; // Manually sets the wasm url\n\n\n          RuntimeLoader.setWasmUrl = function (url) {\n            RuntimeLoader.wasmURL = url;\n          }; // Flag to indicate that loading has started/completed\n\n\n          RuntimeLoader.isLoading = false; // List of callbacks for the runtime that come in while loading\n\n          RuntimeLoader.callBackQueue = []; // Path to the Wasm file; default path works for testing only;\n          // if embedded wasm is used then this is never used.\n\n          RuntimeLoader.wasmURL = 'dist/rive.wasm';\n          return RuntimeLoader;\n        }(); // #endregion\n        // #region animations\n        // Wraps animations and instances from the runtime and keeps track of playback\n        // state\n\n\n        var Animation =\n        /** @class */\n        function () {\n          /**\n           * Constructs a new animation\n           * @constructor\n           * @param {any} animation: runtime animation object\n           * @param {any} instance: runtime animation instance object\n           */\n          function Animation(animation, runtime, playing) {\n            this.animation = animation;\n            this.playing = playing;\n            this.loopCount = 0; // Time to which the animation should move to on the next render\n\n            this.scrubTo = null;\n            this.instance = new runtime.LinearAnimationInstance(animation);\n          }\n\n          Object.defineProperty(Animation.prototype, \"name\", {\n            // Returns the animation's name\n            get: function () {\n              return this.animation.name;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Animation.prototype, \"time\", {\n            // Returns the animation's current time\n            get: function () {\n              return this.instance.time;\n            },\n            // Sets the animation's current time\n            set: function (value) {\n              this.instance.time = value;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Animation.prototype, \"loopValue\", {\n            // Returns the animation's loop type\n            get: function () {\n              return this.animation.loopValue;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          /**\n           * Advances the animation by the give time. If the animation needs scrubbing,\n           * time is ignored and the stored scrub value is used.\n           * @param time the time to advance the animation by if no scrubbing required\n           */\n\n          Animation.prototype.advance = function (time) {\n            if (this.scrubTo === null) {\n              this.instance.advance(time);\n            } else {\n              this.instance.time = 0;\n              this.instance.advance(this.scrubTo);\n              this.scrubTo = null;\n            }\n          };\n\n          Object.defineProperty(Animation.prototype, \"needsScrub\", {\n            get: function () {\n              return this.scrubTo !== null;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          /**\n           * Deletes the backing Wasm animation instance; once this is called, this\n           * animation is no more.\n           */\n\n          Animation.prototype.cleanup = function () {\n            this.instance.delete();\n          };\n\n          return Animation;\n        }(); // #endregion\n        // #region state machines\n\n\n        var StateMachineInputType;\n\n        (function (StateMachineInputType) {\n          StateMachineInputType[StateMachineInputType[\"Number\"] = 56] = \"Number\";\n          StateMachineInputType[StateMachineInputType[\"Trigger\"] = 58] = \"Trigger\";\n          StateMachineInputType[StateMachineInputType[\"Boolean\"] = 59] = \"Boolean\";\n        })(StateMachineInputType || (StateMachineInputType = {}));\n        /**\n         * An input for a state machine\n         */\n\n\n        var StateMachineInput =\n        /** @class */\n        function () {\n          function StateMachineInput(type, runtimeInput) {\n            this.type = type;\n            this.runtimeInput = runtimeInput;\n          }\n\n          Object.defineProperty(StateMachineInput.prototype, \"name\", {\n            /**\n             * Returns the name of the input\n             */\n            get: function () {\n              return this.runtimeInput.name;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(StateMachineInput.prototype, \"value\", {\n            /**\n             * Returns the current value of the input\n             */\n            get: function () {\n              return this.runtimeInput.value;\n            },\n\n            /**\n             * Sets the value of the input\n             */\n            set: function (value) {\n              this.runtimeInput.value = value;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          /**\n           * Fires a trigger; does nothing on Number or Boolean input types\n           */\n\n          StateMachineInput.prototype.fire = function () {\n            if (this.type === StateMachineInputType.Trigger) {\n              this.runtimeInput.fire();\n            }\n          };\n\n          return StateMachineInput;\n        }();\n\n        var StateMachine =\n        /** @class */\n        function () {\n          /**\n           * @constructor\n           * @param stateMachine runtime state machine object\n           * @param instance runtime state machine instance object\n           */\n          function StateMachine(stateMachine, runtime, playing) {\n            this.stateMachine = stateMachine;\n            this.playing = playing;\n            /**\n             * Caches the inputs from the runtime\n             */\n\n            this.inputs = [];\n            this.instance = new runtime.StateMachineInstance(stateMachine);\n            this.initInputs(runtime);\n          }\n\n          Object.defineProperty(StateMachine.prototype, \"name\", {\n            get: function () {\n              return this.stateMachine.name;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(StateMachine.prototype, \"statesChanged\", {\n            /**\n             * Returns a list of state names that have changed on this frame\n             */\n            get: function () {\n              var names = [];\n\n              for (var i = 0; i < this.instance.stateChangedCount(); i++) {\n                names.push(this.instance.stateChangedNameByIndex(i));\n              }\n\n              return names;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          /**\n           * Fetches references to the state machine's inputs and caches them\n           * @param runtime an instance of the runtime; needed for the SMIInput types\n           */\n\n          StateMachine.prototype.initInputs = function (runtime) {\n            // Fetch the inputs from the runtime if we don't have them\n            for (var i = 0; i < this.instance.inputCount(); i++) {\n              var input = this.instance.input(i);\n              this.inputs.push(this.mapRuntimeInput(input, runtime));\n            }\n          };\n          /**\n           * Maps a runtime input to it's appropriate type\n           * @param input\n           */\n\n\n          StateMachine.prototype.mapRuntimeInput = function (input, runtime) {\n            if (input.type === runtime.SMIInput.bool) {\n              return new StateMachineInput(StateMachineInputType.Boolean, input.asBool());\n            } else if (input.type === runtime.SMIInput.number) {\n              return new StateMachineInput(StateMachineInputType.Number, input.asNumber());\n            } else if (input.type === runtime.SMIInput.trigger) {\n              return new StateMachineInput(StateMachineInputType.Trigger, input.asTrigger());\n            }\n          };\n          /**\n           * Deletes the backing Wasm state machine instance; once this is called, this\n           * state machine is no more.\n           */\n\n\n          StateMachine.prototype.cleanup = function () {\n            this.instance.delete();\n          };\n\n          return StateMachine;\n        }(); // #endregion\n        // #region animator\n\n        /**\n         * Manages animation\n         */\n\n\n        var Animator =\n        /** @class */\n        function () {\n          /**\n           * Constructs a new animator\n           * @constructor\n           * @param runtime Rive runtime; needed to instance animations & state machines\n           * @param artboard the artboard that holds all animations and state machines\n           * @param animations optional list of animations\n           * @param stateMachines optional list of state machines\n           */\n          function Animator(runtime, artboard, eventManager, animations, stateMachines) {\n            if (animations === void 0) {\n              animations = [];\n            }\n\n            if (stateMachines === void 0) {\n              stateMachines = [];\n            }\n\n            this.runtime = runtime;\n            this.artboard = artboard;\n            this.eventManager = eventManager;\n            this.animations = animations;\n            this.stateMachines = stateMachines;\n          }\n          /**\n           * Adds animations and state machines by their names. If names are shared\n           * between animations & state machines, then the first one found will be\n           * created. Best not to use the same names for these in your Rive file.\n           * @param animatable the name(s) of animations and state machines to add\n           * @returns a list of names of the playing animations and state machines\n           */\n\n\n          Animator.prototype.add = function (animatables, playing, fireEvent) {\n            if (fireEvent === void 0) {\n              fireEvent = true;\n            }\n\n            animatables = mapToStringArray(animatables); // If animatables is empty, play or pause everything\n\n            if (animatables.length === 0) {\n              this.animations.forEach(function (a) {\n                return a.playing = playing;\n              });\n              this.stateMachines.forEach(function (m) {\n                return m.playing = playing;\n              });\n            } else {\n              // Play/pause already instanced items, or create new instances\n              var instancedAnimationNames = this.animations.map(function (a) {\n                return a.name;\n              });\n              var instancedMachineNames = this.stateMachines.map(function (m) {\n                return m.name;\n              });\n\n              for (var i in animatables) {\n                var aIndex = instancedAnimationNames.indexOf(animatables[i]);\n                var mIndex = instancedMachineNames.indexOf(animatables[i]);\n\n                if (aIndex >= 0 || mIndex >= 0) {\n                  if (aIndex >= 0) {\n                    // Animation is instanced, play/pause it\n                    this.animations[aIndex].playing = playing;\n                  } else {\n                    // State machine is instanced, play/pause it\n                    this.stateMachines[mIndex].playing = playing;\n                  }\n                } else {\n                  // Try to create a new animation instance\n                  var anim = this.artboard.animationByName(animatables[i]);\n\n                  if (anim) {\n                    this.animations.push(new Animation(anim, this.runtime, playing));\n                  } else {\n                    // Try to create a new state machine instance\n                    var sm = this.artboard.stateMachineByName(animatables[i]);\n\n                    if (sm) {\n                      this.stateMachines.push(new StateMachine(sm, this.runtime, playing));\n                    }\n                  }\n                }\n              }\n            } // Fire play/paused events for animations\n\n\n            if (fireEvent) {\n              if (playing) {\n                this.eventManager.fire({\n                  type: EventType.Play,\n                  data: this.playing\n                });\n              } else {\n                this.eventManager.fire({\n                  type: EventType.Pause,\n                  data: this.paused\n                });\n              }\n            }\n\n            return playing ? this.playing : this.paused;\n          };\n          /**\n           * Play the named animations/state machines\n           * @param animatables the names of the animations/machines to play; plays all if empty\n           * @returns a list of the playing items\n           */\n\n\n          Animator.prototype.play = function (animatables) {\n            return this.add(animatables, true);\n          };\n          /**\n          * Pauses named animations and state machines, or everything if nothing is\n          * specified\n          * @param animatables names of the animations and state machines to pause\n          * @returns a list of names of the animations and state machines paused\n          */\n\n\n          Animator.prototype.pause = function (animatables) {\n            return this.add(animatables, false);\n          };\n          /**\n           * Set time of named animations\n           * @param animations names of the animations to scrub\n           * @param value time scrub value, a floating point number to which the playhead is jumped\n           * @returns a list of names of the animations that were scrubbed\n           */\n\n\n          Animator.prototype.scrub = function (animatables, value) {\n            var forScrubbing = this.animations.filter(function (a) {\n              return animatables.includes(a.name);\n            });\n            forScrubbing.forEach(function (a) {\n              return a.scrubTo = value;\n            });\n            return forScrubbing.map(function (a) {\n              return a.name;\n            });\n          };\n\n          Object.defineProperty(Animator.prototype, \"playing\", {\n            /**\n             * Returns a list of names of all animations and state machines currently\n             * playing\n             */\n            get: function () {\n              return this.animations.filter(function (a) {\n                return a.playing;\n              }).map(function (a) {\n                return a.name;\n              }).concat(this.stateMachines.filter(function (m) {\n                return m.playing;\n              }).map(function (m) {\n                return m.name;\n              }));\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Animator.prototype, \"paused\", {\n            /**\n             * Returns a list of names of all animations and state machines currently\n             * paused\n             */\n            get: function () {\n              return this.animations.filter(function (a) {\n                return !a.playing;\n              }).map(function (a) {\n                return a.name;\n              }).concat(this.stateMachines.filter(function (m) {\n                return !m.playing;\n              }).map(function (m) {\n                return m.name;\n              }));\n            },\n            enumerable: false,\n            configurable: true\n          });\n          /**\n           * Stops and removes all named animations and state machines\n           * @param animatables animations and state machines to remove\n           * @returns a list of names of removed items\n           */\n\n          Animator.prototype.stop = function (animatables) {\n            var _this = this;\n\n            animatables = mapToStringArray(animatables); // If nothing's specified, wipe them out, all of them\n\n            var removedNames = []; // Stop everything\n\n            if (animatables.length === 0) {\n              removedNames = this.animations.map(function (a) {\n                return a.name;\n              }).concat(this.stateMachines.map(function (m) {\n                return m.name;\n              })); // Clean up before emptying the arrays\n\n              this.animations.forEach(function (a) {\n                return a.cleanup();\n              });\n              this.stateMachines.forEach(function (m) {\n                return m.cleanup();\n              }); // Empty out the arrays\n\n              this.animations.splice(0, this.animations.length);\n              this.stateMachines.splice(0, this.stateMachines.length);\n            } else {\n              // Remove only the named animations/state machines\n              var animationsToRemove = this.animations.filter(function (a) {\n                return animatables.includes(a.name);\n              });\n              animationsToRemove.forEach(function (a) {\n                a.cleanup();\n\n                _this.animations.splice(_this.animations.indexOf(a), 1);\n              });\n              var machinesToRemove = this.stateMachines.filter(function (m) {\n                return animatables.includes(m.name);\n              });\n              machinesToRemove.forEach(function (m) {\n                m.cleanup();\n\n                _this.stateMachines.splice(_this.stateMachines.indexOf(m), 1);\n              });\n              removedNames = animationsToRemove.map(function (a) {\n                return a.name;\n              }).concat(machinesToRemove.map(function (m) {\n                return m.name;\n              }));\n            }\n\n            this.eventManager.fire({\n              type: EventType.Stop,\n              data: removedNames\n            }); // Return the list of animations removed\n\n            return removedNames;\n          };\n\n          Object.defineProperty(Animator.prototype, \"isPlaying\", {\n            /**\n             * Returns true if at least one animation is active\n             */\n            get: function () {\n              return this.animations.reduce(function (acc, curr) {\n                return acc || curr.playing;\n              }, false) || this.stateMachines.reduce(function (acc, curr) {\n                return acc || curr.playing;\n              }, false);\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Animator.prototype, \"isPaused\", {\n            /**\n             * Returns true if all animations are paused and there's at least one animation\n             */\n            get: function () {\n              return !this.isPlaying && (this.animations.length > 0 || this.stateMachines.length > 0);\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Animator.prototype, \"isStopped\", {\n            /**\n             * Returns true if there are no playing or paused animations/state machines\n             */\n            get: function () {\n              return this.animations.length === 0 && this.stateMachines.length === 0;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          /**\n           * If there are no animations or state machines, add the first one found\n           * @returns the name of the animation or state machine instanced\n           */\n\n          Animator.prototype.atLeastOne = function (playing, fireEvent) {\n            if (fireEvent === void 0) {\n              fireEvent = true;\n            }\n\n            var instancedName;\n\n            if (this.animations.length === 0 && this.stateMachines.length === 0) {\n              if (this.artboard.animationCount() > 0) {\n                // Add the first animation\n                this.add([instancedName = this.artboard.animationByIndex(0).name], playing, fireEvent);\n              } else if (this.artboard.stateMachineCount() > 0) {\n                // Add the first state machine\n                this.add([instancedName = this.artboard.stateMachineByIndex(0).name], playing, fireEvent);\n              }\n            }\n\n            return instancedName;\n          };\n          /**\n           * Checks if any animations have looped and if so, fire the appropriate event\n           */\n\n\n          Animator.prototype.handleLooping = function () {\n            for (var _i = 0, _a = this.animations.filter(function (a) {\n              return a.playing;\n            }); _i < _a.length; _i++) {\n              var animation = _a[_i]; // Emit if the animation looped\n\n              if (animation.loopValue === 0 && animation.loopCount) {\n                animation.loopCount = 0; // This is a one-shot; if it has ended, delete the instance\n\n                this.stop(animation.name);\n              } else if (animation.loopValue === 1 && animation.loopCount) {\n                this.eventManager.fire({\n                  type: EventType.Loop,\n                  data: {\n                    animation: animation.name,\n                    type: LoopType.Loop\n                  }\n                });\n                animation.loopCount = 0;\n              } // Wasm indicates a loop at each time the animation\n              // changes direction, so a full loop/lap occurs every\n              // two loop counts\n              else if (animation.loopValue === 2 && animation.loopCount > 1) {\n                this.eventManager.fire({\n                  type: EventType.Loop,\n                  data: {\n                    animation: animation.name,\n                    type: LoopType.PingPong\n                  }\n                });\n                animation.loopCount = 0;\n              }\n            }\n          };\n          /**\n           * Checks if states have changed in state machines and fires a statechange\n           * event\n           */\n\n\n          Animator.prototype.handleStateChanges = function () {\n            var statesChanged = [];\n\n            for (var _i = 0, _a = this.stateMachines.filter(function (sm) {\n              return sm.playing;\n            }); _i < _a.length; _i++) {\n              var stateMachine = _a[_i];\n              statesChanged.push.apply(statesChanged, stateMachine.statesChanged);\n            }\n\n            if (statesChanged.length > 0) {\n              this.eventManager.fire({\n                type: EventType.StateChange,\n                data: statesChanged\n              });\n            }\n          };\n\n          return Animator;\n        }(); // #endregion\n        // #region events\n\n        /**\n         * Supported event types triggered in Rive\n         */\n\n\n        var EventType;\n\n        (function (EventType) {\n          EventType[\"Load\"] = \"load\";\n          EventType[\"LoadError\"] = \"loaderror\";\n          EventType[\"Play\"] = \"play\";\n          EventType[\"Pause\"] = \"pause\";\n          EventType[\"Stop\"] = \"stop\";\n          EventType[\"Loop\"] = \"loop\";\n          EventType[\"Draw\"] = \"draw\";\n          EventType[\"StateChange\"] = \"statechange\";\n        })(EventType || (EventType = {}));\n        /**\n         * Looping types: one-shot, loop, and ping-pong\n         */\n\n\n        var LoopType;\n\n        (function (LoopType) {\n          LoopType[\"OneShot\"] = \"oneshot\";\n          LoopType[\"Loop\"] = \"loop\";\n          LoopType[\"PingPong\"] = \"pingpong\"; // has value 2 in runtime\n        })(LoopType || (LoopType = {})); // Manages Rive events and listeners\n\n\n        var EventManager =\n        /** @class */\n        function () {\n          function EventManager(listeners) {\n            if (listeners === void 0) {\n              listeners = [];\n            }\n\n            this.listeners = listeners;\n          } // Gets listeners of specified type\n\n\n          EventManager.prototype.getListeners = function (type) {\n            return this.listeners.filter(function (e) {\n              return e.type === type;\n            });\n          }; // Adds a listener\n\n\n          EventManager.prototype.add = function (listener) {\n            if (!this.listeners.includes(listener)) {\n              this.listeners.push(listener);\n            }\n          };\n          /**\n           * Removes a listener\n           * @param listener the listener with the callback to be removed\n           */\n\n\n          EventManager.prototype.remove = function (listener) {\n            // We can't simply look for the listener as it'll be a different instance to\n            // one originally subscribed. Find all the listeners of the right type and\n            // then check their callbacks which should match.\n            for (var i = 0; i < this.listeners.length; i++) {\n              var currentListener = this.listeners[i];\n\n              if (currentListener.type === listener.type) {\n                if (currentListener.callback === listener.callback) {\n                  this.listeners.splice(i, 1);\n                  break;\n                }\n              }\n            }\n          };\n          /**\n           * Clears all listeners of specified type, or every listener if no type is\n           * specified\n           * @param type the type of listeners to clear, or all listeners if not\n           * specified\n           */\n\n\n          EventManager.prototype.removeAll = function (type) {\n            var _this = this;\n\n            if (!type) {\n              this.listeners.splice(0, this.listeners.length);\n            } else {\n              this.listeners.filter(function (l) {\n                return l.type === type;\n              }).forEach(function (l) {\n                return _this.remove(l);\n              });\n            }\n          }; // Fires an event\n\n\n          EventManager.prototype.fire = function (event) {\n            var eventListeners = this.getListeners(event.type);\n            eventListeners.forEach(function (listener) {\n              return listener.callback(event);\n            });\n          };\n\n          return EventManager;\n        }(); // Manages a queue of tasks\n\n\n        var TaskQueueManager =\n        /** @class */\n        function () {\n          function TaskQueueManager(eventManager) {\n            this.eventManager = eventManager;\n            this.queue = [];\n          } // Adds a task top the queue\n\n\n          TaskQueueManager.prototype.add = function (task) {\n            this.queue.push(task);\n          }; // Processes all tasks in the queue\n\n\n          TaskQueueManager.prototype.process = function () {\n            while (this.queue.length > 0) {\n              var task = this.queue.shift();\n              task === null || task === void 0 ? void 0 : task.action();\n\n              if (task === null || task === void 0 ? void 0 : task.event) {\n                this.eventManager.fire(task.event);\n              }\n            }\n          };\n\n          return TaskQueueManager;\n        }();\n\n        var Rive =\n        /** @class */\n        function () {\n          function Rive(params) {\n            var _a; // Flag to indicate if the layout has changed; used by the renderer to know\n            // when to align\n\n\n            this._updateLayout = true;\n            /**\n             * Flag to active/deactivate renderer\n             */\n\n            this.isRendererActive = true; // Tracks if a Rive file is loaded\n\n            this.loaded = false;\n            /**\n             * Tracks if a Rive file is loaded; we need this in addition to loaded as some\n             * commands (e.g. contents) can be called as soon as the file is loaded.\n             * However, playback commands need to be queued and run in order once initial\n             * animations and autoplay has been sorted out. This applies to play, pause,\n             * and start.\n             */\n\n            this.readyForPlaying = false; // Runtime artboard\n\n            this.artboard = null;\n            /**\n             * Used be draw to track when a second of active rendering time has passed. Used for debugging purposes\n             */\n\n            this.renderSecondTimer = 0;\n            this.canvas = params.canvas;\n            this.src = params.src;\n            this.buffer = params.buffer;\n            this.layout = (_a = params.layout) !== null && _a !== void 0 ? _a : new Layout(); // Fetch the 2d context from the canvas\n\n            this.ctx = this.canvas.getContext('2d'); // New event management system\n\n            this.eventManager = new EventManager();\n            if (params.onLoad) this.on(EventType.Load, params.onLoad);\n            if (params.onLoadError) this.on(EventType.LoadError, params.onLoadError);\n            if (params.onPlay) this.on(EventType.Play, params.onPlay);\n            if (params.onPause) this.on(EventType.Pause, params.onPause);\n            if (params.onStop) this.on(EventType.Stop, params.onStop);\n            if (params.onLoop) this.on(EventType.Loop, params.onLoop);\n            if (params.onStateChange) this.on(EventType.StateChange, params.onStateChange);\n            /**\n             * @deprecated Use camelCase'd versions instead.\n             */\n\n            if (params.onload && !params.onLoad) this.on(EventType.Load, params.onload);\n            if (params.onloaderror && !params.onLoadError) this.on(EventType.LoadError, params.onloaderror);\n            if (params.onplay && !params.onPlay) this.on(EventType.Play, params.onplay);\n            if (params.onpause && !params.onPause) this.on(EventType.Pause, params.onpause);\n            if (params.onstop && !params.onStop) this.on(EventType.Stop, params.onstop);\n            if (params.onloop && !params.onLoop) this.on(EventType.Loop, params.onloop);\n            if (params.onstatechange && !params.onStateChange) this.on(EventType.StateChange, params.onstatechange); // Hook up the task queue\n\n            this.taskQueue = new TaskQueueManager(this.eventManager);\n            this.init({\n              src: this.src,\n              buffer: this.buffer,\n              autoplay: params.autoplay,\n              animations: params.animations,\n              stateMachines: params.stateMachines,\n              artboard: params.artboard\n            });\n          } // Alternative constructor to build a Rive instance from an interface/object\n\n\n          Rive.new = function (params) {\n            console.warn('This function is deprecated: please use `new Rive({})` instead');\n            return new Rive(params);\n          }; // Initializes the Rive object either from constructor or load()\n\n\n          Rive.prototype.init = function (_a) {\n            var _this = this;\n\n            var src = _a.src,\n                buffer = _a.buffer,\n                animations = _a.animations,\n                stateMachines = _a.stateMachines,\n                artboard = _a.artboard,\n                _b = _a.autoplay,\n                autoplay = _b === void 0 ? false : _b;\n            this.src = src;\n            this.buffer = buffer; // If no source file url specified, it's a bust\n\n            if (!this.src && !this.buffer) {\n              throw new Error(Rive.missingErrorMessage);\n            } // List of animations that should be initialized.\n\n\n            var startingAnimationNames = mapToStringArray(animations); // List of state machines that should be initialized\n\n            var startingStateMachineNames = mapToStringArray(stateMachines); // Ensure loaded is marked as false if loading new file\n\n            this.loaded = false;\n            this.readyForPlaying = false; // Ensure the runtime is loaded\n\n            RuntimeLoader.awaitInstance().then(function (runtime) {\n              _this.runtime = runtime; // Load Rive data from a source uri or a data buffer\n\n              _this.initData(artboard, startingAnimationNames, startingStateMachineNames, autoplay).catch(function (e) {\n                console.error(e);\n              });\n            }).catch(function (e) {\n              console.error(e);\n            });\n          }; // Initializes runtime with Rive data and preps for playing\n\n\n          Rive.prototype.initData = function (artboardName, animationNames, stateMachineNames, autoplay) {\n            var _a;\n\n            return __awaiter(this, void 0, void 0, function () {\n              var _b, _c, msg;\n\n              return __generator(this, function (_d) {\n                switch (_d.label) {\n                  case 0:\n                    if (!this.src) return [3\n                    /*break*/\n                    , 2];\n                    _b = this;\n                    return [4\n                    /*yield*/\n                    , loadRiveFile(this.src)];\n\n                  case 1:\n                    _b.buffer = _d.sent();\n                    _d.label = 2;\n\n                  case 2:\n                    // Load the Rive file\n                    _c = this;\n                    return [4\n                    /*yield*/\n                    , this.runtime.load(new Uint8Array(this.buffer))];\n\n                  case 3:\n                    // Load the Rive file\n                    _c.file = _d.sent();\n\n                    if (this.file) {\n                      // Initialize and draw frame\n                      this.initArtboard(artboardName, animationNames, stateMachineNames, autoplay); // Everything's set up, emit a load event\n\n                      this.loaded = true;\n                      this.eventManager.fire({\n                        type: EventType.Load,\n                        data: (_a = this.src) !== null && _a !== void 0 ? _a : 'buffer'\n                      }); // Flag ready for playback commands and clear the task queue; this order\n                      // is important or it may infinitely recurse\n\n                      this.readyForPlaying = true;\n                      this.taskQueue.process();\n                      this.drawFrame();\n                      return [2\n                      /*return*/\n                      , Promise.resolve()];\n                    } else {\n                      msg = 'Problem loading file; may be corrupt!';\n                      console.warn(msg);\n                      this.eventManager.fire({\n                        type: EventType.LoadError,\n                        data: msg\n                      });\n                      return [2\n                      /*return*/\n                      , Promise.reject(msg)];\n                    }\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }; // Initialize for playback\n\n\n          Rive.prototype.initArtboard = function (artboardName, animationNames, stateMachineNames, autoplay) {\n            // Fetch the artboard\n            var rootArtboard = artboardName ? this.file.artboardByName(artboardName) : this.file.defaultArtboard(); // Check we have a working artboard\n\n            if (!rootArtboard) {\n              var msg = 'Invalid artboard name or no default artboard';\n              console.warn(msg);\n              this.eventManager.fire({\n                type: EventType.LoadError,\n                data: msg\n              });\n              return;\n            } // Instance the artboard\n\n\n            this.artboard = rootArtboard.instance(); // Check that the artboard has at least 1 animation\n\n            if (this.artboard.animationCount() < 1) {\n              var msg = 'Artboard has no animations';\n              this.eventManager.fire({\n                type: EventType.LoadError,\n                data: msg\n              });\n              throw msg;\n            } // Initialize the animator\n\n\n            this.animator = new Animator(this.runtime, this.artboard, this.eventManager); // Get the canvas where you want to render the animation and create a renderer\n\n            this.renderer = new this.runtime.CanvasRenderer(this.ctx); // Initialize the animations; as loaded hasn't happened yet, we need to\n            // suppress firing the play/pause events until the load event has fired. To\n            // do this we tell the animator to suppress firing events, and add event\n            // firing to the task queue.\n\n            var instanceNames;\n\n            if (animationNames.length > 0 || stateMachineNames.length > 0) {\n              instanceNames = animationNames.concat(stateMachineNames);\n              this.animator.add(instanceNames, autoplay, false);\n            } else {\n              instanceNames = [this.animator.atLeastOne(autoplay, false)];\n            } // Queue up firing the playback events\n\n\n            this.taskQueue.add({\n              action: function () {},\n              event: {\n                type: autoplay ? EventType.Play : EventType.Pause,\n                data: instanceNames\n              }\n            });\n          }; // Draws the current artboard frame\n\n\n          Rive.prototype.drawFrame = function () {\n            this.startRendering();\n          };\n          /**\n           * Draw rendering loop; renders animation frames at the correct time interval.\n           * @param time the time at which to render a frame\n           */\n\n\n          Rive.prototype.draw = function (time, onSecond) {\n            // Clear the frameRequestId, as we're now rendering a fresh frame\n            this.frameRequestId = null; // On the first pass, make sure lastTime has a valid value\n\n            if (!this.lastRenderTime) {\n              this.lastRenderTime = time;\n            } // Handle the onSecond callback\n\n\n            this.renderSecondTimer += time - this.lastRenderTime;\n\n            if (this.renderSecondTimer > 5000) {\n              this.renderSecondTimer = 0;\n              onSecond === null || onSecond === void 0 ? void 0 : onSecond();\n            } // Calculate the elapsed time between frames in seconds\n\n\n            var elapsedTime = (time - this.lastRenderTime) / 1000;\n            this.lastRenderTime = time; // Advance non-paused animations by the elapsed number of seconds\n            // Also advance any animations that require scrubbing\n\n            var activeAnimations = this.animator.animations.filter(function (a) {\n              return a.playing || a.needsScrub;\n            }) // The scrubbed animations must be applied first to prevent weird artifacts\n            // if the playing animations conflict with the scrubbed animating attribuates.\n            .sort(function (first, second) {\n              return first.needsScrub ? -1 : 1;\n            });\n\n            for (var _i = 0, activeAnimations_1 = activeAnimations; _i < activeAnimations_1.length; _i++) {\n              var animation = activeAnimations_1[_i];\n              animation.advance(elapsedTime);\n\n              if (animation.instance.didLoop) {\n                animation.loopCount += 1;\n              }\n\n              animation.instance.apply(this.artboard, 1.0);\n            } // Advance non-paused state machines by the elapsed number of seconds\n\n\n            var activeStateMachines = this.animator.stateMachines.filter(function (a) {\n              return a.playing;\n            });\n\n            for (var _a = 0, activeStateMachines_1 = activeStateMachines; _a < activeStateMachines_1.length; _a++) {\n              var stateMachine = activeStateMachines_1[_a];\n              stateMachine.instance.advance(this.artboard, elapsedTime); // stateMachine.instance.apply(this.artboard);\n            } // Once the animations have been applied to the artboard, advance it\n            // by the elapsed time.\n\n\n            this.artboard.advance(elapsedTime); // Update the renderer alignment if necessary\n\n            this.alignRenderer();\n            this.artboard.draw(this.renderer); // Check for any animations that looped\n\n            this.animator.handleLooping(); // Check for any state machines that had a state change\n\n            this.animator.handleStateChanges(); // Calling requestAnimationFrame will rerun draw() at the correct rate:\n            // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations\n\n            if (this.animator.isPlaying) {\n              // Request a new rendering frame\n              this.startRendering();\n            } else if (this.animator.isPaused) {\n              // Reset the end time so on playback it starts at the correct frame\n              this.lastRenderTime = 0;\n            } else if (this.animator.isStopped) {\n              // Reset animation instances, artboard and time\n              // TODO: implement this properly when we have instancing\n              // this.initArtboard();\n              // this.drawFrame();\n              this.lastRenderTime = 0;\n            }\n          };\n          /**\n           * Align the renderer\n           */\n\n\n          Rive.prototype.alignRenderer = function () {\n            // Restore from previous save in case a previous align occurred\n            this.ctx.restore(); // Canvas must be wiped to prevent artifacts\n\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Now save so that future changes to align can restore\n\n            this.ctx.save(); // Align things up safe in the knowledge we can restore if changed\n\n            this.renderer.align(this._layout.runtimeFit(this.runtime), this._layout.runtimeAlignment(this.runtime), {\n              minX: this._layout.minX,\n              minY: this._layout.minY,\n              maxX: this._layout.maxX,\n              maxY: this._layout.maxY\n            }, this.artboard.bounds);\n          };\n          /**\n           * Cleans up any Wasm-generated objects that need to be manually destroyed:\n           * artboard instances, animation instances, state machine instances.\n           *\n           * Once this is called, things will need to be reinitialized or bad things\n           * might happen.\n           */\n\n\n          Rive.prototype.cleanup = function () {\n            this.artboard.delete(); // TODO: delete animation and state machine instances\n          }; // Plays specified animations; if none specified, it unpauses everything.\n\n\n          Rive.prototype.play = function (animationNames, autoplay) {\n            var _this = this;\n\n            animationNames = mapToStringArray(animationNames); // If the file's not loaded, queue up the play\n\n            if (!this.readyForPlaying) {\n              this.taskQueue.add({\n                action: function () {\n                  return _this.play(animationNames, autoplay);\n                }\n              });\n              return;\n            }\n\n            this.animator.play(animationNames);\n            this.startRendering();\n          }; // Pauses specified animations; if none specified, pauses all.\n\n\n          Rive.prototype.pause = function (animationNames) {\n            var _this = this;\n\n            animationNames = mapToStringArray(animationNames); // If the file's not loaded, early out, nothing to pause\n\n            if (!this.readyForPlaying) {\n              this.taskQueue.add({\n                action: function () {\n                  return _this.pause(animationNames);\n                }\n              });\n              return;\n            }\n\n            this.animator.pause(animationNames);\n          };\n\n          Rive.prototype.scrub = function (animationNames, value) {\n            var _this = this;\n\n            animationNames = mapToStringArray(animationNames); // If the file's not loaded, early out, nothing to pause\n\n            if (!this.readyForPlaying) {\n              this.taskQueue.add({\n                action: function () {\n                  return _this.scrub(animationNames, value);\n                }\n              });\n              return;\n            } // Scrub the animation time; we draw a single frame here so that if\n            // nothing's currently playing, the scrubbed animation is still rendered/\n\n\n            this.animator.scrub(animationNames, value || 0);\n            this.drawFrame();\n          }; // Stops specified animations; if none specifies, stops them all.\n\n\n          Rive.prototype.stop = function (animationNames) {\n            var _this = this;\n\n            animationNames = mapToStringArray(animationNames); // If the file's not loaded, early out, nothing to pause\n\n            if (!this.readyForPlaying) {\n              this.taskQueue.add({\n                action: function () {\n                  return _this.stop(animationNames);\n                }\n              });\n              return;\n            }\n\n            this.animator.stop(animationNames);\n          };\n          /**\n           * Resets the animation\n           * @param artboard the name of the artboard, or default if none given\n           * @param animations the names of animations for playback\n           * @param stateMachines the names of state machines for playback\n           * @param autoplay whether to autoplay when reset, defaults to false\n           *\n           */\n\n\n          Rive.prototype.reset = function (params) {\n            var _a; // Get the current artboard, animations, state machines, and playback states\n\n\n            var artBoardName = params === null || params === void 0 ? void 0 : params.artboard;\n            var animationNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.animations);\n            var stateMachineNames = mapToStringArray(params === null || params === void 0 ? void 0 : params.stateMachines);\n            var autoplay = (_a = params === null || params === void 0 ? void 0 : params.autoplay) !== null && _a !== void 0 ? _a : false; // Stop everything and clean up\n\n            this.stop();\n            this.cleanup(); // Reinitialize an artboard instance with the state\n\n            this.initArtboard(artBoardName, animationNames, stateMachineNames, autoplay);\n          }; // Loads a new Rive file, keeping listeners in place\n\n\n          Rive.prototype.load = function (params) {\n            // Stop all animations\n            this.stop(); // Reinitialize\n\n            this.init(params);\n          };\n\n          Object.defineProperty(Rive.prototype, \"layout\", {\n            /**\n             * Returns the current layout. Note that layout should be treated as\n             * immutable. If you want to change the layout, create a new one use the\n             * layout setter\n             */\n            get: function () {\n              return this._layout;\n            },\n            // Sets a new layout\n            set: function (layout) {\n              this._layout = layout; // If the maxX or maxY are 0, then set them to the canvas width and height\n\n              if (!layout.maxX || !layout.maxY) {\n                this.resizeToCanvas();\n              }\n\n              if (this.loaded && !this.animator.isPlaying) {\n                this.drawFrame();\n              }\n            },\n            enumerable: false,\n            configurable: true\n          });\n          /**\n           * Sets the layout bounds to the current canvas size; this is typically called\n           * when the canvas is resized\n           */\n\n          Rive.prototype.resizeToCanvas = function () {\n            this._layout = this.layout.copyWith({\n              minX: 0,\n              minY: 0,\n              maxX: this.canvas.width,\n              maxY: this.canvas.height\n            });\n          };\n\n          Object.defineProperty(Rive.prototype, \"source\", {\n            // Returns the animation source, which may be undefined\n            get: function () {\n              return this.src;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"activeArtboard\", {\n            /**\n             * Returns the name of the active artboard\n             */\n            get: function () {\n              return this.artboard.name;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"animationNames\", {\n            // Returns a list of animation names on the chosen artboard\n            get: function () {\n              // If the file's not loaded, we got nothing to return\n              if (!this.loaded) {\n                return [];\n              }\n\n              var animationNames = [];\n\n              for (var i = 0; i < this.artboard.animationCount(); i++) {\n                animationNames.push(this.artboard.animationByIndex(i).name);\n              }\n\n              return animationNames;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"stateMachineNames\", {\n            /**\n             * Returns a list of state machine names from the current artboard\n             */\n            get: function () {\n              // If the file's not loaded, we got nothing to return\n              if (!this.loaded) {\n                return [];\n              }\n\n              var stateMachineNames = [];\n\n              for (var i = 0; i < this.artboard.stateMachineCount(); i++) {\n                stateMachineNames.push(this.artboard.stateMachineByIndex(i).name);\n              }\n\n              return stateMachineNames;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          /**\n           * Returns the inputs for the specified instanced state machine, or an empty\n           * list if the name is invalid or the state machine is not instanced\n           * @param name the state machine name\n           * @returns the inputs for the named state machine\n           */\n\n          Rive.prototype.stateMachineInputs = function (name) {\n            // If the file's not loaded, early out, nothing to pause\n            if (!this.loaded) {\n              return;\n            }\n\n            var stateMachine = this.animator.stateMachines.find(function (m) {\n              return m.name === name;\n            });\n            return stateMachine === null || stateMachine === void 0 ? void 0 : stateMachine.inputs;\n          };\n\n          Object.defineProperty(Rive.prototype, \"playingStateMachineNames\", {\n            // Returns a list of playing machine names\n            get: function () {\n              // If the file's not loaded, we got nothing to return\n              if (!this.loaded) {\n                return [];\n              }\n\n              return this.animator.stateMachines.filter(function (m) {\n                return m.playing;\n              }).map(function (m) {\n                return m.name;\n              });\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"playingAnimationNames\", {\n            // Returns a list of playing animation names\n            get: function () {\n              // If the file's not loaded, we got nothing to return\n              if (!this.loaded) {\n                return [];\n              }\n\n              return this.animator.animations.filter(function (a) {\n                return a.playing;\n              }).map(function (a) {\n                return a.name;\n              });\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"pausedAnimationNames\", {\n            // Returns a list of paused animation names\n            get: function () {\n              // If the file's not loaded, we got nothing to return\n              if (!this.loaded) {\n                return [];\n              }\n\n              return this.animator.animations.filter(function (a) {\n                return !a.playing;\n              }).map(function (a) {\n                return a.name;\n              });\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"pausedStateMachineNames\", {\n            /**\n             *  Returns a list of paused machine names\n             * @returns a list of state machine names that are paused\n             */\n            get: function () {\n              // If the file's not loaded, we got nothing to return\n              if (!this.loaded) {\n                return [];\n              }\n\n              return this.animator.stateMachines.filter(function (m) {\n                return !m.playing;\n              }).map(function (m) {\n                return m.name;\n              });\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"isPlaying\", {\n            /**\n             * @returns true if any animation is playing\n             */\n            get: function () {\n              return this.animator.isPlaying;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"isPaused\", {\n            /**\n             * @returns true if all instanced animations are paused\n             */\n            get: function () {\n              return this.animator.isPaused;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"isStopped\", {\n            /**\n             * @returns true if no animations are playing or paused\n             */\n            get: function () {\n              return this.animator.isStopped;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          Object.defineProperty(Rive.prototype, \"bounds\", {\n            /**\n             * @returns the bounds of the current artboard, or undefined if the artboard\n             * isn't loaded yet.\n             */\n            get: function () {\n              return this.artboard ? this.artboard.bounds : undefined;\n            },\n            enumerable: false,\n            configurable: true\n          });\n          /**\n           * Subscribe to Rive-generated events\n           * @param type the type of event to subscribe to\n           * @param callback callback to fire when the event occurs\n           */\n\n          Rive.prototype.on = function (type, callback) {\n            this.eventManager.add({\n              type: type,\n              callback: callback\n            });\n          };\n          /**\n           * Unsubscribes from a Rive-generated event\n           * @param callback the callback to unsubscribe from\n           */\n\n\n          Rive.prototype.unsubscribe = function (type, callback) {\n            this.eventManager.remove({\n              type: type,\n              callback: callback\n            });\n          };\n          /**\n           * Unsubscribes all listeners from an event type, or everything if no type is\n           * given\n           * @param type the type of event to unsubscribe from, or all types if\n           * undefined\n           */\n\n\n          Rive.prototype.unsubscribeAll = function (type) {\n            this.eventManager.removeAll(type);\n          };\n          /**\n           * Stops the rendering loop; this is different from pausing in that it doesn't\n           * change the state of any animation. It stops rendering from occurring. This\n           * is designed for situations such as when Rive isn't visible.\n           *\n           * The only way to start rendering again is to call `startRendering`.\n           * Animations that are marked as playing will start from the position that\n           * they would have been at if rendering had not been stopped.\n           */\n\n\n          Rive.prototype.stopRendering = function () {\n            if (this.loaded && this.frameRequestId) {\n              cancelAnimationFrame(this.frameRequestId);\n              this.frameRequestId = null;\n            }\n          };\n          /**\n           * Starts the rendering loop if it has been previously stopped. If the\n           * renderer is already active, then this will have zero effect.\n           */\n\n\n          Rive.prototype.startRendering = function () {\n            if (this.loaded && !this.frameRequestId) {\n              this.frameRequestId = requestAnimationFrame(this.draw.bind(this));\n            }\n          };\n\n          Object.defineProperty(Rive.prototype, \"contents\", {\n            /**\n             * Returns the contents of a Rive file: the artboards, animations, and state machines\n             */\n            get: function () {\n              if (!this.loaded) {\n                return undefined;\n              }\n\n              var riveContents = {\n                artboards: []\n              };\n\n              for (var i = 0; i < this.file.artboardCount(); i++) {\n                var artboard = this.file.artboardByIndex(i);\n                var artboardContents = {\n                  name: artboard.name,\n                  animations: [],\n                  stateMachines: []\n                };\n\n                for (var j = 0; j < artboard.animationCount(); j++) {\n                  var animation = artboard.animationByIndex(j);\n                  artboardContents.animations.push(animation.name);\n                }\n\n                for (var k = 0; k < artboard.stateMachineCount(); k++) {\n                  var stateMachine = artboard.stateMachineByIndex(k);\n                  var name_1 = stateMachine.name;\n                  var instance = new this.runtime.StateMachineInstance(stateMachine);\n                  var inputContents = [];\n\n                  for (var l = 0; l < instance.inputCount(); l++) {\n                    var input = instance.input(l);\n                    inputContents.push({\n                      name: input.name,\n                      type: input.type\n                    });\n                  }\n\n                  artboardContents.stateMachines.push({\n                    name: name_1,\n                    inputs: inputContents\n                  });\n                }\n\n                riveContents.artboards.push(artboardContents);\n              }\n\n              return riveContents;\n            },\n            enumerable: false,\n            configurable: true\n          }); // Error message for missing source or buffer\n\n          Rive.missingErrorMessage = 'Rive source file or data buffer required';\n          return Rive;\n        }(); // Loads Rive data from a URI via fetch.\n\n\n        var loadRiveFile = function (src) {\n          return __awaiter(void 0, void 0, void 0, function () {\n            var req, res, buffer;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  req = new Request(src);\n                  return [4\n                  /*yield*/\n                  , fetch(req)];\n\n                case 1:\n                  res = _a.sent();\n                  return [4\n                  /*yield*/\n                  , res.arrayBuffer()];\n\n                case 2:\n                  buffer = _a.sent();\n                  return [2\n                  /*return*/\n                  , buffer];\n              }\n            });\n          });\n        }; // #endregion\n        // #region utility functions\n\n        /*\n         * Utility function to ensure an object is a string array\n         */\n\n\n        var mapToStringArray = function (obj) {\n          if (typeof obj === 'string') {\n            return [obj];\n          } else if (obj instanceof Array) {\n            return obj;\n          } // If obj is undefined, return empty array\n\n\n          return [];\n        }; // #endregion\n        // #region testing utilities\n        // Exports to only be used for tests\n\n\n        var Testing = {\n          EventManager: EventManager,\n          TaskQueueManager: TaskQueueManager\n        }; // #endregion\n      })();\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    })()\n  );\n});","map":{"version":3,"sources":["webpack://rive/webpack/universalModuleDefinition","webpack://rive/src/rive_canvas.js","webpack://rive/ignored|/home/runner/work/rive-wasm/rive-wasm/js/src|path","webpack://rive/webpack/bootstrap","webpack:/rive/webpack/runtime/define property getters","webpack:/rive/webpack/runtime/hasOwnProperty shorthand","webpack:/rive/webpack/runtime/make namespace object","webpack://rive/src/rive.ts"],"names":[],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"rive\"] = factory();\n\telse\n\t\troot[\"rive\"] = factory();\n})(this, function() {\nreturn ","\nvar Rive = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(Rive) {\n  Rive = Rive || {};\n\nnull;\n\nvar Module = typeof Rive !== \"undefined\" ? Rive : {};\n\nvar readyPromiseResolve, readyPromiseReject;\n\nModule[\"ready\"] = new Promise(function(resolve, reject) {\n readyPromiseResolve = resolve;\n readyPromiseReject = reject;\n});\n\nfunction makeMatrix(m2d) {\n const m = new DOMMatrix();\n m.a = m2d.xx;\n m.b = m2d.xy;\n m.c = m2d.yx;\n m.d = m2d.yy;\n m.e = m2d.tx;\n m.f = m2d.ty;\n return m;\n}\n\nModule.onRuntimeInitialized = function() {\n const RenderPaintStyle = Module.RenderPaintStyle;\n const FillRule = Module.FillRule;\n const RenderPath = Module.RenderPath;\n const RenderPaint = Module.RenderPaint;\n const Renderer = Module.Renderer;\n const StrokeCap = Module.StrokeCap;\n const StrokeJoin = Module.StrokeJoin;\n const BlendMode = Module.BlendMode;\n const fill = RenderPaintStyle.fill;\n const stroke = RenderPaintStyle.stroke;\n const evenOdd = FillRule.evenOdd;\n const nonZero = FillRule.nonZero;\n var CanvasRenderPath = RenderPath.extend(\"CanvasRenderPath\", {\n  __construct: function() {\n   this.__parent.__construct.call(this);\n   this._path2D = new Path2D();\n  },\n  reset: function() {\n   this._path2D = new Path2D();\n  },\n  addPath: function(path, m2d) {\n   this._path2D.addPath(path._path2D, makeMatrix(m2d));\n  },\n  fillRule: function(fillRule) {\n   this._fillRule = fillRule;\n  },\n  moveTo: function(x, y) {\n   this._path2D.moveTo(x, y);\n  },\n  lineTo: function(x, y) {\n   this._path2D.lineTo(x, y);\n  },\n  cubicTo: function(ox, oy, ix, iy, x, y) {\n   this._path2D.bezierCurveTo(ox, oy, ix, iy, x, y);\n  },\n  close: function() {\n   this._path2D.closePath();\n  }\n });\n function _colorStyle(value) {\n  return \"rgba(\" + ((16711680 & value) >>> 16) + \",\" + ((65280 & value) >>> 8) + \",\" + ((255 & value) >>> 0) + \",\" + ((4278190080 & value) >>> 24) / 255 + \")\";\n }\n var CanvasRenderPaint = RenderPaint.extend(\"CanvasRenderPaint\", {\n  color: function(value) {\n   this._value = _colorStyle(value);\n  },\n  thickness: function(value) {\n   this._thickness = value;\n  },\n  join: function(value) {\n   switch (value) {\n   case StrokeJoin.miter:\n    this._join = \"miter\";\n    break;\n\n   case StrokeJoin.round:\n    this._join = \"round\";\n    break;\n\n   case StrokeJoin.bevel:\n    this._join = \"bevel\";\n    break;\n   }\n  },\n  cap: function(value) {\n   switch (value) {\n   case StrokeCap.butt:\n    this._cap = \"butt\";\n    break;\n\n   case StrokeCap.round:\n    this._cap = \"round\";\n    break;\n\n   case StrokeCap.square:\n    this._cap = \"square\";\n    break;\n   }\n  },\n  style: function(value) {\n   this._style = value;\n  },\n  blendMode: function(value) {\n   switch (value) {\n   case BlendMode.srcOver:\n    this._blend = \"source-over\";\n    break;\n\n   case BlendMode.screen:\n    this._blend = \"screen\";\n    break;\n\n   case BlendMode.overlay:\n    this._blend = \"overlay\";\n    break;\n\n   case BlendMode.darken:\n    this._blend = \"darken\";\n    break;\n\n   case BlendMode.lighten:\n    this._blend = \"lighten\";\n    break;\n\n   case BlendMode.colorDodge:\n    this._blend = \"color-dodge\";\n    break;\n\n   case BlendMode.colorBurn:\n    this._blend = \"color-burn\";\n    break;\n\n   case BlendMode.hardLight:\n    this._blend = \"hard-light\";\n    break;\n\n   case BlendMode.softLight:\n    this._blend = \"soft-light\";\n    break;\n\n   case BlendMode.difference:\n    this._blend = \"difference\";\n    break;\n\n   case BlendMode.exclusion:\n    this._blend = \"exclusion\";\n    break;\n\n   case BlendMode.multiply:\n    this._blend = \"multiply\";\n    break;\n\n   case BlendMode.hue:\n    this._blend = \"hue\";\n    break;\n\n   case BlendMode.saturation:\n    this._blend = \"saturation\";\n    break;\n\n   case BlendMode.color:\n    this._blend = \"color\";\n    break;\n\n   case BlendMode.luminosity:\n    this._blend = \"luminosity\";\n    break;\n   }\n  },\n  linearGradient: function(sx, sy, ex, ey) {\n   this._gradient = {\n    sx: sx,\n    sy: sy,\n    ex: ex,\n    ey: ey,\n    stops: []\n   };\n  },\n  radialGradient: function(sx, sy, ex, ey) {\n   this._gradient = {\n    sx: sx,\n    sy: sy,\n    ex: ex,\n    ey: ey,\n    stops: [],\n    isRadial: true\n   };\n  },\n  addStop: function(color, stop) {\n   this._gradient.stops.push({\n    color: color,\n    stop: stop\n   });\n  },\n  completeGradient: function() {},\n  draw: function(ctx, path) {\n   let _style = this._style;\n   let _value = this._value;\n   let _gradient = this._gradient;\n   let _blend = this._blend;\n   ctx.globalCompositeOperation = _blend;\n   if (_gradient != null) {\n    const sx = _gradient.sx;\n    const sy = _gradient.sy;\n    const ex = _gradient.ex;\n    const ey = _gradient.ey;\n    const stops = _gradient.stops;\n    if (_gradient.isRadial) {\n     var dx = ex - sx;\n     var dy = ey - sy;\n     var radius = Math.sqrt(dx * dx + dy * dy);\n     _value = ctx.createRadialGradient(sx, sy, 0, sx, sy, radius);\n    } else {\n     _value = ctx.createLinearGradient(sx, sy, ex, ey);\n    }\n    for (let i = 0, l = stops.length; i < l; i++) {\n     const value = stops[i];\n     const stop = value.stop;\n     const color = value.color;\n     _value.addColorStop(stop, _colorStyle(color));\n    }\n    this._value = _value;\n    this._gradient = null;\n   }\n   switch (_style) {\n   case stroke:\n    ctx.strokeStyle = _value;\n    ctx.lineWidth = this._thickness;\n    ctx.lineCap = this._cap;\n    ctx.lineJoin = this._join;\n    ctx.stroke(path._path2D);\n    break;\n\n   case fill:\n    ctx.fillStyle = _value;\n    ctx.fill(path._path2D, path._fillRule === evenOdd ? \"evenodd\" : \"nonzero\");\n    break;\n   }\n  }\n });\n Module.CanvasRenderer = Renderer.extend(\"Renderer\", {\n  __construct: function(ctx) {\n   this.__parent.__construct.call(this);\n   this._ctx = ctx;\n  },\n  save: function() {\n   this._ctx.save();\n  },\n  restore: function() {\n   this._ctx.restore();\n  },\n  transform: function(matrix) {\n   this._ctx.transform(matrix.xx, matrix.xy, matrix.yx, matrix.yy, matrix.tx, matrix.ty);\n  },\n  drawPath: function(path, paint) {\n   paint.draw(this._ctx, path);\n  },\n  clipPath: function(path) {\n   this._ctx.clip(path._path2D, path._fillRule === evenOdd ? \"evenodd\" : \"nonzero\");\n  }\n });\n Module.renderFactory = {\n  makeRenderPaint: function() {\n   return new CanvasRenderPaint();\n  },\n  makeRenderPath: function() {\n   return new CanvasRenderPath();\n  }\n };\n};\n\nvar moduleOverrides = {};\n\nvar key;\n\nfor (key in Module) {\n if (Module.hasOwnProperty(key)) {\n  moduleOverrides[key] = Module[key];\n }\n}\n\nvar arguments_ = [];\n\nvar thisProgram = \"./this.program\";\n\nvar quit_ = function(status, toThrow) {\n throw toThrow;\n};\n\nvar ENVIRONMENT_IS_WEB = false;\n\nvar ENVIRONMENT_IS_WORKER = false;\n\nvar ENVIRONMENT_IS_NODE = false;\n\nvar ENVIRONMENT_IS_SHELL = false;\n\nENVIRONMENT_IS_WEB = typeof window === \"object\";\n\nENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n\nENVIRONMENT_IS_NODE = typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node === \"string\";\n\nENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\nvar scriptDirectory = \"\";\n\nfunction locateFile(path) {\n if (Module[\"locateFile\"]) {\n  return Module[\"locateFile\"](path, scriptDirectory);\n }\n return scriptDirectory + path;\n}\n\nvar read_, readAsync, readBinary, setWindowTitle;\n\nvar nodeFS;\n\nvar nodePath;\n\nif (ENVIRONMENT_IS_NODE) {\n if (ENVIRONMENT_IS_WORKER) {\n  scriptDirectory = require(\"path\").dirname(scriptDirectory) + \"/\";\n } else {\n  scriptDirectory = __dirname + \"/\";\n }\n read_ = function shell_read(filename, binary) {\n  var ret = tryParseAsDataURI(filename);\n  if (ret) {\n   return binary ? ret : ret.toString();\n  }\n  if (!nodeFS) nodeFS = require(\"fs\");\n  if (!nodePath) nodePath = require(\"path\");\n  filename = nodePath[\"normalize\"](filename);\n  return nodeFS[\"readFileSync\"](filename, binary ? null : \"utf8\");\n };\n readBinary = function readBinary(filename) {\n  var ret = read_(filename, true);\n  if (!ret.buffer) {\n   ret = new Uint8Array(ret);\n  }\n  assert(ret.buffer);\n  return ret;\n };\n if (process[\"argv\"].length > 1) {\n  thisProgram = process[\"argv\"][1].replace(/\\\\/g, \"/\");\n }\n arguments_ = process[\"argv\"].slice(2);\n process[\"on\"](\"uncaughtException\", function(ex) {\n  if (!(ex instanceof ExitStatus)) {\n   throw ex;\n  }\n });\n process[\"on\"](\"unhandledRejection\", abort);\n quit_ = function(status) {\n  process[\"exit\"](status);\n };\n Module[\"inspect\"] = function() {\n  return \"[Emscripten Module object]\";\n };\n} else if (ENVIRONMENT_IS_SHELL) {\n if (typeof read != \"undefined\") {\n  read_ = function shell_read(f) {\n   var data = tryParseAsDataURI(f);\n   if (data) {\n    return intArrayToString(data);\n   }\n   return read(f);\n  };\n }\n readBinary = function readBinary(f) {\n  var data;\n  data = tryParseAsDataURI(f);\n  if (data) {\n   return data;\n  }\n  if (typeof readbuffer === \"function\") {\n   return new Uint8Array(readbuffer(f));\n  }\n  data = read(f, \"binary\");\n  assert(typeof data === \"object\");\n  return data;\n };\n if (typeof scriptArgs != \"undefined\") {\n  arguments_ = scriptArgs;\n } else if (typeof arguments != \"undefined\") {\n  arguments_ = arguments;\n }\n if (typeof quit === \"function\") {\n  quit_ = function(status) {\n   quit(status);\n  };\n }\n if (typeof print !== \"undefined\") {\n  if (typeof console === \"undefined\") console = {};\n  console.log = print;\n  console.warn = console.error = typeof printErr !== \"undefined\" ? printErr : print;\n }\n} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n if (ENVIRONMENT_IS_WORKER) {\n  scriptDirectory = self.location.href;\n } else if (typeof document !== \"undefined\" && document.currentScript) {\n  scriptDirectory = document.currentScript.src;\n }\n if (_scriptDir) {\n  scriptDirectory = _scriptDir;\n }\n if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf(\"/\") + 1);\n } else {\n  scriptDirectory = \"\";\n }\n {\n  read_ = function(url) {\n   try {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n    xhr.send(null);\n    return xhr.responseText;\n   } catch (err) {\n    var data = tryParseAsDataURI(url);\n    if (data) {\n     return intArrayToString(data);\n    }\n    throw err;\n   }\n  };\n  if (ENVIRONMENT_IS_WORKER) {\n   readBinary = function(url) {\n    try {\n     var xhr = new XMLHttpRequest();\n     xhr.open(\"GET\", url, false);\n     xhr.responseType = \"arraybuffer\";\n     xhr.send(null);\n     return new Uint8Array(xhr.response);\n    } catch (err) {\n     var data = tryParseAsDataURI(url);\n     if (data) {\n      return data;\n     }\n     throw err;\n    }\n   };\n  }\n  readAsync = function(url, onload, onerror) {\n   var xhr = new XMLHttpRequest();\n   xhr.open(\"GET\", url, true);\n   xhr.responseType = \"arraybuffer\";\n   xhr.onload = function() {\n    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n     onload(xhr.response);\n     return;\n    }\n    var data = tryParseAsDataURI(url);\n    if (data) {\n     onload(data.buffer);\n     return;\n    }\n    onerror();\n   };\n   xhr.onerror = onerror;\n   xhr.send(null);\n  };\n }\n setWindowTitle = function(title) {\n  document.title = title;\n };\n} else {}\n\nvar out = Module[\"print\"] || console.log.bind(console);\n\nvar err = Module[\"printErr\"] || console.warn.bind(console);\n\nfor (key in moduleOverrides) {\n if (moduleOverrides.hasOwnProperty(key)) {\n  Module[key] = moduleOverrides[key];\n }\n}\n\nmoduleOverrides = null;\n\nif (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n\nif (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n\nif (Module[\"quit\"]) quit_ = Module[\"quit\"];\n\nvar tempRet0 = 0;\n\nvar setTempRet0 = function(value) {\n tempRet0 = value;\n};\n\nvar wasmBinary;\n\nif (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n\nvar noExitRuntime = Module[\"noExitRuntime\"] || true;\n\nif (typeof WebAssembly !== \"object\") {\n abort(\"no native wasm support detected\");\n}\n\nvar wasmMemory;\n\nvar ABORT = false;\n\nvar EXITSTATUS;\n\nfunction assert(condition, text) {\n if (!condition) {\n  abort(\"Assertion failed: \" + text);\n }\n}\n\nvar UTF8Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n\nfunction UTF8ArrayToString(heap, idx, maxBytesToRead) {\n var endIdx = idx + maxBytesToRead;\n var endPtr = idx;\n while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {\n  return UTF8Decoder.decode(heap.subarray(idx, endPtr));\n } else {\n  var str = \"\";\n  while (idx < endPtr) {\n   var u0 = heap[idx++];\n   if (!(u0 & 128)) {\n    str += String.fromCharCode(u0);\n    continue;\n   }\n   var u1 = heap[idx++] & 63;\n   if ((u0 & 224) == 192) {\n    str += String.fromCharCode((u0 & 31) << 6 | u1);\n    continue;\n   }\n   var u2 = heap[idx++] & 63;\n   if ((u0 & 240) == 224) {\n    u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n   } else {\n    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;\n   }\n   if (u0 < 65536) {\n    str += String.fromCharCode(u0);\n   } else {\n    var ch = u0 - 65536;\n    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n   }\n  }\n }\n return str;\n}\n\nfunction UTF8ToString(ptr, maxBytesToRead) {\n return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n}\n\nfunction stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n if (!(maxBytesToWrite > 0)) return 0;\n var startIdx = outIdx;\n var endIdx = outIdx + maxBytesToWrite - 1;\n for (var i = 0; i < str.length; ++i) {\n  var u = str.charCodeAt(i);\n  if (u >= 55296 && u <= 57343) {\n   var u1 = str.charCodeAt(++i);\n   u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n  }\n  if (u <= 127) {\n   if (outIdx >= endIdx) break;\n   heap[outIdx++] = u;\n  } else if (u <= 2047) {\n   if (outIdx + 1 >= endIdx) break;\n   heap[outIdx++] = 192 | u >> 6;\n   heap[outIdx++] = 128 | u & 63;\n  } else if (u <= 65535) {\n   if (outIdx + 2 >= endIdx) break;\n   heap[outIdx++] = 224 | u >> 12;\n   heap[outIdx++] = 128 | u >> 6 & 63;\n   heap[outIdx++] = 128 | u & 63;\n  } else {\n   if (outIdx + 3 >= endIdx) break;\n   heap[outIdx++] = 240 | u >> 18;\n   heap[outIdx++] = 128 | u >> 12 & 63;\n   heap[outIdx++] = 128 | u >> 6 & 63;\n   heap[outIdx++] = 128 | u & 63;\n  }\n }\n heap[outIdx] = 0;\n return outIdx - startIdx;\n}\n\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n}\n\nfunction lengthBytesUTF8(str) {\n var len = 0;\n for (var i = 0; i < str.length; ++i) {\n  var u = str.charCodeAt(i);\n  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n  if (u <= 127) ++len; else if (u <= 2047) len += 2; else if (u <= 65535) len += 3; else len += 4;\n }\n return len;\n}\n\nvar UTF16Decoder = typeof TextDecoder !== \"undefined\" ? new TextDecoder(\"utf-16le\") : undefined;\n\nfunction UTF16ToString(ptr, maxBytesToRead) {\n var endPtr = ptr;\n var idx = endPtr >> 1;\n var maxIdx = idx + maxBytesToRead / 2;\n while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;\n endPtr = idx << 1;\n if (endPtr - ptr > 32 && UTF16Decoder) {\n  return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n } else {\n  var str = \"\";\n  for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {\n   var codeUnit = HEAP16[ptr + i * 2 >> 1];\n   if (codeUnit == 0) break;\n   str += String.fromCharCode(codeUnit);\n  }\n  return str;\n }\n}\n\nfunction stringToUTF16(str, outPtr, maxBytesToWrite) {\n if (maxBytesToWrite === undefined) {\n  maxBytesToWrite = 2147483647;\n }\n if (maxBytesToWrite < 2) return 0;\n maxBytesToWrite -= 2;\n var startPtr = outPtr;\n var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;\n for (var i = 0; i < numCharsToWrite; ++i) {\n  var codeUnit = str.charCodeAt(i);\n  HEAP16[outPtr >> 1] = codeUnit;\n  outPtr += 2;\n }\n HEAP16[outPtr >> 1] = 0;\n return outPtr - startPtr;\n}\n\nfunction lengthBytesUTF16(str) {\n return str.length * 2;\n}\n\nfunction UTF32ToString(ptr, maxBytesToRead) {\n var i = 0;\n var str = \"\";\n while (!(i >= maxBytesToRead / 4)) {\n  var utf32 = HEAP32[ptr + i * 4 >> 2];\n  if (utf32 == 0) break;\n  ++i;\n  if (utf32 >= 65536) {\n   var ch = utf32 - 65536;\n   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n  } else {\n   str += String.fromCharCode(utf32);\n  }\n }\n return str;\n}\n\nfunction stringToUTF32(str, outPtr, maxBytesToWrite) {\n if (maxBytesToWrite === undefined) {\n  maxBytesToWrite = 2147483647;\n }\n if (maxBytesToWrite < 4) return 0;\n var startPtr = outPtr;\n var endPtr = startPtr + maxBytesToWrite - 4;\n for (var i = 0; i < str.length; ++i) {\n  var codeUnit = str.charCodeAt(i);\n  if (codeUnit >= 55296 && codeUnit <= 57343) {\n   var trailSurrogate = str.charCodeAt(++i);\n   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;\n  }\n  HEAP32[outPtr >> 2] = codeUnit;\n  outPtr += 4;\n  if (outPtr + 4 > endPtr) break;\n }\n HEAP32[outPtr >> 2] = 0;\n return outPtr - startPtr;\n}\n\nfunction lengthBytesUTF32(str) {\n var len = 0;\n for (var i = 0; i < str.length; ++i) {\n  var codeUnit = str.charCodeAt(i);\n  if (codeUnit >= 55296 && codeUnit <= 57343) ++i;\n  len += 4;\n }\n return len;\n}\n\nfunction alignUp(x, multiple) {\n if (x % multiple > 0) {\n  x += multiple - x % multiple;\n }\n return x;\n}\n\nvar buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\nfunction updateGlobalBufferAndViews(buf) {\n buffer = buf;\n Module[\"HEAP8\"] = HEAP8 = new Int8Array(buf);\n Module[\"HEAP16\"] = HEAP16 = new Int16Array(buf);\n Module[\"HEAP32\"] = HEAP32 = new Int32Array(buf);\n Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buf);\n Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buf);\n Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buf);\n Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buf);\n Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buf);\n}\n\nvar INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 16777216;\n\nvar wasmTable;\n\nvar __ATPRERUN__ = [];\n\nvar __ATINIT__ = [];\n\nvar __ATMAIN__ = [];\n\nvar __ATPOSTRUN__ = [];\n\nvar runtimeInitialized = false;\n\nfunction preRun() {\n if (Module[\"preRun\"]) {\n  if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [ Module[\"preRun\"] ];\n  while (Module[\"preRun\"].length) {\n   addOnPreRun(Module[\"preRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction initRuntime() {\n runtimeInitialized = true;\n callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction preMain() {\n callRuntimeCallbacks(__ATMAIN__);\n}\n\nfunction postRun() {\n if (Module[\"postRun\"]) {\n  if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [ Module[\"postRun\"] ];\n  while (Module[\"postRun\"].length) {\n   addOnPostRun(Module[\"postRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n __ATINIT__.unshift(cb);\n}\n\nfunction addOnPostRun(cb) {\n __ATPOSTRUN__.unshift(cb);\n}\n\nvar runDependencies = 0;\n\nvar runDependencyWatcher = null;\n\nvar dependenciesFulfilled = null;\n\nfunction addRunDependency(id) {\n runDependencies++;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n}\n\nfunction removeRunDependency(id) {\n runDependencies--;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n if (runDependencies == 0) {\n  if (runDependencyWatcher !== null) {\n   clearInterval(runDependencyWatcher);\n   runDependencyWatcher = null;\n  }\n  if (dependenciesFulfilled) {\n   var callback = dependenciesFulfilled;\n   dependenciesFulfilled = null;\n   callback();\n  }\n }\n}\n\nModule[\"preloadedImages\"] = {};\n\nModule[\"preloadedAudios\"] = {};\n\nfunction abort(what) {\n if (Module[\"onAbort\"]) {\n  Module[\"onAbort\"](what);\n }\n what += \"\";\n err(what);\n ABORT = true;\n EXITSTATUS = 1;\n what = \"abort(\" + what + \"). Build with -s ASSERTIONS=1 for more info.\";\n var e = new WebAssembly.RuntimeError(what);\n readyPromiseReject(e);\n throw e;\n}\n\nfunction hasPrefix(str, prefix) {\n return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;\n}\n\nvar dataURIPrefix = \"data:application/octet-stream;base64,\";\n\nfunction isDataURI(filename) {\n return hasPrefix(filename, dataURIPrefix);\n}\n\nvar fileURIPrefix = \"file://\";\n\nfunction isFileURI(filename) {\n return hasPrefix(filename, fileURIPrefix);\n}\n\nvar wasmBinaryFile = \"data:application/octet-stream;base64,\";\n\nif (!isDataURI(wasmBinaryFile)) {\n wasmBinaryFile = locateFile(wasmBinaryFile);\n}\n\nfunction getBinary(file) {\n try {\n  if (file == wasmBinaryFile && wasmBinary) {\n   return new Uint8Array(wasmBinary);\n  }\n  var binary = tryParseAsDataURI(file);\n  if (binary) {\n   return binary;\n  }\n  if (readBinary) {\n   return readBinary(file);\n  } else {\n   throw \"both async and sync fetching of the wasm failed\";\n  }\n } catch (err) {\n  abort(err);\n }\n}\n\nfunction getBinaryPromise() {\n if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n  if (typeof fetch === \"function\" && !isFileURI(wasmBinaryFile)) {\n   return fetch(wasmBinaryFile, {\n    credentials: \"same-origin\"\n   }).then(function(response) {\n    if (!response[\"ok\"]) {\n     throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n    }\n    return response[\"arrayBuffer\"]();\n   }).catch(function() {\n    return getBinary(wasmBinaryFile);\n   });\n  } else {\n   if (readAsync) {\n    return new Promise(function(resolve, reject) {\n     readAsync(wasmBinaryFile, function(response) {\n      resolve(new Uint8Array(response));\n     }, reject);\n    });\n   }\n  }\n }\n return Promise.resolve().then(function() {\n  return getBinary(wasmBinaryFile);\n });\n}\n\nfunction createWasm() {\n var info = {\n  \"a\": asmLibraryArg\n };\n function receiveInstance(instance, module) {\n  var exports = instance.exports;\n  Module[\"asm\"] = exports;\n  wasmMemory = Module[\"asm\"][\"M\"];\n  updateGlobalBufferAndViews(wasmMemory.buffer);\n  wasmTable = Module[\"asm\"][\"O\"];\n  addOnInit(Module[\"asm\"][\"N\"]);\n  removeRunDependency(\"wasm-instantiate\");\n }\n addRunDependency(\"wasm-instantiate\");\n function receiveInstantiatedSource(output) {\n  receiveInstance(output[\"instance\"]);\n }\n function instantiateArrayBuffer(receiver) {\n  return getBinaryPromise().then(function(binary) {\n   var result = WebAssembly.instantiate(binary, info);\n   return result;\n  }).then(receiver, function(reason) {\n   err(\"failed to asynchronously prepare wasm: \" + reason);\n   abort(reason);\n  });\n }\n function instantiateAsync() {\n  if (!wasmBinary && typeof WebAssembly.instantiateStreaming === \"function\" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === \"function\") {\n   return fetch(wasmBinaryFile, {\n    credentials: \"same-origin\"\n   }).then(function(response) {\n    var result = WebAssembly.instantiateStreaming(response, info);\n    return result.then(receiveInstantiatedSource, function(reason) {\n     err(\"wasm streaming compile failed: \" + reason);\n     err(\"falling back to ArrayBuffer instantiation\");\n     return instantiateArrayBuffer(receiveInstantiatedSource);\n    });\n   });\n  } else {\n   return instantiateArrayBuffer(receiveInstantiatedSource);\n  }\n }\n if (Module[\"instantiateWasm\"]) {\n  try {\n   var exports = Module[\"instantiateWasm\"](info, receiveInstance);\n   return exports;\n  } catch (e) {\n   err(\"Module.instantiateWasm callback failed with error: \" + e);\n   return false;\n  }\n }\n instantiateAsync().catch(readyPromiseReject);\n return {};\n}\n\nfunction callRuntimeCallbacks(callbacks) {\n while (callbacks.length > 0) {\n  var callback = callbacks.shift();\n  if (typeof callback == \"function\") {\n   callback(Module);\n   continue;\n  }\n  var func = callback.func;\n  if (typeof func === \"number\") {\n   if (callback.arg === undefined) {\n    wasmTable.get(func)();\n   } else {\n    wasmTable.get(func)(callback.arg);\n   }\n  } else {\n   func(callback.arg === undefined ? null : callback.arg);\n  }\n }\n}\n\nvar char_0 = 48;\n\nvar char_9 = 57;\n\nfunction makeLegalFunctionName(name) {\n if (undefined === name) {\n  return \"_unknown\";\n }\n name = name.replace(/[^a-zA-Z0-9_]/g, \"$\");\n var f = name.charCodeAt(0);\n if (f >= char_0 && f <= char_9) {\n  return \"_\" + name;\n } else {\n  return name;\n }\n}\n\nfunction createNamedFunction(name, body) {\n name = makeLegalFunctionName(name);\n return new Function(\"body\", \"return function \" + name + \"() {\\n\" + '    \"use strict\";' + \"    return body.apply(this, arguments);\\n\" + \"};\\n\")(body);\n}\n\nvar emval_free_list = [];\n\nvar emval_handle_array = [ {}, {\n value: undefined\n}, {\n value: null\n}, {\n value: true\n}, {\n value: false\n} ];\n\nfunction count_emval_handles() {\n var count = 0;\n for (var i = 5; i < emval_handle_array.length; ++i) {\n  if (emval_handle_array[i] !== undefined) {\n   ++count;\n  }\n }\n return count;\n}\n\nfunction get_first_emval() {\n for (var i = 5; i < emval_handle_array.length; ++i) {\n  if (emval_handle_array[i] !== undefined) {\n   return emval_handle_array[i];\n  }\n }\n return null;\n}\n\nfunction init_emval() {\n Module[\"count_emval_handles\"] = count_emval_handles;\n Module[\"get_first_emval\"] = get_first_emval;\n}\n\nfunction __emval_register(value) {\n switch (value) {\n case undefined:\n  {\n   return 1;\n  }\n\n case null:\n  {\n   return 2;\n  }\n\n case true:\n  {\n   return 3;\n  }\n\n case false:\n  {\n   return 4;\n  }\n\n default:\n  {\n   var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;\n   emval_handle_array[handle] = {\n    refcount: 1,\n    value: value\n   };\n   return handle;\n  }\n }\n}\n\nfunction extendError(baseErrorType, errorName) {\n var errorClass = createNamedFunction(errorName, function(message) {\n  this.name = errorName;\n  this.message = message;\n  var stack = new Error(message).stack;\n  if (stack !== undefined) {\n   this.stack = this.toString() + \"\\n\" + stack.replace(/^Error(:[^\\n]*)?\\n/, \"\");\n  }\n });\n errorClass.prototype = Object.create(baseErrorType.prototype);\n errorClass.prototype.constructor = errorClass;\n errorClass.prototype.toString = function() {\n  if (this.message === undefined) {\n   return this.name;\n  } else {\n   return this.name + \": \" + this.message;\n  }\n };\n return errorClass;\n}\n\nvar PureVirtualError = undefined;\n\nfunction embind_init_charCodes() {\n var codes = new Array(256);\n for (var i = 0; i < 256; ++i) {\n  codes[i] = String.fromCharCode(i);\n }\n embind_charCodes = codes;\n}\n\nvar embind_charCodes = undefined;\n\nfunction readLatin1String(ptr) {\n var ret = \"\";\n var c = ptr;\n while (HEAPU8[c]) {\n  ret += embind_charCodes[HEAPU8[c++]];\n }\n return ret;\n}\n\nfunction getInheritedInstanceCount() {\n return Object.keys(registeredInstances).length;\n}\n\nfunction getLiveInheritedInstances() {\n var rv = [];\n for (var k in registeredInstances) {\n  if (registeredInstances.hasOwnProperty(k)) {\n   rv.push(registeredInstances[k]);\n  }\n }\n return rv;\n}\n\nvar deletionQueue = [];\n\nfunction flushPendingDeletes() {\n while (deletionQueue.length) {\n  var obj = deletionQueue.pop();\n  obj.$$.deleteScheduled = false;\n  obj[\"delete\"]();\n }\n}\n\nvar delayFunction = undefined;\n\nfunction setDelayFunction(fn) {\n delayFunction = fn;\n if (deletionQueue.length && delayFunction) {\n  delayFunction(flushPendingDeletes);\n }\n}\n\nfunction init_embind() {\n Module[\"getInheritedInstanceCount\"] = getInheritedInstanceCount;\n Module[\"getLiveInheritedInstances\"] = getLiveInheritedInstances;\n Module[\"flushPendingDeletes\"] = flushPendingDeletes;\n Module[\"setDelayFunction\"] = setDelayFunction;\n}\n\nvar registeredInstances = {};\n\nvar BindingError = undefined;\n\nfunction throwBindingError(message) {\n throw new BindingError(message);\n}\n\nfunction getBasestPointer(class_, ptr) {\n if (ptr === undefined) {\n  throwBindingError(\"ptr should not be undefined\");\n }\n while (class_.baseClass) {\n  ptr = class_.upcast(ptr);\n  class_ = class_.baseClass;\n }\n return ptr;\n}\n\nfunction registerInheritedInstance(class_, ptr, instance) {\n ptr = getBasestPointer(class_, ptr);\n if (registeredInstances.hasOwnProperty(ptr)) {\n  throwBindingError(\"Tried to register registered instance: \" + ptr);\n } else {\n  registeredInstances[ptr] = instance;\n }\n}\n\nfunction requireHandle(handle) {\n if (!handle) {\n  throwBindingError(\"Cannot use deleted val. handle = \" + handle);\n }\n return emval_handle_array[handle].value;\n}\n\nvar registeredTypes = {};\n\nfunction getTypeName(type) {\n var ptr = ___getTypeName(type);\n var rv = readLatin1String(ptr);\n _free(ptr);\n return rv;\n}\n\nfunction requireRegisteredType(rawType, humanName) {\n var impl = registeredTypes[rawType];\n if (undefined === impl) {\n  throwBindingError(humanName + \" has unknown type \" + getTypeName(rawType));\n }\n return impl;\n}\n\nfunction unregisterInheritedInstance(class_, ptr) {\n ptr = getBasestPointer(class_, ptr);\n if (registeredInstances.hasOwnProperty(ptr)) {\n  delete registeredInstances[ptr];\n } else {\n  throwBindingError(\"Tried to unregister unregistered instance: \" + ptr);\n }\n}\n\nfunction detachFinalizer(handle) {}\n\nvar finalizationGroup = false;\n\nfunction runDestructor($$) {\n if ($$.smartPtr) {\n  $$.smartPtrType.rawDestructor($$.smartPtr);\n } else {\n  $$.ptrType.registeredClass.rawDestructor($$.ptr);\n }\n}\n\nfunction releaseClassHandle($$) {\n $$.count.value -= 1;\n var toDelete = 0 === $$.count.value;\n if (toDelete) {\n  runDestructor($$);\n }\n}\n\nfunction attachFinalizer(handle) {\n if (\"undefined\" === typeof FinalizationGroup) {\n  attachFinalizer = function(handle) {\n   return handle;\n  };\n  return handle;\n }\n finalizationGroup = new FinalizationGroup(function(iter) {\n  for (var result = iter.next(); !result.done; result = iter.next()) {\n   var $$ = result.value;\n   if (!$$.ptr) {\n    console.warn(\"object already deleted: \" + $$.ptr);\n   } else {\n    releaseClassHandle($$);\n   }\n  }\n });\n attachFinalizer = function(handle) {\n  finalizationGroup.register(handle, handle.$$, handle.$$);\n  return handle;\n };\n detachFinalizer = function(handle) {\n  finalizationGroup.unregister(handle.$$);\n };\n return attachFinalizer(handle);\n}\n\nfunction __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {\n constructorName = readLatin1String(constructorName);\n wrapperType = requireRegisteredType(wrapperType, \"wrapper\");\n properties = requireHandle(properties);\n var arraySlice = [].slice;\n var registeredClass = wrapperType.registeredClass;\n var wrapperPrototype = registeredClass.instancePrototype;\n var baseClass = registeredClass.baseClass;\n var baseClassPrototype = baseClass.instancePrototype;\n var baseConstructor = registeredClass.baseClass.constructor;\n var ctor = createNamedFunction(constructorName, function() {\n  registeredClass.baseClass.pureVirtualFunctions.forEach(function(name) {\n   if (this[name] === baseClassPrototype[name]) {\n    throw new PureVirtualError(\"Pure virtual function \" + name + \" must be implemented in JavaScript\");\n   }\n  }.bind(this));\n  Object.defineProperty(this, \"__parent\", {\n   value: wrapperPrototype\n  });\n  this[\"__construct\"].apply(this, arraySlice.call(arguments));\n });\n wrapperPrototype[\"__construct\"] = function __construct() {\n  if (this === wrapperPrototype) {\n   throwBindingError(\"Pass correct 'this' to __construct\");\n  }\n  var inner = baseConstructor[\"implement\"].apply(undefined, [ this ].concat(arraySlice.call(arguments)));\n  detachFinalizer(inner);\n  var $$ = inner.$$;\n  inner[\"notifyOnDestruction\"]();\n  $$.preservePointerOnDelete = true;\n  Object.defineProperties(this, {\n   $$: {\n    value: $$\n   }\n  });\n  attachFinalizer(this);\n  registerInheritedInstance(registeredClass, $$.ptr, this);\n };\n wrapperPrototype[\"__destruct\"] = function __destruct() {\n  if (this === wrapperPrototype) {\n   throwBindingError(\"Pass correct 'this' to __destruct\");\n  }\n  detachFinalizer(this);\n  unregisterInheritedInstance(registeredClass, this.$$.ptr);\n };\n ctor.prototype = Object.create(wrapperPrototype);\n for (var p in properties) {\n  ctor.prototype[p] = properties[p];\n }\n return __emval_register(ctor);\n}\n\nvar structRegistrations = {};\n\nfunction runDestructors(destructors) {\n while (destructors.length) {\n  var ptr = destructors.pop();\n  var del = destructors.pop();\n  del(ptr);\n }\n}\n\nfunction simpleReadValueFromPointer(pointer) {\n return this[\"fromWireType\"](HEAPU32[pointer >> 2]);\n}\n\nvar awaitingDependencies = {};\n\nvar typeDependencies = {};\n\nvar InternalError = undefined;\n\nfunction throwInternalError(message) {\n throw new InternalError(message);\n}\n\nfunction whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {\n myTypes.forEach(function(type) {\n  typeDependencies[type] = dependentTypes;\n });\n function onComplete(typeConverters) {\n  var myTypeConverters = getTypeConverters(typeConverters);\n  if (myTypeConverters.length !== myTypes.length) {\n   throwInternalError(\"Mismatched type converter count\");\n  }\n  for (var i = 0; i < myTypes.length; ++i) {\n   registerType(myTypes[i], myTypeConverters[i]);\n  }\n }\n var typeConverters = new Array(dependentTypes.length);\n var unregisteredTypes = [];\n var registered = 0;\n dependentTypes.forEach(function(dt, i) {\n  if (registeredTypes.hasOwnProperty(dt)) {\n   typeConverters[i] = registeredTypes[dt];\n  } else {\n   unregisteredTypes.push(dt);\n   if (!awaitingDependencies.hasOwnProperty(dt)) {\n    awaitingDependencies[dt] = [];\n   }\n   awaitingDependencies[dt].push(function() {\n    typeConverters[i] = registeredTypes[dt];\n    ++registered;\n    if (registered === unregisteredTypes.length) {\n     onComplete(typeConverters);\n    }\n   });\n  }\n });\n if (0 === unregisteredTypes.length) {\n  onComplete(typeConverters);\n }\n}\n\nfunction __embind_finalize_value_object(structType) {\n var reg = structRegistrations[structType];\n delete structRegistrations[structType];\n var rawConstructor = reg.rawConstructor;\n var rawDestructor = reg.rawDestructor;\n var fieldRecords = reg.fields;\n var fieldTypes = fieldRecords.map(function(field) {\n  return field.getterReturnType;\n }).concat(fieldRecords.map(function(field) {\n  return field.setterArgumentType;\n }));\n whenDependentTypesAreResolved([ structType ], fieldTypes, function(fieldTypes) {\n  var fields = {};\n  fieldRecords.forEach(function(field, i) {\n   var fieldName = field.fieldName;\n   var getterReturnType = fieldTypes[i];\n   var getter = field.getter;\n   var getterContext = field.getterContext;\n   var setterArgumentType = fieldTypes[i + fieldRecords.length];\n   var setter = field.setter;\n   var setterContext = field.setterContext;\n   fields[fieldName] = {\n    read: function(ptr) {\n     return getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n    },\n    write: function(ptr, o) {\n     var destructors = [];\n     setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, o));\n     runDestructors(destructors);\n    }\n   };\n  });\n  return [ {\n   name: reg.name,\n   \"fromWireType\": function(ptr) {\n    var rv = {};\n    for (var i in fields) {\n     rv[i] = fields[i].read(ptr);\n    }\n    rawDestructor(ptr);\n    return rv;\n   },\n   \"toWireType\": function(destructors, o) {\n    for (var fieldName in fields) {\n     if (!(fieldName in o)) {\n      throw new TypeError('Missing field:  \"' + fieldName + '\"');\n     }\n    }\n    var ptr = rawConstructor();\n    for (fieldName in fields) {\n     fields[fieldName].write(ptr, o[fieldName]);\n    }\n    if (destructors !== null) {\n     destructors.push(rawDestructor, ptr);\n    }\n    return ptr;\n   },\n   \"argPackAdvance\": 8,\n   \"readValueFromPointer\": simpleReadValueFromPointer,\n   destructorFunction: rawDestructor\n  } ];\n });\n}\n\nfunction getShiftFromSize(size) {\n switch (size) {\n case 1:\n  return 0;\n\n case 2:\n  return 1;\n\n case 4:\n  return 2;\n\n case 8:\n  return 3;\n\n default:\n  throw new TypeError(\"Unknown type size: \" + size);\n }\n}\n\nfunction registerType(rawType, registeredInstance, options) {\n options = options || {};\n if (!(\"argPackAdvance\" in registeredInstance)) {\n  throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n }\n var name = registeredInstance.name;\n if (!rawType) {\n  throwBindingError('type \"' + name + '\" must have a positive integer typeid pointer');\n }\n if (registeredTypes.hasOwnProperty(rawType)) {\n  if (options.ignoreDuplicateRegistrations) {\n   return;\n  } else {\n   throwBindingError(\"Cannot register type '\" + name + \"' twice\");\n  }\n }\n registeredTypes[rawType] = registeredInstance;\n delete typeDependencies[rawType];\n if (awaitingDependencies.hasOwnProperty(rawType)) {\n  var callbacks = awaitingDependencies[rawType];\n  delete awaitingDependencies[rawType];\n  callbacks.forEach(function(cb) {\n   cb();\n  });\n }\n}\n\nfunction __embind_register_bool(rawType, name, size, trueValue, falseValue) {\n var shift = getShiftFromSize(size);\n name = readLatin1String(name);\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(wt) {\n   return !!wt;\n  },\n  \"toWireType\": function(destructors, o) {\n   return o ? trueValue : falseValue;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": function(pointer) {\n   var heap;\n   if (size === 1) {\n    heap = HEAP8;\n   } else if (size === 2) {\n    heap = HEAP16;\n   } else if (size === 4) {\n    heap = HEAP32;\n   } else {\n    throw new TypeError(\"Unknown boolean type size: \" + name);\n   }\n   return this[\"fromWireType\"](heap[pointer >> shift]);\n  },\n  destructorFunction: null\n });\n}\n\nfunction ClassHandle_isAliasOf(other) {\n if (!(this instanceof ClassHandle)) {\n  return false;\n }\n if (!(other instanceof ClassHandle)) {\n  return false;\n }\n var leftClass = this.$$.ptrType.registeredClass;\n var left = this.$$.ptr;\n var rightClass = other.$$.ptrType.registeredClass;\n var right = other.$$.ptr;\n while (leftClass.baseClass) {\n  left = leftClass.upcast(left);\n  leftClass = leftClass.baseClass;\n }\n while (rightClass.baseClass) {\n  right = rightClass.upcast(right);\n  rightClass = rightClass.baseClass;\n }\n return leftClass === rightClass && left === right;\n}\n\nfunction shallowCopyInternalPointer(o) {\n return {\n  count: o.count,\n  deleteScheduled: o.deleteScheduled,\n  preservePointerOnDelete: o.preservePointerOnDelete,\n  ptr: o.ptr,\n  ptrType: o.ptrType,\n  smartPtr: o.smartPtr,\n  smartPtrType: o.smartPtrType\n };\n}\n\nfunction throwInstanceAlreadyDeleted(obj) {\n function getInstanceTypeName(handle) {\n  return handle.$$.ptrType.registeredClass.name;\n }\n throwBindingError(getInstanceTypeName(obj) + \" instance already deleted\");\n}\n\nfunction ClassHandle_clone() {\n if (!this.$$.ptr) {\n  throwInstanceAlreadyDeleted(this);\n }\n if (this.$$.preservePointerOnDelete) {\n  this.$$.count.value += 1;\n  return this;\n } else {\n  var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {\n   $$: {\n    value: shallowCopyInternalPointer(this.$$)\n   }\n  }));\n  clone.$$.count.value += 1;\n  clone.$$.deleteScheduled = false;\n  return clone;\n }\n}\n\nfunction ClassHandle_delete() {\n if (!this.$$.ptr) {\n  throwInstanceAlreadyDeleted(this);\n }\n if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n  throwBindingError(\"Object already scheduled for deletion\");\n }\n detachFinalizer(this);\n releaseClassHandle(this.$$);\n if (!this.$$.preservePointerOnDelete) {\n  this.$$.smartPtr = undefined;\n  this.$$.ptr = undefined;\n }\n}\n\nfunction ClassHandle_isDeleted() {\n return !this.$$.ptr;\n}\n\nfunction ClassHandle_deleteLater() {\n if (!this.$$.ptr) {\n  throwInstanceAlreadyDeleted(this);\n }\n if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n  throwBindingError(\"Object already scheduled for deletion\");\n }\n deletionQueue.push(this);\n if (deletionQueue.length === 1 && delayFunction) {\n  delayFunction(flushPendingDeletes);\n }\n this.$$.deleteScheduled = true;\n return this;\n}\n\nfunction init_ClassHandle() {\n ClassHandle.prototype[\"isAliasOf\"] = ClassHandle_isAliasOf;\n ClassHandle.prototype[\"clone\"] = ClassHandle_clone;\n ClassHandle.prototype[\"delete\"] = ClassHandle_delete;\n ClassHandle.prototype[\"isDeleted\"] = ClassHandle_isDeleted;\n ClassHandle.prototype[\"deleteLater\"] = ClassHandle_deleteLater;\n}\n\nfunction ClassHandle() {}\n\nvar registeredPointers = {};\n\nfunction ensureOverloadTable(proto, methodName, humanName) {\n if (undefined === proto[methodName].overloadTable) {\n  var prevFunc = proto[methodName];\n  proto[methodName] = function() {\n   if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {\n    throwBindingError(\"Function '\" + humanName + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + proto[methodName].overloadTable + \")!\");\n   }\n   return proto[methodName].overloadTable[arguments.length].apply(this, arguments);\n  };\n  proto[methodName].overloadTable = [];\n  proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;\n }\n}\n\nfunction exposePublicSymbol(name, value, numArguments) {\n if (Module.hasOwnProperty(name)) {\n  if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {\n   throwBindingError(\"Cannot register public name '\" + name + \"' twice\");\n  }\n  ensureOverloadTable(Module, name, name);\n  if (Module.hasOwnProperty(numArguments)) {\n   throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\" + numArguments + \")!\");\n  }\n  Module[name].overloadTable[numArguments] = value;\n } else {\n  Module[name] = value;\n  if (undefined !== numArguments) {\n   Module[name].numArguments = numArguments;\n  }\n }\n}\n\nfunction RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {\n this.name = name;\n this.constructor = constructor;\n this.instancePrototype = instancePrototype;\n this.rawDestructor = rawDestructor;\n this.baseClass = baseClass;\n this.getActualType = getActualType;\n this.upcast = upcast;\n this.downcast = downcast;\n this.pureVirtualFunctions = [];\n}\n\nfunction upcastPointer(ptr, ptrClass, desiredClass) {\n while (ptrClass !== desiredClass) {\n  if (!ptrClass.upcast) {\n   throwBindingError(\"Expected null or instance of \" + desiredClass.name + \", got an instance of \" + ptrClass.name);\n  }\n  ptr = ptrClass.upcast(ptr);\n  ptrClass = ptrClass.baseClass;\n }\n return ptr;\n}\n\nfunction constNoSmartPtrRawPointerToWireType(destructors, handle) {\n if (handle === null) {\n  if (this.isReference) {\n   throwBindingError(\"null is not a valid \" + this.name);\n  }\n  return 0;\n }\n if (!handle.$$) {\n  throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n }\n if (!handle.$$.ptr) {\n  throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n }\n var handleClass = handle.$$.ptrType.registeredClass;\n var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n return ptr;\n}\n\nfunction genericPointerToWireType(destructors, handle) {\n var ptr;\n if (handle === null) {\n  if (this.isReference) {\n   throwBindingError(\"null is not a valid \" + this.name);\n  }\n  if (this.isSmartPointer) {\n   ptr = this.rawConstructor();\n   if (destructors !== null) {\n    destructors.push(this.rawDestructor, ptr);\n   }\n   return ptr;\n  } else {\n   return 0;\n  }\n }\n if (!handle.$$) {\n  throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n }\n if (!handle.$$.ptr) {\n  throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n }\n if (!this.isConst && handle.$$.ptrType.isConst) {\n  throwBindingError(\"Cannot convert argument of type \" + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + \" to parameter type \" + this.name);\n }\n var handleClass = handle.$$.ptrType.registeredClass;\n ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n if (this.isSmartPointer) {\n  if (undefined === handle.$$.smartPtr) {\n   throwBindingError(\"Passing raw pointer to smart pointer is illegal\");\n  }\n  switch (this.sharingPolicy) {\n  case 0:\n   if (handle.$$.smartPtrType === this) {\n    ptr = handle.$$.smartPtr;\n   } else {\n    throwBindingError(\"Cannot convert argument of type \" + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + \" to parameter type \" + this.name);\n   }\n   break;\n\n  case 1:\n   ptr = handle.$$.smartPtr;\n   break;\n\n  case 2:\n   if (handle.$$.smartPtrType === this) {\n    ptr = handle.$$.smartPtr;\n   } else {\n    var clonedHandle = handle[\"clone\"]();\n    ptr = this.rawShare(ptr, __emval_register(function() {\n     clonedHandle[\"delete\"]();\n    }));\n    if (destructors !== null) {\n     destructors.push(this.rawDestructor, ptr);\n    }\n   }\n   break;\n\n  default:\n   throwBindingError(\"Unsupporting sharing policy\");\n  }\n }\n return ptr;\n}\n\nfunction nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {\n if (handle === null) {\n  if (this.isReference) {\n   throwBindingError(\"null is not a valid \" + this.name);\n  }\n  return 0;\n }\n if (!handle.$$) {\n  throwBindingError('Cannot pass \"' + _embind_repr(handle) + '\" as a ' + this.name);\n }\n if (!handle.$$.ptr) {\n  throwBindingError(\"Cannot pass deleted object as a pointer of type \" + this.name);\n }\n if (handle.$$.ptrType.isConst) {\n  throwBindingError(\"Cannot convert argument of type \" + handle.$$.ptrType.name + \" to parameter type \" + this.name);\n }\n var handleClass = handle.$$.ptrType.registeredClass;\n var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n return ptr;\n}\n\nfunction RegisteredPointer_getPointee(ptr) {\n if (this.rawGetPointee) {\n  ptr = this.rawGetPointee(ptr);\n }\n return ptr;\n}\n\nfunction RegisteredPointer_destructor(ptr) {\n if (this.rawDestructor) {\n  this.rawDestructor(ptr);\n }\n}\n\nfunction RegisteredPointer_deleteObject(handle) {\n if (handle !== null) {\n  handle[\"delete\"]();\n }\n}\n\nfunction downcastPointer(ptr, ptrClass, desiredClass) {\n if (ptrClass === desiredClass) {\n  return ptr;\n }\n if (undefined === desiredClass.baseClass) {\n  return null;\n }\n var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);\n if (rv === null) {\n  return null;\n }\n return desiredClass.downcast(rv);\n}\n\nfunction getInheritedInstance(class_, ptr) {\n ptr = getBasestPointer(class_, ptr);\n return registeredInstances[ptr];\n}\n\nfunction makeClassHandle(prototype, record) {\n if (!record.ptrType || !record.ptr) {\n  throwInternalError(\"makeClassHandle requires ptr and ptrType\");\n }\n var hasSmartPtrType = !!record.smartPtrType;\n var hasSmartPtr = !!record.smartPtr;\n if (hasSmartPtrType !== hasSmartPtr) {\n  throwInternalError(\"Both smartPtrType and smartPtr must be specified\");\n }\n record.count = {\n  value: 1\n };\n return attachFinalizer(Object.create(prototype, {\n  $$: {\n   value: record\n  }\n }));\n}\n\nfunction RegisteredPointer_fromWireType(ptr) {\n var rawPointer = this.getPointee(ptr);\n if (!rawPointer) {\n  this.destructor(ptr);\n  return null;\n }\n var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);\n if (undefined !== registeredInstance) {\n  if (0 === registeredInstance.$$.count.value) {\n   registeredInstance.$$.ptr = rawPointer;\n   registeredInstance.$$.smartPtr = ptr;\n   return registeredInstance[\"clone\"]();\n  } else {\n   var rv = registeredInstance[\"clone\"]();\n   this.destructor(ptr);\n   return rv;\n  }\n }\n function makeDefaultHandle() {\n  if (this.isSmartPointer) {\n   return makeClassHandle(this.registeredClass.instancePrototype, {\n    ptrType: this.pointeeType,\n    ptr: rawPointer,\n    smartPtrType: this,\n    smartPtr: ptr\n   });\n  } else {\n   return makeClassHandle(this.registeredClass.instancePrototype, {\n    ptrType: this,\n    ptr: ptr\n   });\n  }\n }\n var actualType = this.registeredClass.getActualType(rawPointer);\n var registeredPointerRecord = registeredPointers[actualType];\n if (!registeredPointerRecord) {\n  return makeDefaultHandle.call(this);\n }\n var toType;\n if (this.isConst) {\n  toType = registeredPointerRecord.constPointerType;\n } else {\n  toType = registeredPointerRecord.pointerType;\n }\n var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);\n if (dp === null) {\n  return makeDefaultHandle.call(this);\n }\n if (this.isSmartPointer) {\n  return makeClassHandle(toType.registeredClass.instancePrototype, {\n   ptrType: toType,\n   ptr: dp,\n   smartPtrType: this,\n   smartPtr: ptr\n  });\n } else {\n  return makeClassHandle(toType.registeredClass.instancePrototype, {\n   ptrType: toType,\n   ptr: dp\n  });\n }\n}\n\nfunction init_RegisteredPointer() {\n RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;\n RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;\n RegisteredPointer.prototype[\"argPackAdvance\"] = 8;\n RegisteredPointer.prototype[\"readValueFromPointer\"] = simpleReadValueFromPointer;\n RegisteredPointer.prototype[\"deleteObject\"] = RegisteredPointer_deleteObject;\n RegisteredPointer.prototype[\"fromWireType\"] = RegisteredPointer_fromWireType;\n}\n\nfunction RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {\n this.name = name;\n this.registeredClass = registeredClass;\n this.isReference = isReference;\n this.isConst = isConst;\n this.isSmartPointer = isSmartPointer;\n this.pointeeType = pointeeType;\n this.sharingPolicy = sharingPolicy;\n this.rawGetPointee = rawGetPointee;\n this.rawConstructor = rawConstructor;\n this.rawShare = rawShare;\n this.rawDestructor = rawDestructor;\n if (!isSmartPointer && registeredClass.baseClass === undefined) {\n  if (isConst) {\n   this[\"toWireType\"] = constNoSmartPtrRawPointerToWireType;\n   this.destructorFunction = null;\n  } else {\n   this[\"toWireType\"] = nonConstNoSmartPtrRawPointerToWireType;\n   this.destructorFunction = null;\n  }\n } else {\n  this[\"toWireType\"] = genericPointerToWireType;\n }\n}\n\nfunction replacePublicSymbol(name, value, numArguments) {\n if (!Module.hasOwnProperty(name)) {\n  throwInternalError(\"Replacing nonexistant public symbol\");\n }\n if (undefined !== Module[name].overloadTable && undefined !== numArguments) {\n  Module[name].overloadTable[numArguments] = value;\n } else {\n  Module[name] = value;\n  Module[name].argCount = numArguments;\n }\n}\n\nfunction dynCallLegacy(sig, ptr, args) {\n var f = Module[\"dynCall_\" + sig];\n return args && args.length ? f.apply(null, [ ptr ].concat(args)) : f.call(null, ptr);\n}\n\nfunction dynCall(sig, ptr, args) {\n if (sig.indexOf(\"j\") != -1) {\n  return dynCallLegacy(sig, ptr, args);\n }\n return wasmTable.get(ptr).apply(null, args);\n}\n\nfunction getDynCaller(sig, ptr) {\n var argCache = [];\n return function() {\n  argCache.length = arguments.length;\n  for (var i = 0; i < arguments.length; i++) {\n   argCache[i] = arguments[i];\n  }\n  return dynCall(sig, ptr, argCache);\n };\n}\n\nfunction embind__requireFunction(signature, rawFunction) {\n signature = readLatin1String(signature);\n function makeDynCaller() {\n  if (signature.indexOf(\"j\") != -1) {\n   return getDynCaller(signature, rawFunction);\n  }\n  return wasmTable.get(rawFunction);\n }\n var fp = makeDynCaller();\n if (typeof fp !== \"function\") {\n  throwBindingError(\"unknown function pointer with signature \" + signature + \": \" + rawFunction);\n }\n return fp;\n}\n\nvar UnboundTypeError = undefined;\n\nfunction throwUnboundTypeError(message, types) {\n var unboundTypes = [];\n var seen = {};\n function visit(type) {\n  if (seen[type]) {\n   return;\n  }\n  if (registeredTypes[type]) {\n   return;\n  }\n  if (typeDependencies[type]) {\n   typeDependencies[type].forEach(visit);\n   return;\n  }\n  unboundTypes.push(type);\n  seen[type] = true;\n }\n types.forEach(visit);\n throw new UnboundTypeError(message + \": \" + unboundTypes.map(getTypeName).join([ \", \" ]));\n}\n\nfunction __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {\n name = readLatin1String(name);\n getActualType = embind__requireFunction(getActualTypeSignature, getActualType);\n if (upcast) {\n  upcast = embind__requireFunction(upcastSignature, upcast);\n }\n if (downcast) {\n  downcast = embind__requireFunction(downcastSignature, downcast);\n }\n rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);\n var legalFunctionName = makeLegalFunctionName(name);\n exposePublicSymbol(legalFunctionName, function() {\n  throwUnboundTypeError(\"Cannot construct \" + name + \" due to unbound types\", [ baseClassRawType ]);\n });\n whenDependentTypesAreResolved([ rawType, rawPointerType, rawConstPointerType ], baseClassRawType ? [ baseClassRawType ] : [], function(base) {\n  base = base[0];\n  var baseClass;\n  var basePrototype;\n  if (baseClassRawType) {\n   baseClass = base.registeredClass;\n   basePrototype = baseClass.instancePrototype;\n  } else {\n   basePrototype = ClassHandle.prototype;\n  }\n  var constructor = createNamedFunction(legalFunctionName, function() {\n   if (Object.getPrototypeOf(this) !== instancePrototype) {\n    throw new BindingError(\"Use 'new' to construct \" + name);\n   }\n   if (undefined === registeredClass.constructor_body) {\n    throw new BindingError(name + \" has no accessible constructor\");\n   }\n   var body = registeredClass.constructor_body[arguments.length];\n   if (undefined === body) {\n    throw new BindingError(\"Tried to invoke ctor of \" + name + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(registeredClass.constructor_body).toString() + \") parameters instead!\");\n   }\n   return body.apply(this, arguments);\n  });\n  var instancePrototype = Object.create(basePrototype, {\n   constructor: {\n    value: constructor\n   }\n  });\n  constructor.prototype = instancePrototype;\n  var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);\n  var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);\n  var pointerConverter = new RegisteredPointer(name + \"*\", registeredClass, false, false, false);\n  var constPointerConverter = new RegisteredPointer(name + \" const*\", registeredClass, false, true, false);\n  registeredPointers[rawType] = {\n   pointerType: pointerConverter,\n   constPointerType: constPointerConverter\n  };\n  replacePublicSymbol(legalFunctionName, constructor);\n  return [ referenceConverter, pointerConverter, constPointerConverter ];\n });\n}\n\nfunction new_(constructor, argumentList) {\n if (!(constructor instanceof Function)) {\n  throw new TypeError(\"new_ called with constructor type \" + typeof constructor + \" which is not a function\");\n }\n var dummy = createNamedFunction(constructor.name || \"unknownFunctionName\", function() {});\n dummy.prototype = constructor.prototype;\n var obj = new dummy();\n var r = constructor.apply(obj, argumentList);\n return r instanceof Object ? r : obj;\n}\n\nfunction craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {\n var argCount = argTypes.length;\n if (argCount < 2) {\n  throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n }\n var isClassMethodFunc = argTypes[1] !== null && classType !== null;\n var needsDestructorStack = false;\n for (var i = 1; i < argTypes.length; ++i) {\n  if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {\n   needsDestructorStack = true;\n   break;\n  }\n }\n var returns = argTypes[0].name !== \"void\";\n var argsList = \"\";\n var argsListWired = \"\";\n for (var i = 0; i < argCount - 2; ++i) {\n  argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n  argsListWired += (i !== 0 ? \", \" : \"\") + \"arg\" + i + \"Wired\";\n }\n var invokerFnBody = \"return function \" + makeLegalFunctionName(humanName) + \"(\" + argsList + \") {\\n\" + \"if (arguments.length !== \" + (argCount - 2) + \") {\\n\" + \"throwBindingError('function \" + humanName + \" called with ' + arguments.length + ' arguments, expected \" + (argCount - 2) + \" args!');\\n\" + \"}\\n\";\n if (needsDestructorStack) {\n  invokerFnBody += \"var destructors = [];\\n\";\n }\n var dtorStack = needsDestructorStack ? \"destructors\" : \"null\";\n var args1 = [ \"throwBindingError\", \"invoker\", \"fn\", \"runDestructors\", \"retType\", \"classParam\" ];\n var args2 = [ throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1] ];\n if (isClassMethodFunc) {\n  invokerFnBody += \"var thisWired = classParam.toWireType(\" + dtorStack + \", this);\\n\";\n }\n for (var i = 0; i < argCount - 2; ++i) {\n  invokerFnBody += \"var arg\" + i + \"Wired = argType\" + i + \".toWireType(\" + dtorStack + \", arg\" + i + \"); // \" + argTypes[i + 2].name + \"\\n\";\n  args1.push(\"argType\" + i);\n  args2.push(argTypes[i + 2]);\n }\n if (isClassMethodFunc) {\n  argsListWired = \"thisWired\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired;\n }\n invokerFnBody += (returns ? \"var rv = \" : \"\") + \"invoker(fn\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired + \");\\n\";\n if (needsDestructorStack) {\n  invokerFnBody += \"runDestructors(destructors);\\n\";\n } else {\n  for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {\n   var paramName = i === 1 ? \"thisWired\" : \"arg\" + (i - 2) + \"Wired\";\n   if (argTypes[i].destructorFunction !== null) {\n    invokerFnBody += paramName + \"_dtor(\" + paramName + \"); // \" + argTypes[i].name + \"\\n\";\n    args1.push(paramName + \"_dtor\");\n    args2.push(argTypes[i].destructorFunction);\n   }\n  }\n }\n if (returns) {\n  invokerFnBody += \"var ret = retType.fromWireType(rv);\\n\" + \"return ret;\\n\";\n } else {}\n invokerFnBody += \"}\\n\";\n args1.push(invokerFnBody);\n var invokerFunction = new_(Function, args1).apply(null, args2);\n return invokerFunction;\n}\n\nfunction heap32VectorToArray(count, firstElement) {\n var array = [];\n for (var i = 0; i < count; i++) {\n  array.push(HEAP32[(firstElement >> 2) + i]);\n }\n return array;\n}\n\nfunction __embind_register_class_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, fn) {\n var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n methodName = readLatin1String(methodName);\n rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {\n  classType = classType[0];\n  var humanName = classType.name + \".\" + methodName;\n  function unboundTypesHandler() {\n   throwUnboundTypeError(\"Cannot call \" + humanName + \" due to unbound types\", rawArgTypes);\n  }\n  var proto = classType.registeredClass.constructor;\n  if (undefined === proto[methodName]) {\n   unboundTypesHandler.argCount = argCount - 1;\n   proto[methodName] = unboundTypesHandler;\n  } else {\n   ensureOverloadTable(proto, methodName, humanName);\n   proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;\n  }\n  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n   var invokerArgsArray = [ argTypes[0], null ].concat(argTypes.slice(1));\n   var func = craftInvokerFunction(humanName, invokerArgsArray, null, rawInvoker, fn);\n   if (undefined === proto[methodName].overloadTable) {\n    func.argCount = argCount - 1;\n    proto[methodName] = func;\n   } else {\n    proto[methodName].overloadTable[argCount - 1] = func;\n   }\n   return [];\n  });\n  return [];\n });\n}\n\nfunction validateThis(this_, classType, humanName) {\n if (!(this_ instanceof Object)) {\n  throwBindingError(humanName + ' with invalid \"this\": ' + this_);\n }\n if (!(this_ instanceof classType.registeredClass.constructor)) {\n  throwBindingError(humanName + ' incompatible with \"this\" of type ' + this_.constructor.name);\n }\n if (!this_.$$.ptr) {\n  throwBindingError(\"cannot call emscripten binding method \" + humanName + \" on deleted object\");\n }\n return upcastPointer(this_.$$.ptr, this_.$$.ptrType.registeredClass, classType.registeredClass);\n}\n\nfunction __embind_register_class_class_property(rawClassType, fieldName, rawFieldType, rawFieldPtr, getterSignature, getter, setterSignature, setter) {\n fieldName = readLatin1String(fieldName);\n getter = embind__requireFunction(getterSignature, getter);\n whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {\n  classType = classType[0];\n  var humanName = classType.name + \".\" + fieldName;\n  var desc = {\n   get: function() {\n    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [ rawFieldType ]);\n   },\n   enumerable: true,\n   configurable: true\n  };\n  if (setter) {\n   desc.set = function() {\n    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [ rawFieldType ]);\n   };\n  } else {\n   desc.set = function(v) {\n    throwBindingError(humanName + \" is a read-only property\");\n   };\n  }\n  Object.defineProperty(classType.registeredClass.constructor, fieldName, desc);\n  whenDependentTypesAreResolved([], [ rawFieldType ], function(fieldType) {\n   fieldType = fieldType[0];\n   var desc = {\n    get: function() {\n     return fieldType[\"fromWireType\"](getter(rawFieldPtr));\n    },\n    enumerable: true\n   };\n   if (setter) {\n    setter = embind__requireFunction(setterSignature, setter);\n    desc.set = function(v) {\n     var destructors = [];\n     setter(rawFieldPtr, fieldType[\"toWireType\"](destructors, v));\n     runDestructors(destructors);\n    };\n   }\n   Object.defineProperty(classType.registeredClass.constructor, fieldName, desc);\n   return [];\n  });\n  return [];\n });\n}\n\nfunction __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {\n assert(argCount > 0);\n var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n invoker = embind__requireFunction(invokerSignature, invoker);\n var args = [ rawConstructor ];\n var destructors = [];\n whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {\n  classType = classType[0];\n  var humanName = \"constructor \" + classType.name;\n  if (undefined === classType.registeredClass.constructor_body) {\n   classType.registeredClass.constructor_body = [];\n  }\n  if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {\n   throw new BindingError(\"Cannot register multiple constructors with identical number of parameters (\" + (argCount - 1) + \") for class '\" + classType.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n  }\n  classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {\n   throwUnboundTypeError(\"Cannot construct \" + classType.name + \" due to unbound types\", rawArgTypes);\n  };\n  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n   classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {\n    if (arguments.length !== argCount - 1) {\n     throwBindingError(humanName + \" called with \" + arguments.length + \" arguments, expected \" + (argCount - 1));\n    }\n    destructors.length = 0;\n    args.length = argCount;\n    for (var i = 1; i < argCount; ++i) {\n     args[i] = argTypes[i][\"toWireType\"](destructors, arguments[i - 1]);\n    }\n    var ptr = invoker.apply(null, args);\n    runDestructors(destructors);\n    return argTypes[0][\"fromWireType\"](ptr);\n   };\n   return [];\n  });\n  return [];\n });\n}\n\nfunction __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {\n var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n methodName = readLatin1String(methodName);\n rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {\n  classType = classType[0];\n  var humanName = classType.name + \".\" + methodName;\n  if (isPureVirtual) {\n   classType.registeredClass.pureVirtualFunctions.push(methodName);\n  }\n  function unboundTypesHandler() {\n   throwUnboundTypeError(\"Cannot call \" + humanName + \" due to unbound types\", rawArgTypes);\n  }\n  var proto = classType.registeredClass.instancePrototype;\n  var method = proto[methodName];\n  if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {\n   unboundTypesHandler.argCount = argCount - 2;\n   unboundTypesHandler.className = classType.name;\n   proto[methodName] = unboundTypesHandler;\n  } else {\n   ensureOverloadTable(proto, methodName, humanName);\n   proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;\n  }\n  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n   var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);\n   if (undefined === proto[methodName].overloadTable) {\n    memberFunction.argCount = argCount - 2;\n    proto[methodName] = memberFunction;\n   } else {\n    proto[methodName].overloadTable[argCount - 2] = memberFunction;\n   }\n   return [];\n  });\n  return [];\n });\n}\n\nfunction __embind_register_class_property(classType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {\n fieldName = readLatin1String(fieldName);\n getter = embind__requireFunction(getterSignature, getter);\n whenDependentTypesAreResolved([], [ classType ], function(classType) {\n  classType = classType[0];\n  var humanName = classType.name + \".\" + fieldName;\n  var desc = {\n   get: function() {\n    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [ getterReturnType, setterArgumentType ]);\n   },\n   enumerable: true,\n   configurable: true\n  };\n  if (setter) {\n   desc.set = function() {\n    throwUnboundTypeError(\"Cannot access \" + humanName + \" due to unbound types\", [ getterReturnType, setterArgumentType ]);\n   };\n  } else {\n   desc.set = function(v) {\n    throwBindingError(humanName + \" is a read-only property\");\n   };\n  }\n  Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n  whenDependentTypesAreResolved([], setter ? [ getterReturnType, setterArgumentType ] : [ getterReturnType ], function(types) {\n   var getterReturnType = types[0];\n   var desc = {\n    get: function() {\n     var ptr = validateThis(this, classType, humanName + \" getter\");\n     return getterReturnType[\"fromWireType\"](getter(getterContext, ptr));\n    },\n    enumerable: true\n   };\n   if (setter) {\n    setter = embind__requireFunction(setterSignature, setter);\n    var setterArgumentType = types[1];\n    desc.set = function(v) {\n     var ptr = validateThis(this, classType, humanName + \" setter\");\n     var destructors = [];\n     setter(setterContext, ptr, setterArgumentType[\"toWireType\"](destructors, v));\n     runDestructors(destructors);\n    };\n   }\n   Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n   return [];\n  });\n  return [];\n });\n}\n\nfunction __emval_decref(handle) {\n if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {\n  emval_handle_array[handle] = undefined;\n  emval_free_list.push(handle);\n }\n}\n\nfunction __embind_register_emval(rawType, name) {\n name = readLatin1String(name);\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(handle) {\n   var rv = emval_handle_array[handle].value;\n   __emval_decref(handle);\n   return rv;\n  },\n  \"toWireType\": function(destructors, value) {\n   return __emval_register(value);\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": simpleReadValueFromPointer,\n  destructorFunction: null\n });\n}\n\nfunction enumReadValueFromPointer(name, shift, signed) {\n switch (shift) {\n case 0:\n  return function(pointer) {\n   var heap = signed ? HEAP8 : HEAPU8;\n   return this[\"fromWireType\"](heap[pointer]);\n  };\n\n case 1:\n  return function(pointer) {\n   var heap = signed ? HEAP16 : HEAPU16;\n   return this[\"fromWireType\"](heap[pointer >> 1]);\n  };\n\n case 2:\n  return function(pointer) {\n   var heap = signed ? HEAP32 : HEAPU32;\n   return this[\"fromWireType\"](heap[pointer >> 2]);\n  };\n\n default:\n  throw new TypeError(\"Unknown integer type: \" + name);\n }\n}\n\nfunction __embind_register_enum(rawType, name, size, isSigned) {\n var shift = getShiftFromSize(size);\n name = readLatin1String(name);\n function ctor() {}\n ctor.values = {};\n registerType(rawType, {\n  name: name,\n  constructor: ctor,\n  \"fromWireType\": function(c) {\n   return this.constructor.values[c];\n  },\n  \"toWireType\": function(destructors, c) {\n   return c.value;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": enumReadValueFromPointer(name, shift, isSigned),\n  destructorFunction: null\n });\n exposePublicSymbol(name, ctor);\n}\n\nfunction __embind_register_enum_value(rawEnumType, name, enumValue) {\n var enumType = requireRegisteredType(rawEnumType, \"enum\");\n name = readLatin1String(name);\n var Enum = enumType.constructor;\n var Value = Object.create(enumType.constructor.prototype, {\n  value: {\n   value: enumValue\n  },\n  constructor: {\n   value: createNamedFunction(enumType.name + \"_\" + name, function() {})\n  }\n });\n Enum.values[enumValue] = Value;\n Enum[name] = Value;\n}\n\nfunction _embind_repr(v) {\n if (v === null) {\n  return \"null\";\n }\n var t = typeof v;\n if (t === \"object\" || t === \"array\" || t === \"function\") {\n  return v.toString();\n } else {\n  return \"\" + v;\n }\n}\n\nfunction floatReadValueFromPointer(name, shift) {\n switch (shift) {\n case 2:\n  return function(pointer) {\n   return this[\"fromWireType\"](HEAPF32[pointer >> 2]);\n  };\n\n case 3:\n  return function(pointer) {\n   return this[\"fromWireType\"](HEAPF64[pointer >> 3]);\n  };\n\n default:\n  throw new TypeError(\"Unknown float type: \" + name);\n }\n}\n\nfunction __embind_register_float(rawType, name, size) {\n var shift = getShiftFromSize(size);\n name = readLatin1String(name);\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(value) {\n   return value;\n  },\n  \"toWireType\": function(destructors, value) {\n   if (typeof value !== \"number\" && typeof value !== \"boolean\") {\n    throw new TypeError('Cannot convert \"' + _embind_repr(value) + '\" to ' + this.name);\n   }\n   return value;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": floatReadValueFromPointer(name, shift),\n  destructorFunction: null\n });\n}\n\nfunction __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {\n var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n name = readLatin1String(name);\n rawInvoker = embind__requireFunction(signature, rawInvoker);\n exposePublicSymbol(name, function() {\n  throwUnboundTypeError(\"Cannot call \" + name + \" due to unbound types\", argTypes);\n }, argCount - 1);\n whenDependentTypesAreResolved([], argTypes, function(argTypes) {\n  var invokerArgsArray = [ argTypes[0], null ].concat(argTypes.slice(1));\n  replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);\n  return [];\n });\n}\n\nfunction integerReadValueFromPointer(name, shift, signed) {\n switch (shift) {\n case 0:\n  return signed ? function readS8FromPointer(pointer) {\n   return HEAP8[pointer];\n  } : function readU8FromPointer(pointer) {\n   return HEAPU8[pointer];\n  };\n\n case 1:\n  return signed ? function readS16FromPointer(pointer) {\n   return HEAP16[pointer >> 1];\n  } : function readU16FromPointer(pointer) {\n   return HEAPU16[pointer >> 1];\n  };\n\n case 2:\n  return signed ? function readS32FromPointer(pointer) {\n   return HEAP32[pointer >> 2];\n  } : function readU32FromPointer(pointer) {\n   return HEAPU32[pointer >> 2];\n  };\n\n default:\n  throw new TypeError(\"Unknown integer type: \" + name);\n }\n}\n\nfunction __embind_register_integer(primitiveType, name, size, minRange, maxRange) {\n name = readLatin1String(name);\n if (maxRange === -1) {\n  maxRange = 4294967295;\n }\n var shift = getShiftFromSize(size);\n var fromWireType = function(value) {\n  return value;\n };\n if (minRange === 0) {\n  var bitshift = 32 - 8 * size;\n  fromWireType = function(value) {\n   return value << bitshift >>> bitshift;\n  };\n }\n var isUnsignedType = name.indexOf(\"unsigned\") != -1;\n registerType(primitiveType, {\n  name: name,\n  \"fromWireType\": fromWireType,\n  \"toWireType\": function(destructors, value) {\n   if (typeof value !== \"number\" && typeof value !== \"boolean\") {\n    throw new TypeError('Cannot convert \"' + _embind_repr(value) + '\" to ' + this.name);\n   }\n   if (value < minRange || value > maxRange) {\n    throw new TypeError('Passing a number \"' + _embind_repr(value) + '\" from JS side to C/C++ side to an argument of type \"' + name + '\", which is outside the valid range [' + minRange + \", \" + maxRange + \"]!\");\n   }\n   return isUnsignedType ? value >>> 0 : value | 0;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": integerReadValueFromPointer(name, shift, minRange !== 0),\n  destructorFunction: null\n });\n}\n\nfunction __embind_register_memory_view(rawType, dataTypeIndex, name) {\n var typeMapping = [ Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];\n var TA = typeMapping[dataTypeIndex];\n function decodeMemoryView(handle) {\n  handle = handle >> 2;\n  var heap = HEAPU32;\n  var size = heap[handle];\n  var data = heap[handle + 1];\n  return new TA(buffer, data, size);\n }\n name = readLatin1String(name);\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": decodeMemoryView,\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": decodeMemoryView\n }, {\n  ignoreDuplicateRegistrations: true\n });\n}\n\nfunction __embind_register_std_string(rawType, name) {\n name = readLatin1String(name);\n var stdStringIsUTF8 = name === \"std::string\";\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(value) {\n   var length = HEAPU32[value >> 2];\n   var str;\n   if (stdStringIsUTF8) {\n    var decodeStartPtr = value + 4;\n    for (var i = 0; i <= length; ++i) {\n     var currentBytePtr = value + 4 + i;\n     if (i == length || HEAPU8[currentBytePtr] == 0) {\n      var maxRead = currentBytePtr - decodeStartPtr;\n      var stringSegment = UTF8ToString(decodeStartPtr, maxRead);\n      if (str === undefined) {\n       str = stringSegment;\n      } else {\n       str += String.fromCharCode(0);\n       str += stringSegment;\n      }\n      decodeStartPtr = currentBytePtr + 1;\n     }\n    }\n   } else {\n    var a = new Array(length);\n    for (var i = 0; i < length; ++i) {\n     a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);\n    }\n    str = a.join(\"\");\n   }\n   _free(value);\n   return str;\n  },\n  \"toWireType\": function(destructors, value) {\n   if (value instanceof ArrayBuffer) {\n    value = new Uint8Array(value);\n   }\n   var getLength;\n   var valueIsOfTypeString = typeof value === \"string\";\n   if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {\n    throwBindingError(\"Cannot pass non-string to std::string\");\n   }\n   if (stdStringIsUTF8 && valueIsOfTypeString) {\n    getLength = function() {\n     return lengthBytesUTF8(value);\n    };\n   } else {\n    getLength = function() {\n     return value.length;\n    };\n   }\n   var length = getLength();\n   var ptr = _malloc(4 + length + 1);\n   HEAPU32[ptr >> 2] = length;\n   if (stdStringIsUTF8 && valueIsOfTypeString) {\n    stringToUTF8(value, ptr + 4, length + 1);\n   } else {\n    if (valueIsOfTypeString) {\n     for (var i = 0; i < length; ++i) {\n      var charCode = value.charCodeAt(i);\n      if (charCode > 255) {\n       _free(ptr);\n       throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\");\n      }\n      HEAPU8[ptr + 4 + i] = charCode;\n     }\n    } else {\n     for (var i = 0; i < length; ++i) {\n      HEAPU8[ptr + 4 + i] = value[i];\n     }\n    }\n   }\n   if (destructors !== null) {\n    destructors.push(_free, ptr);\n   }\n   return ptr;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": simpleReadValueFromPointer,\n  destructorFunction: function(ptr) {\n   _free(ptr);\n  }\n });\n}\n\nfunction __embind_register_std_wstring(rawType, charSize, name) {\n name = readLatin1String(name);\n var decodeString, encodeString, getHeap, lengthBytesUTF, shift;\n if (charSize === 2) {\n  decodeString = UTF16ToString;\n  encodeString = stringToUTF16;\n  lengthBytesUTF = lengthBytesUTF16;\n  getHeap = function() {\n   return HEAPU16;\n  };\n  shift = 1;\n } else if (charSize === 4) {\n  decodeString = UTF32ToString;\n  encodeString = stringToUTF32;\n  lengthBytesUTF = lengthBytesUTF32;\n  getHeap = function() {\n   return HEAPU32;\n  };\n  shift = 2;\n }\n registerType(rawType, {\n  name: name,\n  \"fromWireType\": function(value) {\n   var length = HEAPU32[value >> 2];\n   var HEAP = getHeap();\n   var str;\n   var decodeStartPtr = value + 4;\n   for (var i = 0; i <= length; ++i) {\n    var currentBytePtr = value + 4 + i * charSize;\n    if (i == length || HEAP[currentBytePtr >> shift] == 0) {\n     var maxReadBytes = currentBytePtr - decodeStartPtr;\n     var stringSegment = decodeString(decodeStartPtr, maxReadBytes);\n     if (str === undefined) {\n      str = stringSegment;\n     } else {\n      str += String.fromCharCode(0);\n      str += stringSegment;\n     }\n     decodeStartPtr = currentBytePtr + charSize;\n    }\n   }\n   _free(value);\n   return str;\n  },\n  \"toWireType\": function(destructors, value) {\n   if (!(typeof value === \"string\")) {\n    throwBindingError(\"Cannot pass non-string to C++ string type \" + name);\n   }\n   var length = lengthBytesUTF(value);\n   var ptr = _malloc(4 + length + charSize);\n   HEAPU32[ptr >> 2] = length >> shift;\n   encodeString(value, ptr + 4, length + charSize);\n   if (destructors !== null) {\n    destructors.push(_free, ptr);\n   }\n   return ptr;\n  },\n  \"argPackAdvance\": 8,\n  \"readValueFromPointer\": simpleReadValueFromPointer,\n  destructorFunction: function(ptr) {\n   _free(ptr);\n  }\n });\n}\n\nfunction __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {\n structRegistrations[rawType] = {\n  name: readLatin1String(name),\n  rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),\n  rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),\n  fields: []\n };\n}\n\nfunction __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {\n structRegistrations[structType].fields.push({\n  fieldName: readLatin1String(fieldName),\n  getterReturnType: getterReturnType,\n  getter: embind__requireFunction(getterSignature, getter),\n  getterContext: getterContext,\n  setterArgumentType: setterArgumentType,\n  setter: embind__requireFunction(setterSignature, setter),\n  setterContext: setterContext\n });\n}\n\nfunction __embind_register_void(rawType, name) {\n name = readLatin1String(name);\n registerType(rawType, {\n  isVoid: true,\n  name: name,\n  \"argPackAdvance\": 0,\n  \"fromWireType\": function() {\n   return undefined;\n  },\n  \"toWireType\": function(destructors, o) {\n   return undefined;\n  }\n });\n}\n\nfunction __emval_as(handle, returnType, destructorsRef) {\n handle = requireHandle(handle);\n returnType = requireRegisteredType(returnType, \"emval::as\");\n var destructors = [];\n var rd = __emval_register(destructors);\n HEAP32[destructorsRef >> 2] = rd;\n return returnType[\"toWireType\"](destructors, handle);\n}\n\nfunction __emval_allocateDestructors(destructorsRef) {\n var destructors = [];\n HEAP32[destructorsRef >> 2] = __emval_register(destructors);\n return destructors;\n}\n\nvar emval_symbols = {};\n\nfunction getStringOrSymbol(address) {\n var symbol = emval_symbols[address];\n if (symbol === undefined) {\n  return readLatin1String(address);\n } else {\n  return symbol;\n }\n}\n\nvar emval_methodCallers = [];\n\nfunction __emval_call_method(caller, handle, methodName, destructorsRef, args) {\n caller = emval_methodCallers[caller];\n handle = requireHandle(handle);\n methodName = getStringOrSymbol(methodName);\n return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);\n}\n\nfunction __emval_call_void_method(caller, handle, methodName, args) {\n caller = emval_methodCallers[caller];\n handle = requireHandle(handle);\n methodName = getStringOrSymbol(methodName);\n caller(handle, methodName, null, args);\n}\n\nfunction __emval_addMethodCaller(caller) {\n var id = emval_methodCallers.length;\n emval_methodCallers.push(caller);\n return id;\n}\n\nfunction __emval_lookupTypes(argCount, argTypes) {\n var a = new Array(argCount);\n for (var i = 0; i < argCount; ++i) {\n  a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], \"parameter \" + i);\n }\n return a;\n}\n\nfunction __emval_get_method_caller(argCount, argTypes) {\n var types = __emval_lookupTypes(argCount, argTypes);\n var retType = types[0];\n var signatureName = retType.name + \"_$\" + types.slice(1).map(function(t) {\n  return t.name;\n }).join(\"_\") + \"$\";\n var params = [ \"retType\" ];\n var args = [ retType ];\n var argsList = \"\";\n for (var i = 0; i < argCount - 1; ++i) {\n  argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n  params.push(\"argType\" + i);\n  args.push(types[1 + i]);\n }\n var functionName = makeLegalFunctionName(\"methodCaller_\" + signatureName);\n var functionBody = \"return function \" + functionName + \"(handle, name, destructors, args) {\\n\";\n var offset = 0;\n for (var i = 0; i < argCount - 1; ++i) {\n  functionBody += \"    var arg\" + i + \" = argType\" + i + \".readValueFromPointer(args\" + (offset ? \"+\" + offset : \"\") + \");\\n\";\n  offset += types[i + 1][\"argPackAdvance\"];\n }\n functionBody += \"    var rv = handle[name](\" + argsList + \");\\n\";\n for (var i = 0; i < argCount - 1; ++i) {\n  if (types[i + 1][\"deleteObject\"]) {\n   functionBody += \"    argType\" + i + \".deleteObject(arg\" + i + \");\\n\";\n  }\n }\n if (!retType.isVoid) {\n  functionBody += \"    return retType.toWireType(destructors, rv);\\n\";\n }\n functionBody += \"};\\n\";\n params.push(functionBody);\n var invokerFunction = new_(Function, params).apply(null, args);\n return __emval_addMethodCaller(invokerFunction);\n}\n\nfunction __emval_get_module_property(name) {\n name = getStringOrSymbol(name);\n return __emval_register(Module[name]);\n}\n\nfunction __emval_get_property(handle, key) {\n handle = requireHandle(handle);\n key = requireHandle(key);\n return __emval_register(handle[key]);\n}\n\nfunction __emval_incref(handle) {\n if (handle > 4) {\n  emval_handle_array[handle].refcount += 1;\n }\n}\n\nfunction __emval_new_cstring(v) {\n return __emval_register(getStringOrSymbol(v));\n}\n\nfunction __emval_run_destructors(handle) {\n var destructors = emval_handle_array[handle].value;\n runDestructors(destructors);\n __emval_decref(handle);\n}\n\nfunction __emval_take_value(type, argv) {\n type = requireRegisteredType(type, \"_emval_take_value\");\n var v = type[\"readValueFromPointer\"](argv);\n return __emval_register(v);\n}\n\nfunction _abort() {\n abort();\n}\n\nfunction emscripten_realloc_buffer(size) {\n try {\n  wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);\n  updateGlobalBufferAndViews(wasmMemory.buffer);\n  return 1;\n } catch (e) {}\n}\n\nfunction _emscripten_resize_heap(requestedSize) {\n var oldSize = HEAPU8.length;\n requestedSize = requestedSize >>> 0;\n var maxHeapSize = 2147483648;\n if (requestedSize > maxHeapSize) {\n  return false;\n }\n for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n  var overGrownHeapSize = oldSize * (1 + .2 / cutDown);\n  overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);\n  var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n  var replacement = emscripten_realloc_buffer(newSize);\n  if (replacement) {\n   return true;\n  }\n }\n return false;\n}\n\nvar SYSCALLS = {\n mappings: {},\n buffers: [ null, [], [] ],\n printChar: function(stream, curr) {\n  var buffer = SYSCALLS.buffers[stream];\n  if (curr === 0 || curr === 10) {\n   (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n   buffer.length = 0;\n  } else {\n   buffer.push(curr);\n  }\n },\n varargs: undefined,\n get: function() {\n  SYSCALLS.varargs += 4;\n  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];\n  return ret;\n },\n getStr: function(ptr) {\n  var ret = UTF8ToString(ptr);\n  return ret;\n },\n get64: function(low, high) {\n  return low;\n }\n};\n\nfunction _fd_close(fd) {\n return 0;\n}\n\nfunction _fd_seek(fd, offset_low, offset_high, whence, newOffset) {}\n\nfunction _fd_write(fd, iov, iovcnt, pnum) {\n var num = 0;\n for (var i = 0; i < iovcnt; i++) {\n  var ptr = HEAP32[iov + i * 8 >> 2];\n  var len = HEAP32[iov + (i * 8 + 4) >> 2];\n  for (var j = 0; j < len; j++) {\n   SYSCALLS.printChar(fd, HEAPU8[ptr + j]);\n  }\n  num += len;\n }\n HEAP32[pnum >> 2] = num;\n return 0;\n}\n\nfunction _setTempRet0($i) {\n setTempRet0($i | 0);\n}\n\ninit_emval();\n\nPureVirtualError = Module[\"PureVirtualError\"] = extendError(Error, \"PureVirtualError\");\n\nembind_init_charCodes();\n\ninit_embind();\n\nBindingError = Module[\"BindingError\"] = extendError(Error, \"BindingError\");\n\nInternalError = Module[\"InternalError\"] = extendError(Error, \"InternalError\");\n\ninit_ClassHandle();\n\ninit_RegisteredPointer();\n\nUnboundTypeError = Module[\"UnboundTypeError\"] = extendError(Error, \"UnboundTypeError\");\n\nvar ASSERTIONS = false;\n\nfunction intArrayToString(array) {\n var ret = [];\n for (var i = 0; i < array.length; i++) {\n  var chr = array[i];\n  if (chr > 255) {\n   if (ASSERTIONS) {\n    assert(false, \"Character code \" + chr + \" (\" + String.fromCharCode(chr) + \")  at offset \" + i + \" not in 0x00-0xFF.\");\n   }\n   chr &= 255;\n  }\n  ret.push(String.fromCharCode(chr));\n }\n return ret.join(\"\");\n}\n\nvar decodeBase64 = typeof atob === \"function\" ? atob : function(input) {\n var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n var output = \"\";\n var chr1, chr2, chr3;\n var enc1, enc2, enc3, enc4;\n var i = 0;\n input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n do {\n  enc1 = keyStr.indexOf(input.charAt(i++));\n  enc2 = keyStr.indexOf(input.charAt(i++));\n  enc3 = keyStr.indexOf(input.charAt(i++));\n  enc4 = keyStr.indexOf(input.charAt(i++));\n  chr1 = enc1 << 2 | enc2 >> 4;\n  chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n  chr3 = (enc3 & 3) << 6 | enc4;\n  output = output + String.fromCharCode(chr1);\n  if (enc3 !== 64) {\n   output = output + String.fromCharCode(chr2);\n  }\n  if (enc4 !== 64) {\n   output = output + String.fromCharCode(chr3);\n  }\n } while (i < input.length);\n return output;\n};\n\nfunction intArrayFromBase64(s) {\n if (typeof ENVIRONMENT_IS_NODE === \"boolean\" && ENVIRONMENT_IS_NODE) {\n  var buf;\n  try {\n   buf = Buffer.from(s, \"base64\");\n  } catch (_) {\n   buf = new Buffer(s, \"base64\");\n  }\n  return new Uint8Array(buf[\"buffer\"], buf[\"byteOffset\"], buf[\"byteLength\"]);\n }\n try {\n  var decoded = decodeBase64(s);\n  var bytes = new Uint8Array(decoded.length);\n  for (var i = 0; i < decoded.length; ++i) {\n   bytes[i] = decoded.charCodeAt(i);\n  }\n  return bytes;\n } catch (_) {\n  throw new Error(\"Converting base64 string to bytes failed.\");\n }\n}\n\nfunction tryParseAsDataURI(filename) {\n if (!isDataURI(filename)) {\n  return;\n }\n return intArrayFromBase64(filename.slice(dataURIPrefix.length));\n}\n\nvar asmLibraryArg = {\n \"o\": __embind_create_inheriting_constructor,\n \"H\": __embind_finalize_value_object,\n \"A\": __embind_register_bool,\n \"c\": __embind_register_class,\n \"i\": __embind_register_class_class_function,\n \"f\": __embind_register_class_class_property,\n \"n\": __embind_register_class_constructor,\n \"a\": __embind_register_class_function,\n \"b\": __embind_register_class_property,\n \"z\": __embind_register_emval,\n \"k\": __embind_register_enum,\n \"j\": __embind_register_enum_value,\n \"q\": __embind_register_float,\n \"K\": __embind_register_function,\n \"h\": __embind_register_integer,\n \"g\": __embind_register_memory_view,\n \"r\": __embind_register_std_string,\n \"m\": __embind_register_std_wstring,\n \"J\": __embind_register_value_object,\n \"I\": __embind_register_value_object_field,\n \"B\": __embind_register_void,\n \"l\": __emval_as,\n \"G\": __emval_call_method,\n \"e\": __emval_call_void_method,\n \"D\": __emval_decref,\n \"d\": __emval_get_method_caller,\n \"L\": __emval_get_module_property,\n \"u\": __emval_get_property,\n \"C\": __emval_incref,\n \"E\": __emval_new_cstring,\n \"F\": __emval_run_destructors,\n \"t\": __emval_take_value,\n \"s\": _abort,\n \"x\": _emscripten_resize_heap,\n \"y\": _fd_close,\n \"v\": _fd_seek,\n \"p\": _fd_write,\n \"w\": _setTempRet0\n};\n\nvar asm = createWasm();\n\nvar ___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = function() {\n return (___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = Module[\"asm\"][\"N\"]).apply(null, arguments);\n};\n\nvar _malloc = Module[\"_malloc\"] = function() {\n return (_malloc = Module[\"_malloc\"] = Module[\"asm\"][\"P\"]).apply(null, arguments);\n};\n\nvar ___getTypeName = Module[\"___getTypeName\"] = function() {\n return (___getTypeName = Module[\"___getTypeName\"] = Module[\"asm\"][\"Q\"]).apply(null, arguments);\n};\n\nvar ___embind_register_native_and_builtin_types = Module[\"___embind_register_native_and_builtin_types\"] = function() {\n return (___embind_register_native_and_builtin_types = Module[\"___embind_register_native_and_builtin_types\"] = Module[\"asm\"][\"R\"]).apply(null, arguments);\n};\n\nvar _free = Module[\"_free\"] = function() {\n return (_free = Module[\"_free\"] = Module[\"asm\"][\"S\"]).apply(null, arguments);\n};\n\nvar dynCall_jiji = Module[\"dynCall_jiji\"] = function() {\n return (dynCall_jiji = Module[\"dynCall_jiji\"] = Module[\"asm\"][\"T\"]).apply(null, arguments);\n};\n\nvar calledRun;\n\nfunction ExitStatus(status) {\n this.name = \"ExitStatus\";\n this.message = \"Program terminated with exit(\" + status + \")\";\n this.status = status;\n}\n\ndependenciesFulfilled = function runCaller() {\n if (!calledRun) run();\n if (!calledRun) dependenciesFulfilled = runCaller;\n};\n\nfunction run(args) {\n args = args || arguments_;\n if (runDependencies > 0) {\n  return;\n }\n preRun();\n if (runDependencies > 0) {\n  return;\n }\n function doRun() {\n  if (calledRun) return;\n  calledRun = true;\n  Module[\"calledRun\"] = true;\n  if (ABORT) return;\n  initRuntime();\n  preMain();\n  readyPromiseResolve(Module);\n  if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n  postRun();\n }\n if (Module[\"setStatus\"]) {\n  Module[\"setStatus\"](\"Running...\");\n  setTimeout(function() {\n   setTimeout(function() {\n    Module[\"setStatus\"](\"\");\n   }, 1);\n   doRun();\n  }, 1);\n } else {\n  doRun();\n }\n}\n\nModule[\"run\"] = run;\n\nif (Module[\"preInit\"]) {\n if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [ Module[\"preInit\"] ];\n while (Module[\"preInit\"].length > 0) {\n  Module[\"preInit\"].pop()();\n }\n}\n\nrun();\n\n\n  return Rive.ready\n}\n);\n})();\nexport default Rive;","/* (ignored) */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as rc from './rive_canvas.js';\n\n/**\n * Generic type for a parameterless void callback\n */\nexport type VoidCallback = () => void;\n\n// Tracks playback states; numbers map to the runtime's numerical values\n// i.e. play: 0, pause: 1, stop: 2\nenum PlaybackState {\n  Play = 0,\n  Pause,\n  Stop\n}\n\n/**\n * Interface for artboard bounds\n */\nexport interface Bounds extends rc.AABB {}\n\n// #region layout\n\n// Fit options for the canvas\nexport enum Fit {\n  Cover = 'cover',\n  Contain = 'contain',\n  Fill = 'fill',\n  FitWidth = 'fitWidth',\n  FitHeight = 'fitHeight',\n  None = 'none',\n  ScaleDown = 'scaleDown'\n}\n\n// Alignment options for the canvas\nexport enum Alignment {\n  Center = 'center',\n  TopLeft = 'topLeft',\n  TopCenter = 'topCenter',\n  TopRight = 'topRight',\n  CenterLeft = 'centerLeft',\n  CenterRight = 'centerRight',\n  BottomLeft = 'bottomLeft',\n  BottomCenter = 'bottomCenter',\n  BottomRight = 'bottomRight'\n}\n\n// Interface for the Layout static method contructor\nexport interface LayoutParameters {\n  fit?: Fit,\n  alignment?: Alignment,\n  minX?: number,\n  minY?: number,\n  maxX?: number,\n  maxY?: number\n}\n\n// Alignment options for Rive animations in a HTML canvas\nexport class Layout {\n\n  // Runtime fit and alignment are accessed every frame, so we cache their\n  // values to save cycles\n  private cachedRuntimeFit: rc.Fit;\n  private cachedRuntimeAlignment: rc.Alignment;\n\n  public readonly fit: Fit;\n  public readonly alignment: Alignment;\n  public readonly minX: number;\n  public readonly minY: number;\n  public readonly maxX: number;\n  public readonly maxY: number;\n\n  constructor(params?: LayoutParameters) {\n    this.fit = params?.fit ?? Fit.Contain;\n    this.alignment = params?.alignment ?? Alignment.Center;\n    this.minX = params?.minX ?? 0;\n    this.minY = params?.minY ?? 0;\n    this.maxX = params?.maxX ?? 0;\n    this.maxY = params?.maxY ?? 0;\n  }\n\n  // Alternative constructor to build a Layout from an interface/object\n  static new({ fit, alignment, minX, minY, maxX, maxY }: LayoutParameters): Layout {\n    console.warn('This function is deprecated: please use `new Layout({})` instead');\n    return new Layout({ fit, alignment, minX, minY, maxX, maxY });\n  }\n\n  /**\n   * Makes a copy of the layout, replacing any specified parameters\n   */\n  public copyWith({ fit, alignment, minX, minY, maxX, maxY }: LayoutParameters): Layout {\n    return new Layout({\n      fit: fit ?? this.fit,\n      alignment: alignment ?? this.alignment,\n      minX: minX ?? this.minX,\n      minY: minY ?? this.minY,\n      maxX: maxX ?? this.maxX,\n      maxY: maxY ?? this.maxY\n    });\n  }\n\n  // Returns fit for the Wasm runtime format\n  public runtimeFit(rive: rc.RiveCanvas): rc.Fit {\n    if (this.cachedRuntimeFit) return this.cachedRuntimeFit;\n\n    let fit;\n    if (this.fit === Fit.Cover) fit = rive.Fit.cover;\n    else if (this.fit === Fit.Contain) fit = rive.Fit.contain;\n    else if (this.fit === Fit.Fill) fit = rive.Fit.fill;\n    else if (this.fit === Fit.FitWidth) fit = rive.Fit.fitWidth;\n    else if (this.fit === Fit.FitHeight) fit = rive.Fit.fitHeight;\n    else if (this.fit === Fit.ScaleDown) fit = rive.Fit.scaleDown;\n    else fit = rive.Fit.none;\n\n    this.cachedRuntimeFit = fit;\n    return fit;\n  }\n\n  // Returns alignment for the Wasm runtime format\n  public runtimeAlignment(rive: rc.RiveCanvas): rc.Alignment {\n    if (this.cachedRuntimeAlignment) return this.cachedRuntimeAlignment;\n\n    let alignment;\n    if (this.alignment === Alignment.TopLeft) alignment = rive.Alignment.topLeft;\n    else if (this.alignment === Alignment.TopCenter) alignment = rive.Alignment.topCenter;\n    else if (this.alignment === Alignment.TopRight) alignment = rive.Alignment.topRight;\n    else if (this.alignment === Alignment.CenterLeft) alignment = rive.Alignment.centerLeft;\n    else if (this.alignment === Alignment.CenterRight) alignment = rive.Alignment.centerRight;\n    else if (this.alignment === Alignment.BottomLeft) alignment = rive.Alignment.bottomLeft;\n    else if (this.alignment === Alignment.BottomCenter) alignment = rive.Alignment.bottomCenter;\n    else if (this.alignment === Alignment.BottomRight) alignment = rive.Alignment.bottomRight;\n    else alignment = rive.Alignment.center;\n\n    this.cachedRuntimeAlignment = alignment;\n    return alignment;\n  }\n}\n\n// #endregion\n\n// #region runtime\n\n// Callback type when looking for a runtime instance\nexport type RuntimeCallback = (rive: rc.RiveCanvas) => void;\n\n// Runtime singleton; use getInstance to provide a callback that returns the\n// Rive runtime\nexport class RuntimeLoader {\n\n  // Singleton helpers\n  private static runtime: rc.RiveCanvas;\n  // Flag to indicate that loading has started/completed\n  private static isLoading: boolean = false;\n  // List of callbacks for the runtime that come in while loading\n  private static callBackQueue: RuntimeCallback[] = [];\n  // Instance of the Rive runtime\n  private static rive: rc.RiveCanvas;  \n  // Path to the Wasm file; default path works for testing only;\n  // if embedded wasm is used then this is never used.\n  private static wasmURL: string = 'dist/rive.wasm';\n\n  // Class is never instantiated\n  private constructor() { }\n\n  // Loads the runtime\n  private static loadRuntime(): void {\n    rc.default({\n      // Loads Wasm bundle\n      locateFile: (_: string) => RuntimeLoader.wasmURL\n    }).then((rive: rc.RiveCanvas) => {\n      RuntimeLoader.runtime = rive;\n      // Fire all the callbacks\n      while (RuntimeLoader.callBackQueue.length > 0) {\n        RuntimeLoader.callBackQueue.shift()?.(RuntimeLoader.runtime);\n      }\n    });\n  }\n\n  // Provides a runtime instance via a callback\n  public static getInstance(callback: RuntimeCallback): void {\n    // If it's not loading, start loading runtime\n    if (!RuntimeLoader.isLoading) {\n      RuntimeLoader.isLoading = true;\n      RuntimeLoader.loadRuntime();\n    }\n    if (!RuntimeLoader.runtime) {\n      RuntimeLoader.callBackQueue.push(callback);\n    } else {\n      callback(RuntimeLoader.runtime);\n    }\n  }\n\n  // Provides a runtime instance via a promise\n  public static awaitInstance(): Promise<rc.RiveCanvas> {\n    return new Promise<rc.RiveCanvas>((resolve, reject) =>\n      RuntimeLoader.getInstance((rive: rc.RiveCanvas): void => resolve(rive))\n    );\n  }\n\n  // Manually sets the wasm url\n  public static setWasmUrl(url: string): void {\n    RuntimeLoader.wasmURL = url;\n  }\n}\n\n// #endregion\n\n// #region animations\n\n// Wraps animations and instances from the runtime and keeps track of playback\n// state\nclass Animation {\n  public loopCount: number = 0;\n  public readonly instance: rc.LinearAnimationInstance;\n\n  // Time to which the animation should move to on the next render\n  public scrubTo: number | null = null;\n\n  /**\n   * Constructs a new animation\n   * @constructor\n   * @param {any} animation: runtime animation object\n   * @param {any} instance: runtime animation instance object\n   */\n  constructor(private animation: rc.LinearAnimation, runtime: rc.RiveCanvas, public playing: boolean) {\n    this.instance = new runtime.LinearAnimationInstance(animation);\n  }\n\n  // Returns the animation's name\n  public get name(): string {\n    return this.animation.name;\n  }\n\n  // Returns the animation's current time\n  public get time(): number {\n      return this.instance.time;\n  }\n\n  // Sets the animation's current time\n  public set time(value: number) {\n      this.instance.time = value;\n  }\n\n  // Returns the animation's loop type\n  public get loopValue(): number {\n    return this.animation.loopValue;\n  }\n\n  /**\n   * Advances the animation by the give time. If the animation needs scrubbing,\n   * time is ignored and the stored scrub value is used.\n   * @param time the time to advance the animation by if no scrubbing required\n   */\n  public advance(time: number) {\n    if (this.scrubTo === null) {\n      this.instance.advance(time);\n    } else {\n      this.instance.time = 0;\n      this.instance.advance(this.scrubTo);\n      this.scrubTo = null;\n    }\n  }\n\n  public get needsScrub(): boolean {\n    return this.scrubTo !== null;\n  }\n\n  /**\n   * Deletes the backing Wasm animation instance; once this is called, this\n   * animation is no more.\n   */\n  public cleanup() {\n    this.instance.delete();\n  }\n}\n\n// #endregion\n\n// #region state machines\n\nexport enum StateMachineInputType {\n  Number = 56,\n  Trigger = 58,\n  Boolean = 59,\n}\n\n/**\n * An input for a state machine\n */\nexport class StateMachineInput {\n\n  constructor(public readonly type: StateMachineInputType, private runtimeInput: rc.SMIInput) { }\n\n  /**\n   * Returns the name of the input\n   */\n  public get name(): string {\n    return this.runtimeInput.name;\n  }\n\n  /**\n   * Returns the current value of the input\n   */\n  public get value(): number | boolean {\n    return this.runtimeInput.value;\n  }\n\n  /**\n   * Sets the value of the input\n   */\n  public set value(value: number | boolean) {\n    this.runtimeInput.value = value;\n  }\n\n  /**\n   * Fires a trigger; does nothing on Number or Boolean input types\n   */\n  public fire(): void {\n    if (this.type === StateMachineInputType.Trigger) {\n      this.runtimeInput.fire();\n    }\n  }\n}\n\nclass StateMachine {\n\n  /**\n   * Caches the inputs from the runtime\n   */\n  public readonly inputs: StateMachineInput[] = [];\n\n  /**\n   * Runtime state machine instance\n   */\n  public readonly instance: rc.StateMachineInstance;\n\n  /**\n   * @constructor\n   * @param stateMachine runtime state machine object\n   * @param instance runtime state machine instance object\n   */\n  constructor(private stateMachine: rc.StateMachine, runtime: rc.RiveCanvas, public playing: boolean) {\n    this.instance = new runtime.StateMachineInstance(stateMachine);\n    this.initInputs(runtime);\n  }\n\n  public get name(): string {\n    return this.stateMachine.name;\n  }\n\n  /**\n   * Returns a list of state names that have changed on this frame\n   */\n  public get statesChanged(): string[] {\n    const names: string[] = [];\n    for (let i = 0; i < this.instance.stateChangedCount(); i++) {\n      names.push(this.instance.stateChangedNameByIndex(i));\n    }\n    return names;\n  }\n\n  /**\n   * Fetches references to the state machine's inputs and caches them\n   * @param runtime an instance of the runtime; needed for the SMIInput types\n   */\n  private initInputs(runtime: rc.RiveCanvas): void {\n    // Fetch the inputs from the runtime if we don't have them\n    for (let i = 0; i < this.instance.inputCount(); i++) {\n      const input = this.instance.input(i);\n      this.inputs.push(this.mapRuntimeInput(input, runtime));\n    }\n  }\n\n  /**\n   * Maps a runtime input to it's appropriate type\n   * @param input \n   */\n  private mapRuntimeInput(input: rc.SMIInput, runtime: rc.RiveCanvas): StateMachineInput {\n    if (input.type === runtime.SMIInput.bool) {\n      return new StateMachineInput(StateMachineInputType.Boolean, input.asBool());\n    }\n    else if (input.type === runtime.SMIInput.number) {\n      return new StateMachineInput(StateMachineInputType.Number, input.asNumber());\n    }\n    else if (input.type === runtime.SMIInput.trigger) {\n      return new StateMachineInput(StateMachineInputType.Trigger, input.asTrigger());\n    }\n  }\n\n  /**\n   * Deletes the backing Wasm state machine instance; once this is called, this\n   * state machine is no more.\n   */\n     public cleanup() {\n      this.instance.delete();\n    }\n}\n\n// #endregion\n\n// #region animator\n\n/**\n * Manages animation\n */\nclass Animator {\n\n  /**\n   * Constructs a new animator\n   * @constructor\n   * @param runtime Rive runtime; needed to instance animations & state machines\n   * @param artboard the artboard that holds all animations and state machines\n   * @param animations optional list of animations\n   * @param stateMachines optional list of state machines\n   */\n  constructor(\n    private runtime: rc.RiveCanvas,\n    private artboard: rc.Artboard,\n    private eventManager: EventManager,\n    public readonly animations: Animation[] = [],\n    public readonly stateMachines: StateMachine[] = []) {}\n\n  /**\n   * Adds animations and state machines by their names. If names are shared\n   * between animations & state machines, then the first one found will be\n   * created. Best not to use the same names for these in your Rive file.\n   * @param animatable the name(s) of animations and state machines to add\n   * @returns a list of names of the playing animations and state machines\n   */\n  public add(animatables: string | string[], playing: boolean, fireEvent = true): string[] {\n    animatables = mapToStringArray(animatables);\n    // If animatables is empty, play or pause everything\n    if (animatables.length === 0) {\n      this.animations.forEach(a => a.playing = playing);\n      this.stateMachines.forEach(m => m.playing = playing);\n    } else {\n      // Play/pause already instanced items, or create new instances\n      const instancedAnimationNames = this.animations.map(a => a.name);\n      const instancedMachineNames = this.stateMachines.map(m => m.name);\n      for (const i in animatables) {\n        const aIndex = instancedAnimationNames.indexOf(animatables[i]);\n        const mIndex = instancedMachineNames.indexOf(animatables[i]);\n        if (aIndex >= 0 || mIndex >= 0) {\n          if (aIndex >= 0) {\n            // Animation is instanced, play/pause it\n            this.animations[aIndex].playing = playing;\n          } else {\n            // State machine is instanced, play/pause it\n            this.stateMachines[mIndex].playing = playing;\n          }\n       } else {\n          // Try to create a new animation instance\n          const anim = this.artboard.animationByName(animatables[i]);\n          if(anim) {\n            this.animations.push(new Animation(anim, this.runtime, playing));\n          } else {\n            // Try to create a new state machine instance\n            const sm = this.artboard.stateMachineByName(animatables[i]);\n            if (sm) {\n              this.stateMachines.push(new StateMachine(sm, this.runtime, playing));\n            }\n          }\n        }\n      }\n    }\n    // Fire play/paused events for animations\n    if (fireEvent) {\n      if (playing) {\n        this.eventManager.fire({\n          type: EventType.Play,\n          data: this.playing,\n        });\n      } else {\n        this.eventManager.fire({\n          type: EventType.Pause,\n          data: this.paused,\n        });\n      }\n    }\n\n    return playing ? this.playing : this.paused;\n  }\n\n  /**\n   * Play the named animations/state machines\n   * @param animatables the names of the animations/machines to play; plays all if empty\n   * @returns a list of the playing items\n   */\n  public play(animatables: string | string[]): string[] {\n    return this.add(animatables, true);\n  }\n\n    /**\n   * Pauses named animations and state machines, or everything if nothing is\n   * specified\n   * @param animatables names of the animations and state machines to pause\n   * @returns a list of names of the animations and state machines paused\n   */\n     public pause(animatables: string[]): string[] {\n      return this.add(animatables, false);\n    }\n\n    /**\n     * Set time of named animations\n     * @param animations names of the animations to scrub\n     * @param value time scrub value, a floating point number to which the playhead is jumped\n     * @returns a list of names of the animations that were scrubbed\n     */\n    public scrub(animatables: string[], value: number): string[] {\n      const forScrubbing = this.animations.filter(a => animatables.includes(a.name));\n      forScrubbing.forEach(a => a.scrubTo = value);\n      return forScrubbing.map(a => a.name);\n    }\n\n  /**\n   * Returns a list of names of all animations and state machines currently\n   * playing\n   */\n  public get playing(): string[] {\n    return this.animations.filter(a => a.playing).map(a => a.name).concat(\n           this.stateMachines.filter(m => m.playing).map(m => m.name)\n    );\n  }\n\n  /**\n   * Returns a list of names of all animations and state machines currently\n   * paused\n   */\n     public get paused(): string[] {\n      return this.animations.filter(a => !a.playing).map(a => a.name).concat(\n             this.stateMachines.filter(m => !m.playing).map(m => m.name)\n      );\n    }\n\n  /**\n   * Stops and removes all named animations and state machines\n   * @param animatables animations and state machines to remove\n   * @returns a list of names of removed items\n   */\n  public stop(animatables?: string[] | string): string[] {\n    animatables = mapToStringArray(animatables);\n\n    // If nothing's specified, wipe them out, all of them\n    let removedNames: string[] = [];\n    // Stop everything\n    if (animatables.length === 0) {\n      removedNames = this.animations.map(a => a.name).concat(\n        this.stateMachines.map(m => m.name)\n      );\n      // Clean up before emptying the arrays\n      this.animations.forEach(a => a.cleanup());\n      this.stateMachines.forEach(m => m.cleanup());\n      // Empty out the arrays\n      this.animations.splice(0, this.animations.length);\n      this.stateMachines.splice(0, this.stateMachines.length);\n    } else {\n      // Remove only the named animations/state machines\n      const animationsToRemove = this.animations.filter(\n        a => animatables.includes(a.name)\n      );\n      \n      animationsToRemove.forEach(a => {\n        a.cleanup();\n        this.animations.splice(this.animations.indexOf(a), 1);\n      });\n      const machinesToRemove = this.stateMachines.filter(\n        m => animatables.includes(m.name)\n      );\n      machinesToRemove.forEach(m => {\n        m.cleanup();\n        this.stateMachines.splice(this.stateMachines.indexOf(m), 1);\n      });\n      removedNames = animationsToRemove.map(a => a.name).concat(\n        machinesToRemove.map(m => m.name));\n    }\n\n    this.eventManager.fire({\n      type: EventType.Stop,\n      data: removedNames,\n    });\n\n    // Return the list of animations removed\n    return removedNames;\n  }\n\n  /**\n   * Returns true if at least one animation is active\n   */\n  public get isPlaying(): boolean {\n    return this.animations.reduce((acc, curr) => acc || curr.playing, false)\n        || this.stateMachines.reduce((acc, curr) => acc || curr.playing, false);\n  }\n\n  /**\n   * Returns true if all animations are paused and there's at least one animation\n   */\n  public get isPaused(): boolean {\n    return !this.isPlaying && \n           (this.animations.length > 0 || this.stateMachines.length > 0);  \n  }\n\n  /**\n   * Returns true if there are no playing or paused animations/state machines\n   */\n  public get isStopped(): boolean {\n    return this.animations.length === 0 && this.stateMachines.length === 0;\n  }\n\n  /**\n   * If there are no animations or state machines, add the first one found\n   * @returns the name of the animation or state machine instanced\n   */\n   public atLeastOne(playing: boolean, fireEvent = true): string {\n    let instancedName: string;\n    if (this.animations.length === 0 && this.stateMachines.length === 0) {\n      if(this.artboard.animationCount() > 0) {\n        // Add the first animation\n        this.add([instancedName = this.artboard.animationByIndex(0).name], playing, fireEvent);\n      } else if(this.artboard.stateMachineCount() > 0) {\n        // Add the first state machine\n        this.add([instancedName = this.artboard.stateMachineByIndex(0).name], playing, fireEvent);\n      }\n    }\n    return instancedName;\n  }\n\n  /**\n   * Checks if any animations have looped and if so, fire the appropriate event\n   */\n  public handleLooping() {\n    for (const animation of this.animations.filter(a => a.playing)) {\n      // Emit if the animation looped\n      if (animation.loopValue === 0 && animation.loopCount) {\n        animation.loopCount = 0;\n        // This is a one-shot; if it has ended, delete the instance\n        this.stop(animation.name);\n      }\n      else if (animation.loopValue === 1 && animation.loopCount) {\n        this.eventManager.fire({\n          type: EventType.Loop,\n          data: { animation: animation.name, type: LoopType.Loop }\n        });\n        animation.loopCount = 0;\n      }\n      // Wasm indicates a loop at each time the animation\n      // changes direction, so a full loop/lap occurs every\n      // two loop counts\n      else if (animation.loopValue === 2 && animation.loopCount > 1) {\n        this.eventManager.fire({\n          type: EventType.Loop,\n          data: { animation: animation.name, type: LoopType.PingPong }\n        });\n        animation.loopCount = 0;\n      }\n    }\n  }\n\n  /**\n   * Checks if states have changed in state machines and fires a statechange\n   * event\n   */\n  public handleStateChanges() {\n    const statesChanged: string[] = [];\n    for (const stateMachine of this.stateMachines.filter(sm => sm.playing)) {\n     statesChanged.push(...stateMachine.statesChanged);\n    }\n    if (statesChanged.length > 0) {\n      this.eventManager.fire({\n        type: EventType.StateChange,\n        data: statesChanged,\n      });\n    }\n  }\n\n}\n\n// #endregion\n\n// #region events\n\n/**\n * Supported event types triggered in Rive\n */\nexport enum EventType {\n  Load        = 'load',\n  LoadError   = 'loaderror',\n  Play        = 'play',\n  Pause       = 'pause',\n  Stop        = 'stop',\n  Loop        = 'loop',\n  Draw        = 'draw',\n  StateChange = 'statechange',\n}\n\n// Event fired by Rive\nexport interface Event {\n  type: EventType,\n  data?: string | string[] | LoopEvent,\n}\n\n/**\n * Looping types: one-shot, loop, and ping-pong\n */\nexport enum LoopType {\n  OneShot = 'oneshot',  // has value 0 in runtime\n  Loop = 'loop',        // has value 1 in runtime\n  PingPong = 'pingpong' // has value 2 in runtime\n}\n\n/**\n * Loop events are returned through onloop callbacks\n */\nexport interface LoopEvent {\n  animation: string;\n  type: LoopType;\n}\n\n/**\n * Loop events are returned through onloop callbacks\n */\nexport type EventCallback = (event: Event) => void;\n\n/**\n * Event listeners registered with the event manager\n */\nexport interface EventListener {\n  type: EventType,\n  callback: EventCallback,\n}\n\n// Manages Rive events and listeners\nclass EventManager {\n\n  constructor(private listeners: EventListener[] = []) { }\n\n  // Gets listeners of specified type\n  private getListeners(type: EventType): EventListener[] {\n    return this.listeners.filter(e => e.type === type);\n  }\n\n  // Adds a listener\n  public add(listener: EventListener): void {\n    if (!this.listeners.includes(listener)) {\n      this.listeners.push(listener);\n    }\n  }\n\n  /**\n   * Removes a listener\n   * @param listener the listener with the callback to be removed\n   */\n  public remove(listener: EventListener): void {\n    // We can't simply look for the listener as it'll be a different instance to\n    // one originally subscribed. Find all the listeners of the right type and\n    // then check their callbacks which should match.\n    for (let i = 0; i < this.listeners.length; i++) {\n      const currentListener = this.listeners[i];\n      if (currentListener.type === listener.type) {\n        if (currentListener.callback === listener.callback) {\n          this.listeners.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Clears all listeners of specified type, or every listener if no type is\n   * specified\n   * @param type the type of listeners to clear, or all listeners if not\n   * specified\n   */\n  public removeAll(type?: EventType) {\n    if (!type) {\n      this.listeners.splice(0, this.listeners.length);\n    } else {\n      this.listeners\n        .filter((l) => l.type === type)\n        .forEach((l) => this.remove(l));\n    }\n  }\n\n  // Fires an event\n  public fire(event: Event): void {\n    const eventListeners = this.getListeners(event.type);\n    eventListeners.forEach(\n      listener => listener.callback(event)\n    );\n  }\n}\n\n// #endregion\n\n// #region Manages a queue of tasks\n\n// A task in the queue; will fire the action when the queue is processed; will\n// also optionally fire an event.\nexport interface Task {\n  action: VoidCallback,\n  event?: Event,\n}\n\n// Manages a queue of tasks\nclass TaskQueueManager {\n  private queue: Task[] = [];\n\n  constructor(private eventManager: EventManager) { }\n\n  // Adds a task top the queue\n  public add(task: Task): void {\n    this.queue.push(task);\n  }\n\n  // Processes all tasks in the queue\n  public process(): void {\n    while (this.queue.length > 0) {\n      const task = this.queue.shift();\n      task?.action();\n      if (task?.event) {\n        this.eventManager.fire(task.event);\n      }\n    }\n  }\n}\n\n// #endregion\n\n// #region Rive\n\n// Interface for the Rive static method contructor\nexport interface RiveParameters {\n  canvas: HTMLCanvasElement | OffscreenCanvas, // canvas is required\n  src?: string, // one of src or buffer is required\n  buffer?: ArrayBuffer, // one of src or buffer is required\n  artboard?: string,\n  animations?: string | string[],\n  stateMachines?: string | string[],\n  layout?: Layout,\n  autoplay?: boolean,\n  onLoad?: EventCallback,\n  onLoadError?: EventCallback,\n  onPlay?: EventCallback,\n  onPause?: EventCallback,\n  onStop?: EventCallback,\n  onLoop?: EventCallback,\n  onStateChange?: EventCallback,\n  /**\n   * @deprecated Use `onLoad()` instead\n   */\n  onload?: EventCallback,\n  /**\n   * @deprecated Use `onLoadError()` instead\n   */\n  onloaderror?: EventCallback,\n  /**\n   * @deprecated Use `onPoad()` instead\n   */\n  onplay?: EventCallback,\n  /**\n   * @deprecated Use `onPause()` instead\n   */\n  onpause?: EventCallback,\n  /**\n   * @deprecated Use `onStop()` instead\n   */\n  onstop?: EventCallback,\n  /**\n   * @deprecated Use `onLoop()` instead\n   */\n  onloop?: EventCallback,\n  /**\n   * @deprecated Use `onStateChange()` instead\n   */\n  onstatechange?: EventCallback,\n}\n\n// Interface to Rive.load function\nexport interface RiveLoadParameters {\n  src?: string,\n  buffer?: ArrayBuffer,\n  autoplay?: boolean,\n  artboard?: string,\n  animations?: string | string[],\n  stateMachines?: string | string[],\n}\n\n// Interface ot Rive.reset function\nexport interface RiveResetParameters {\n  artboard?: string,\n  animations?: string | string[],\n  stateMachines?: string | string[],\n  autoplay?: boolean,\n}\n\nexport class Rive {\n\n  // Canvas in which to render the artboard\n  private readonly canvas: HTMLCanvasElement | OffscreenCanvas;\n\n  // A url to a Rive file; may be undefined if a buffer is specified\n  private src: string;\n\n  // Raw Rive file data; may be undefined if a src is specified\n  private buffer: ArrayBuffer;\n\n  // The layout for rendering in the canvas\n  private _layout: Layout;\n\n  // Flag to indicate if the layout has changed; used by the renderer to know\n  // when to align\n  private _updateLayout: boolean = true;\n\n  // The canvas 2D context\n  private ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D | null;\n\n  // The runtime renderer\n  private renderer: rc.Renderer;\n\n  /**\n   * Flag to active/deactivate renderer\n   */\n  private isRendererActive = true;\n\n  // Tracks if a Rive file is loaded\n  private loaded: boolean = false;\n\n  /**\n   * Tracks if a Rive file is loaded; we need this in addition to loaded as some\n   * commands (e.g. contents) can be called as soon as the file is loaded.\n   * However, playback commands need to be queued and run in order once initial\n   * animations and autoplay has been sorted out. This applies to play, pause,\n   * and start.\n   */\n  private readyForPlaying: boolean = false;\n\n  // Wasm runtime\n  private runtime: rc.RiveCanvas;\n\n  // Runtime artboard\n  private artboard: rc.Artboard | null = null;\n\n  // Runtime file\n  private file: rc.File;\n\n  // Holds event listeners\n  private eventManager: EventManager;\n\n  // Manages the loading task queue\n  private taskQueue: TaskQueueManager;\n\n  // Animator: manages animations and state machines\n  private animator: Animator;\n\n  // Error message for missing source or buffer\n  private static readonly missingErrorMessage: string =\n    'Rive source file or data buffer required';\n\n  constructor(params: RiveParameters) {\n    this.canvas = params.canvas;\n    this.src = params.src;\n    this.buffer = params.buffer;\n    this.layout = params.layout ?? new Layout();\n\n    // Fetch the 2d context from the canvas\n    this.ctx = this.canvas.getContext('2d');\n\n    // New event management system\n    this.eventManager = new EventManager();\n    if (params.onLoad) this.on(EventType.Load, params.onLoad);\n    if (params.onLoadError) this.on(EventType.LoadError, params.onLoadError);\n    if (params.onPlay) this.on(EventType.Play, params.onPlay);\n    if (params.onPause) this.on(EventType.Pause, params.onPause);\n    if (params.onStop) this.on(EventType.Stop, params.onStop);\n    if (params.onLoop) this.on(EventType.Loop, params.onLoop);\n    if (params.onStateChange) this.on(EventType.StateChange, params.onStateChange);\n    \n    /**\n     * @deprecated Use camelCase'd versions instead.\n     */\n    if (params.onload && !params.onLoad) this.on(EventType.Load, params.onload);\n    if (params.onloaderror && !params.onLoadError) this.on(EventType.LoadError, params.onloaderror);\n    if (params.onplay && !params.onPlay) this.on(EventType.Play, params.onplay);\n    if (params.onpause && !params.onPause) this.on(EventType.Pause, params.onpause);\n    if (params.onstop && !params.onStop) this.on(EventType.Stop, params.onstop);\n    if (params.onloop && !params.onLoop) this.on(EventType.Loop, params.onloop);\n    if (params.onstatechange && !params.onStateChange) this.on(EventType.StateChange, params.onstatechange);\n\n    // Hook up the task queue\n    this.taskQueue = new TaskQueueManager(this.eventManager);\n\n    this.init({\n      src: this.src,\n      buffer: this.buffer,\n      autoplay: params.autoplay,\n      animations: params.animations,\n      stateMachines: params.stateMachines,\n      artboard: params.artboard\n    });\n  }\n\n  // Alternative constructor to build a Rive instance from an interface/object\n  public static new(params: RiveParameters): Rive {\n    console.warn('This function is deprecated: please use `new Rive({})` instead');\n    return new Rive(params);\n  }\n\n  // Initializes the Rive object either from constructor or load()\n  private init({ src, buffer, animations, stateMachines, artboard, autoplay = false }: RiveLoadParameters): void {\n    this.src = src;\n    this.buffer = buffer;\n\n    // If no source file url specified, it's a bust\n    if (!this.src && !this.buffer) {\n      throw new Error(Rive.missingErrorMessage);\n    }\n\n    // List of animations that should be initialized.\n    const startingAnimationNames = mapToStringArray(animations);\n\n    // List of state machines that should be initialized\n    const startingStateMachineNames = mapToStringArray(stateMachines);\n\n    // Ensure loaded is marked as false if loading new file\n    this.loaded = false;\n    this.readyForPlaying = false;\n\n    // Ensure the runtime is loaded\n    RuntimeLoader.awaitInstance().then((runtime) => {\n      this.runtime = runtime;\n      // Load Rive data from a source uri or a data buffer\n      this.initData(artboard, startingAnimationNames, startingStateMachineNames, autoplay).catch(e => {\n        console.error(e);\n      });\n    }).catch(e => {\n      console.error(e);\n    });\n  }\n\n  // Initializes runtime with Rive data and preps for playing\n  private async initData(\n    artboardName: string,\n    animationNames: string[],\n    stateMachineNames: string[],\n    autoplay: boolean\n  ): Promise<void> {\n    // Load the buffer from the src if provided\n    if (this.src) {\n      this.buffer = await loadRiveFile(this.src);\n    }\n    // Load the Rive file\n    this.file = await this.runtime.load(new Uint8Array(this.buffer));\n    if (this.file) {\n      // Initialize and draw frame\n      this.initArtboard(artboardName, animationNames, stateMachineNames, autoplay);\n\n      // Everything's set up, emit a load event\n      this.loaded = true;\n      this.eventManager.fire({\n        type: EventType.Load,\n        data: this.src ?? 'buffer'\n      });\n\n      // Flag ready for playback commands and clear the task queue; this order\n      // is important or it may infinitely recurse\n      this.readyForPlaying = true;\n      this.taskQueue.process();\n\n      this.drawFrame();\n\n      return Promise.resolve();\n    } else {\n      const msg = 'Problem loading file; may be corrupt!';\n      console.warn(msg);\n      this.eventManager.fire({ type: EventType.LoadError, data: msg });\n      return Promise.reject(msg);\n    }\n  }\n\n  // Initialize for playback\n  private initArtboard(\n    artboardName: string,\n    animationNames: string[],\n    stateMachineNames: string[],\n    autoplay: boolean\n  ): void {\n\n    // Fetch the artboard\n    const rootArtboard = artboardName ?\n      this.file.artboardByName(artboardName) :\n      this.file.defaultArtboard();\n    \n    // Check we have a working artboard\n    if (!rootArtboard) {\n      const msg = 'Invalid artboard name or no default artboard';\n      console.warn(msg);\n      this.eventManager.fire({ type: EventType.LoadError, data: msg });\n      return;\n    }\n\n    // Instance the artboard\n    this.artboard = rootArtboard.instance();\n\n    // Check that the artboard has at least 1 animation\n    if (this.artboard.animationCount() < 1) {\n      const msg = 'Artboard has no animations';\n      this.eventManager.fire({ type: EventType.LoadError, data: msg });\n      throw msg;\n    }\n\n    // Initialize the animator\n    this.animator = new Animator(this.runtime, this.artboard, this.eventManager);\n\n    // Get the canvas where you want to render the animation and create a renderer\n    this.renderer = new this.runtime.CanvasRenderer(this.ctx);\n\n\n    // Initialize the animations; as loaded hasn't happened yet, we need to\n    // suppress firing the play/pause events until the load event has fired. To\n    // do this we tell the animator to suppress firing events, and add event\n    // firing to the task queue.\n    let instanceNames: string[];\n    if (animationNames.length > 0 || stateMachineNames.length > 0) {\n      instanceNames = animationNames.concat(stateMachineNames);\n      this.animator.add(instanceNames, autoplay, false);\n    } else {\n      instanceNames = [this.animator.atLeastOne(autoplay, false)];\n    }\n    // Queue up firing the playback events\n    this.taskQueue.add({\n      action: () => {},\n      event: {\n        type: autoplay ? EventType.Play : EventType.Pause,\n        data: instanceNames,\n      }\n    });\n  }\n\n  // Draws the current artboard frame\n  public drawFrame() {\n    this.startRendering();\n  }\n\n  // Tracks the last timestamp at which the animation was rendered. Used only in\n  // draw().\n  private lastRenderTime: number;\n\n  // Tracks the current animation frame request\n  private frameRequestId: number | null;\n\n  /**\n   * Used be draw to track when a second of active rendering time has passed. Used for debugging purposes\n   */\n  private renderSecondTimer: number = 0;\n\n  /**\n   * Draw rendering loop; renders animation frames at the correct time interval.\n   * @param time the time at which to render a frame\n   */\n  private draw(time: number, onSecond?: VoidCallback): void {\n    // Clear the frameRequestId, as we're now rendering a fresh frame\n    this.frameRequestId = null;\n\n    // On the first pass, make sure lastTime has a valid value\n    if (!this.lastRenderTime) {\n      this.lastRenderTime = time;\n    }\n\n    // Handle the onSecond callback\n    this.renderSecondTimer += (time - this.lastRenderTime);\n    if (this.renderSecondTimer > 5000) {\n      this.renderSecondTimer = 0;\n      onSecond?.();\n    }\n\n    // Calculate the elapsed time between frames in seconds\n    const elapsedTime = (time - this.lastRenderTime) / 1000;\n    this.lastRenderTime = time;\n\n    // Advance non-paused animations by the elapsed number of seconds\n    // Also advance any animations that require scrubbing\n    const activeAnimations = this.animator.animations.filter(a => a.playing || a.needsScrub)\n      // The scrubbed animations must be applied first to prevent weird artifacts\n      // if the playing animations conflict with the scrubbed animating attribuates.\n      .sort((first, second) => first.needsScrub ? -1 : 1);\n    for (const animation of activeAnimations) {\n      animation.advance(elapsedTime);\n      if (animation.instance.didLoop) {\n        animation.loopCount += 1;\n      }\n      animation.instance.apply(this.artboard, 1.0);\n    }\n\n    // Advance non-paused state machines by the elapsed number of seconds\n    const activeStateMachines = this.animator.stateMachines.filter(a => a.playing);\n    for (const stateMachine of activeStateMachines) {\n      stateMachine.instance.advance(this.artboard, elapsedTime);\n      // stateMachine.instance.apply(this.artboard);\n    }\n\n    // Once the animations have been applied to the artboard, advance it\n    // by the elapsed time.\n    this.artboard.advance(elapsedTime);\n\n    // Update the renderer alignment if necessary\n    this.alignRenderer();\n\n    this.artboard.draw(this.renderer);\n\n    // Check for any animations that looped\n    this.animator.handleLooping();\n\n    // Check for any state machines that had a state change\n    this.animator.handleStateChanges();\n\n    // Calling requestAnimationFrame will rerun draw() at the correct rate:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Basic_animations\n    if (this.animator.isPlaying) {\n      // Request a new rendering frame\n      this.startRendering();\n    } else if (this.animator.isPaused) {\n      // Reset the end time so on playback it starts at the correct frame\n      this.lastRenderTime = 0;\n    } else if (this.animator.isStopped) {\n      // Reset animation instances, artboard and time\n      // TODO: implement this properly when we have instancing\n      // this.initArtboard();\n      // this.drawFrame();\n      this.lastRenderTime = 0;\n    }\n  }\n\n  /**\n   * Align the renderer\n   */\n  private alignRenderer(): void {\n    // Restore from previous save in case a previous align occurred\n    this.ctx.restore();\n    // Canvas must be wiped to prevent artifacts\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    // Now save so that future changes to align can restore\n    this.ctx.save();\n    // Align things up safe in the knowledge we can restore if changed\n    this.renderer.align(\n      this._layout.runtimeFit(this.runtime),\n      this._layout.runtimeAlignment(this.runtime),\n      {\n        minX: this._layout.minX,\n        minY: this._layout.minY,\n        maxX: this._layout.maxX,\n        maxY: this._layout.maxY\n      },\n      this.artboard.bounds\n    );\n  }\n\n  /**\n   * Cleans up any Wasm-generated objects that need to be manually destroyed:\n   * artboard instances, animation instances, state machine instances.\n   *\n   * Once this is called, things will need to be reinitialized or bad things\n   * might happen.\n   */\n  public cleanup() {\n    this.artboard.delete();\n    // TODO: delete animation and state machine instances\n  }\n\n  // Plays specified animations; if none specified, it unpauses everything.\n  public play(animationNames?: string | string[], autoplay?: true): void {\n    animationNames = mapToStringArray(animationNames);\n\n    // If the file's not loaded, queue up the play\n    if (!this.readyForPlaying) {\n      this.taskQueue.add({\n        action: () => this.play(animationNames, autoplay),\n      });\n      return;\n    }\n    this.animator.play(animationNames);\n    this.startRendering();\n  }\n\n  // Pauses specified animations; if none specified, pauses all.\n  public pause(animationNames?: string | string[]): void {\n    animationNames = mapToStringArray(animationNames);\n\n    // If the file's not loaded, early out, nothing to pause\n    if (!this.readyForPlaying) {\n      this.taskQueue.add({\n        action: () => this.pause(animationNames),\n      });\n      return;\n    }\n    this.animator.pause(animationNames);\n  }\n\n  public scrub(animationNames?: string | string[], value?: number): void {\n    animationNames = mapToStringArray(animationNames);\n\n    // If the file's not loaded, early out, nothing to pause\n    if (!this.readyForPlaying) {\n        this.taskQueue.add({\n            action: () => this.scrub(animationNames, value),\n        });\n        return;\n    }\n\n    // Scrub the animation time; we draw a single frame here so that if\n    // nothing's currently playing, the scrubbed animation is still rendered/\n    this.animator.scrub(animationNames, value || 0);\n    this.drawFrame();\n  }\n\n  // Stops specified animations; if none specifies, stops them all.\n  public stop(animationNames?: string | string[] | undefined): void {\n    animationNames = mapToStringArray(animationNames);\n    // If the file's not loaded, early out, nothing to pause\n    if (!this.readyForPlaying) {\n      this.taskQueue.add({\n        action: () => this.stop(animationNames),\n      });\n      return;\n    }\n    this.animator.stop(animationNames);\n  }\n\n  /**\n   * Resets the animation\n   * @param artboard the name of the artboard, or default if none given\n   * @param animations the names of animations for playback\n   * @param stateMachines the names of state machines for playback\n   * @param autoplay whether to autoplay when reset, defaults to false\n   *\n   */\n  public reset(params?: RiveResetParameters): void {\n    // Get the current artboard, animations, state machines, and playback states\n    const artBoardName = params?.artboard;\n    const animationNames = mapToStringArray(params?.animations);\n    const stateMachineNames = mapToStringArray(params?.stateMachines);\n    const autoplay = params?.autoplay ?? false;\n\n    // Stop everything and clean up\n    this.stop();\n    this.cleanup();\n\n    // Reinitialize an artboard instance with the state\n    this.initArtboard(artBoardName, animationNames, stateMachineNames, autoplay);\n  }\n\n\n  // Loads a new Rive file, keeping listeners in place\n  public load(params: RiveLoadParameters): void {\n    // Stop all animations\n    this.stop();\n    // Reinitialize\n    this.init(params);\n  }\n\n  // Sets a new layout\n  public set layout(layout: Layout) {\n    this._layout = layout;\n    // If the maxX or maxY are 0, then set them to the canvas width and height\n    if (!layout.maxX || !layout.maxY) {\n      this.resizeToCanvas();\n    }\n    if (this.loaded && !this.animator.isPlaying) {\n      this.drawFrame();\n    }\n  }\n\n  /**\n   * Returns the current layout. Note that layout should be treated as\n   * immutable. If you want to change the layout, create a new one use the\n   * layout setter\n   */\n  public get layout() {\n    return this._layout;\n  }\n\n  /** \n   * Sets the layout bounds to the current canvas size; this is typically called\n   * when the canvas is resized\n   */\n  public resizeToCanvas() {\n    this._layout = this.layout.copyWith({\n      minX: 0,\n      minY: 0,\n      maxX: this.canvas.width,\n      maxY: this.canvas.height\n    });\n  }\n\n  // Returns the animation source, which may be undefined\n  public get source(): string {\n    return this.src;\n  }\n\n  /**\n   * Returns the name of the active artboard\n   */\n  public get activeArtboard(): string {\n    return this.artboard.name;\n  }\n\n  // Returns a list of animation names on the chosen artboard\n  public get animationNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    const animationNames: string[] = [];\n    for (let i = 0; i < this.artboard.animationCount(); i++) {\n      animationNames.push(this.artboard.animationByIndex(i).name);\n    }\n    return animationNames;\n  }\n\n  /**\n   * Returns a list of state machine names from the current artboard\n   */\n  public get stateMachineNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    const stateMachineNames: string[] = [];\n    for (let i = 0; i < this.artboard.stateMachineCount(); i++) {\n      stateMachineNames.push(this.artboard.stateMachineByIndex(i).name);\n    }\n    return stateMachineNames;\n  }\n\n  /**\n   * Returns the inputs for the specified instanced state machine, or an empty\n   * list if the name is invalid or the state machine is not instanced\n   * @param name the state machine name\n   * @returns the inputs for the named state machine\n   */\n  public stateMachineInputs(name: string): StateMachineInput[] {\n    // If the file's not loaded, early out, nothing to pause\n    if (!this.loaded) {\n      return;\n    }\n    const stateMachine = this.animator.stateMachines.find(m => m.name === name);\n    return stateMachine?.inputs;\n  }\n\n  // Returns a list of playing machine names\n  public get playingStateMachineNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    return this.animator.stateMachines\n      .filter(m => m.playing)\n      .map(m => m.name);\n  }\n\n  // Returns a list of playing animation names\n  public get playingAnimationNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    return this.animator.animations\n      .filter(a => a.playing)\n      .map(a => a.name);\n  }\n\n\n  // Returns a list of paused animation names\n  public get pausedAnimationNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    return this.animator.animations\n      .filter(a => !a.playing)\n      .map(a => a.name);\n  }\n\n  /**\n   *  Returns a list of paused machine names\n   * @returns a list of state machine names that are paused\n   */\n  public get pausedStateMachineNames(): string[] {\n    // If the file's not loaded, we got nothing to return\n    if (!this.loaded) {\n      return [];\n    }\n    return this.animator.stateMachines\n      .filter(m => !m.playing)\n      .map(m => m.name);\n  }\n\n  /**\n   * @returns true if any animation is playing\n   */\n  public get isPlaying(): boolean {\n    return this.animator.isPlaying;\n  }\n\n  /**\n   * @returns true if all instanced animations are paused\n   */\n  public get isPaused(): boolean {\n    return this.animator.isPaused;\n  }\n\n  /**\n   * @returns true if no animations are playing or paused\n   */\n  public get isStopped(): boolean {\n    return this.animator.isStopped;\n  }\n\n  /**\n   * @returns the bounds of the current artboard, or undefined if the artboard\n   * isn't loaded yet.\n   */\n  public get bounds(): Bounds {\n    return this.artboard ? this.artboard.bounds : undefined;\n  }\n\n  /**\n   * Subscribe to Rive-generated events\n   * @param type the type of event to subscribe to\n   * @param callback callback to fire when the event occurs\n   */\n  public on(type: EventType, callback: EventCallback) {\n    this.eventManager.add({\n      type: type,\n      callback: callback,\n    });\n  }\n\n  /**\n   * Unsubscribes from a Rive-generated event\n   * @param callback the callback to unsubscribe from\n   */\n  public unsubscribe(type: EventType, callback: EventCallback) {\n    this.eventManager.remove({\n      type: type,\n      callback: callback,\n    });\n  }\n\n  /**\n   * Unsubscribes all listeners from an event type, or everything if no type is\n   * given\n   * @param type the type of event to unsubscribe from, or all types if\n   * undefined\n   */\n  public unsubscribeAll(type?: EventType) {\n    this.eventManager.removeAll(type);\n  }\n\n  /**\n   * Stops the rendering loop; this is different from pausing in that it doesn't\n   * change the state of any animation. It stops rendering from occurring. This\n   * is designed for situations such as when Rive isn't visible.\n   *\n   * The only way to start rendering again is to call `startRendering`.\n   * Animations that are marked as playing will start from the position that\n   * they would have been at if rendering had not been stopped.\n   */\n  public stopRendering() {\n    if (this.loaded && this.frameRequestId) {\n      cancelAnimationFrame(this.frameRequestId);\n      this.frameRequestId = null;\n    }\n  }\n\n  /**\n   * Starts the rendering loop if it has been previously stopped. If the\n   * renderer is already active, then this will have zero effect.\n   */\n  public startRendering() {\n    if (this.loaded && !this.frameRequestId) {\n      this.frameRequestId = requestAnimationFrame(this.draw.bind(this));\n    }\n  }\n\n  /**\n   * Returns the contents of a Rive file: the artboards, animations, and state machines\n   */\n  public get contents(): RiveFileContents {\n    if (!this.loaded) {\n      return undefined;\n    }\n    const riveContents: RiveFileContents = {\n      artboards: [],\n    };\n    for (let i = 0; i < this.file.artboardCount(); i++) {\n      const artboard = this.file.artboardByIndex(i);\n      const artboardContents: ArtboardContents = {\n        name: artboard.name,\n        animations: [],\n        stateMachines: [],\n      };\n      for (let j = 0; j < artboard.animationCount(); j++) {\n        const animation = artboard.animationByIndex(j);\n        artboardContents.animations.push(animation.name);\n      }\n      for (let k = 0; k < artboard.stateMachineCount(); k++) {\n        const stateMachine = artboard.stateMachineByIndex(k);\n        const name = stateMachine.name;\n        const instance = new this.runtime.StateMachineInstance(stateMachine);\n        const inputContents: StateMachineInputContents[] = [];\n        for (let l = 0; l < instance.inputCount(); l++) {\n          const input = instance.input(l);\n          inputContents.push({name: input.name, type: input.type});\n        }\n        artboardContents.stateMachines.push({name: name, inputs: inputContents});\n      }\n      riveContents.artboards.push(artboardContents);\n    }\n    return riveContents;\n  }\n}\n\n/**\n * Contents of a state machine input\n */\ninterface StateMachineInputContents {\n  name: string;\n  type: StateMachineInputType;\n  initialValue?: boolean | number;\n}\n\n/**\n * Contents of a state machine\n */\ninterface StateMachineContents {\n  name: string;\n  inputs: StateMachineInputContents[];\n}\n\n/**\n * Contents of an artboard\n */\ninterface ArtboardContents {\n  animations: string[];\n  stateMachines: StateMachineContents[];\n  name: string;\n}\n\n/**\n * contents of a Rive file\n */\ninterface RiveFileContents {\n  artboards?: ArtboardContents[];\n}\n\n\n// Loads Rive data from a URI via fetch.\nconst loadRiveFile = async (src: string): Promise<ArrayBuffer> => {\n  const req = new Request(src);\n  const res = await fetch(req);\n  const buffer = await res.arrayBuffer();\n  return buffer;\n}\n\n// #endregion\n\n// #region utility functions\n\n/*\n * Utility function to ensure an object is a string array\n */\nlet mapToStringArray = (obj?: string[] | string | undefined): string[] => {\n  if (typeof obj === 'string') {\n    return [obj];\n  } else if (obj instanceof Array) {\n    return obj;\n  }\n  // If obj is undefined, return empty array\n  return [];\n}\n\n// #endregion\n\n// #region testing utilities\n\n// Exports to only be used for tests\nexport const Testing = {\n  EventManager: EventManager,\n  TaskQueueManager: TaskQueueManager,\n}\n\n// #endregion"],"sourceRoot":""},"metadata":{},"sourceType":"script"}